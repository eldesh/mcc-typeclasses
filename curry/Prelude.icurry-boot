interface Prelude where {
import Ratio;
infix 4 ==;
infix 4 /=;
infixl 8 **;
infixl 7 /;
infixl 7 `quot`;
infixl 7 `rem`;
infixl 7 `div`;
infixl 7 `mod`;
infixl 1 >>=;
infixl 1 >>;
infixl 6 +;
infixl 6 -;
infixl 7 *;
infix 4 <;
infix 4 <=;
infix 4 >=;
infix 4 >;
infixr 5 :;
infixr 0 $;
infixr 0 $!;
infixr 0 $!!;
infixr 0 $#;
infixr 0 $##;
infixr 0 &;
infixr 3 &&;
infixr 0 &>;
infixr 5 ++;
infixr 9 .;
infix 4 =/=;
infix 4 =:<=;
infix 4 =:=;
infix 4 ==<=;
infixr 0 ?;
infixl 8 ^;
infixl 8 ^^;
infix 4 `elem`;
infix 4 `notElem`;
infixr 0 `seq`;
infixr 2 ||;
data () = ();
data (,) a b = (,) a b;
data (,,) a b c = (,,) a b c;
data (,,,) a b c d = (,,,) a b c d;
data (,,,,) a b c d e = (,,,,) a b c d e;
data (,,,,,) a b c d e f = (,,,,,) a b c d e f;
data (,,,,,,) a b c d e f g = (,,,,,,) a b c d e f g;
data (,,,,,,,) a b c d e f g h = (,,,,,,,) a b c d e f g h;
data (,,,,,,,,) a b c d e f g h i = (,,,,,,,,) a b c d e f g h i;
data (,,,,,,,,,) a b c d e f g h i j
  = (,,,,,,,,,) a b c d e f g h i j;
data (,,,,,,,,,,) a b c d e f g h i j k
  = (,,,,,,,,,,) a b c d e f g h i j k;
data (,,,,,,,,,,,) a b c d e f g h i j k l
  = (,,,,,,,,,,,) a b c d e f g h i j k l;
data (,,,,,,,,,,,,) a b c d e f g h i j k l m
  = (,,,,,,,,,,,,) a b c d e f g h i j k l m;
data (,,,,,,,,,,,,,) a b c d e f g h i j k l m n
  = (,,,,,,,,,,,,,) a b c d e f g h i j k l m n;
data (,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o
  = (,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o;
data (,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p
  = (,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p;
data (,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q
  = (,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q;
data (,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r
  = (,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r;
data (,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s
  = (,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s;
data (,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t
  = (,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t;
data (,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u
  = (,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u;
data (,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v
  = (,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u
			    v;
data (,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w
  = (,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t
			     u v w;
data (,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x
  = (,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t
			      u v w x;
data (,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y
  = (,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s
			       t u v w x y;
data (,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z
  = (,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s
				t u v w x y z;
data (,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a1
  = (,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r
				 s t u v w x y z a1;
data (,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a1 b1
  = (,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r
				  s t u v w x y z a1 b1;
data (,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a1 b1 c1
  = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q
				   r s t u v w x y z a1 b1 c1;
data (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q r s t u v w x y z a1 b1 c1 d1
  = (,,,,,,,,,,,,,,,,,,,,,,,,,,,,,) a b c d e f g h i j k l m n o p q
				    r s t u v w x y z a1 b1 c1 d1;
data (->) a b;
data Bool = False | True;
class Bounded a where {
minBound :: a;
maxBound :: a
};
data Char;
data Either a b = Left a | Right b;
class Enum a where {
succ :: {-# ARITY 1 #-} a -> a;
pred :: {-# ARITY 1 #-} a -> a;
toEnum :: Int -> a;
fromEnum :: a -> Int;
enumFrom :: {-# ARITY 1 #-} a -> [a];
enumFromThen :: {-# ARITY 2 #-} a -> a -> [a];
enumFromTo :: {-# ARITY 2 #-} a -> a -> [a];
enumFromThenTo :: {-# ARITY 3 #-} a -> a -> a -> [a]
};
class Eq a where {
(==) :: {-# ARITY 2 #-} a -> a -> Bool;
(/=) :: {-# ARITY 2 #-} a -> a -> Bool
};
type FilePath = [Char];
data Float;
class Fractional a => Floating a where {
pi :: a;
exp :: a -> a;
log :: a -> a;
sqrt :: {-# ARITY 1 #-} a -> a;
(**) :: {-# ARITY 2 #-} a -> a -> a;
logBase :: {-# ARITY 2 #-} a -> a -> a;
sin :: a -> a;
cos :: a -> a;
tan :: {-# ARITY 1 #-} a -> a;
asin :: a -> a;
acos :: a -> a;
atan :: a -> a;
sinh :: a -> a;
cosh :: a -> a;
tanh :: {-# ARITY 1 #-} a -> a;
asinh :: a -> a;
acosh :: a -> a;
atanh :: a -> a
};
class Num a => Fractional a where {
(/) :: {-# ARITY 2 #-} a -> a -> a;
recip :: {-# ARITY 1 #-} a -> a;
fromRational :: Ratio.Ratio Integer -> a;
fromFloat :: {-# ARITY 1 #-} Float -> a
};
class (Functor :: * -> *) a where {
fmap :: (b -> c) -> a b -> a c
};
data IO a;
type IOError = [Char];
data Int;
data Integer;
class (Enum a, Real a) => Integral a where {
quot :: {-# ARITY 2 #-} a -> a -> a;
rem :: {-# ARITY 2 #-} a -> a -> a;
div :: {-# ARITY 2 #-} a -> a -> a;
mod :: {-# ARITY 2 #-} a -> a -> a;
quotRem :: a -> a -> (a, a);
divMod :: {-# ARITY 2 #-} a -> a -> (a, a);
toInt :: {-# ARITY 1 #-} a -> Int;
toInteger :: a -> Integer
};
data Maybe a = Nothing | Just a;
class (Monad :: * -> *) a where {
return :: b -> a b;
(>>=) :: a b -> (b -> a c) -> a c;
(>>) :: {-# ARITY 2 #-} a b -> a c -> a c;
fail :: {-# ARITY 1 #-} [Char] -> a b
};
class (Eq a, Show a) => Num a where {
(+) :: a -> a -> a;
(-) :: {-# ARITY 2 #-} a -> a -> a;
(*) :: a -> a -> a;
negate :: {-# ARITY 1 #-} a -> a;
abs :: a -> a;
signum :: a -> a;
fromInt :: {-# ARITY 1 #-} Int -> a;
fromInteger :: Integer -> a
};
class Eq a => Ord a where {
compare :: {-# ARITY 2 #-} a -> a -> Ordering;
(<) :: {-# ARITY 2 #-} a -> a -> Bool;
(<=) :: {-# ARITY 2 #-} a -> a -> Bool;
(>=) :: {-# ARITY 2 #-} a -> a -> Bool;
(>) :: {-# ARITY 2 #-} a -> a -> Bool;
min :: {-# ARITY 2 #-} a -> a -> a;
max :: {-# ARITY 2 #-} a -> a -> a
};
data Ordering = LT | EQ | GT;
class (Num a, Ord a) => Real a where {
toRational :: a -> Ratio.Ratio Integer
};
class (Floating a, RealFrac a) => RealFloat a where {
atan2 :: a -> a -> a;
toFloat :: {-# ARITY 1 #-} a -> Float
};
class (Fractional a, Real a) => RealFrac a where {
properFraction :: Integral b => a -> (b, a);
truncate :: {-# ARITY 1 #-} Integral b => a -> b;
round :: {-# ARITY 1 #-} Integral b => a -> b;
ceiling :: {-# ARITY 1 #-} Integral b => a -> b;
floor :: {-# ARITY 1 #-} Integral b => a -> b
};
class Show a where {
showsPrec :: {-# ARITY 3 #-} Int -> a -> [Char] -> [Char];
show :: {-# ARITY 1 #-} a -> [Char];
showList :: {-# ARITY 1 #-} [a] -> [Char] -> [Char]
};
type ShowS = [Char] -> [Char];
type String = [Char];
type Success = Bool;
data [] a = [] | (:) a [a];
data Integral a => Ratio.Ratio a = (:%) a a {-# HIDING (:%) #-};
type Ratio.Rational = Ratio.Ratio Integer;
(!!) :: [a] -> Int -> a;
($) :: (a -> b) -> a -> b;
($!) :: (a -> b) -> a -> b;
($!!) :: (a -> b) -> a -> b;
($#) :: (a -> b) -> a -> b;
($##) :: (a -> b) -> a -> b;
(&) :: Bool -> Bool -> Bool;
(&&) :: Bool -> Bool -> Bool;
(&>) :: Bool -> a -> a;
(++) :: [a] -> [a] -> [a];
(.) :: (a -> b) -> (c -> a) -> c -> b;
(=/=) :: a -> a -> Bool;
(=:<=) :: a -> a -> Bool;
(=:=) :: a -> a -> Bool;
(==<=) :: a -> a -> Bool;
(?) :: a -> a -> a;
(^) :: (Num a, Integral b) => a -> b -> a;
(^^) :: (Fractional a, Integral b) => a -> b -> a;
all :: (a -> Bool) -> [a] -> Bool;
and :: [Bool] -> Bool;
any :: (a -> Bool) -> [a] -> Bool;
appendFile :: [Char] -> [Char] -> IO ();
best :: (a -> Bool) -> (a -> a -> Bool) -> [a -> Bool];
break :: {-# ARITY 1 #-} (a -> Bool) -> [a] -> ([a], [a]);
browse :: Show a => (a -> Bool) -> IO ();
browseList :: Show a => [a -> Bool] -> IO ();
catch :: {-# ARITY 3 #-} IO a -> ([Char] -> IO a) -> IO a;
chr :: Int -> Char;
concat :: [[a]] -> [a];
concatMap :: (a -> [b]) -> [a] -> [b];
const :: a -> b -> a;
curry :: ((a, b) -> c) -> a -> b -> c;
doSolve :: Bool -> IO ();
done :: Monad a => a ();
drop :: Int -> [a] -> [a];
dropWhile :: (a -> Bool) -> [a] -> [a];
either :: (a -> b) -> (c -> b) -> Either a c -> b;
elem :: {-# ARITY 1 #-} Eq a => a -> [a] -> Bool;
ensureGround :: a -> a;
ensureNotFree :: a -> a;
ensureSpine :: [a] -> [a];
error :: [Char] -> a;
even :: Integral a => a -> Bool;
failed :: a;
filter :: (a -> Bool) -> [a] -> [a];
findall :: (a -> Bool) -> [a];
findfirst :: (a -> Bool) -> a;
flip :: (a -> b -> c) -> b -> a -> c;
foldl :: (a -> b -> a) -> a -> [b] -> a;
foldl1 :: (a -> a -> a) -> [a] -> a;
foldr :: (a -> b -> b) -> b -> [a] -> b;
foldr1 :: (a -> a -> a) -> [a] -> a;
fromIntegral :: (Integral a, Num b) => a -> b;
fst :: (a, b) -> a;
gcd :: Integral a => a -> a -> a;
getChar :: IO Char;
getContents :: IO [Char];
getLine :: IO [Char];
head :: [a] -> a;
id :: a -> a;
if_then_else :: Bool -> a -> a -> a;
inject :: (a -> Bool) -> (a -> Bool) -> a -> Bool;
interact :: ([Char] -> [Char]) -> IO ();
ioError :: {-# ARITY 2 #-} [Char] -> IO a;
iterate :: (a -> a) -> a -> [a];
lcm :: Integral a => a -> a -> a;
length :: {-# ARITY 0 #-} [a] -> Int;
lines :: [Char] -> [[Char]];
lookup :: Eq a => a -> [(a, b)] -> Maybe b;
map :: (a -> b) -> [a] -> [b];
mapIO :: {-# ARITY 0 #-} (a -> IO b) -> [a] -> IO [b];
mapIO_ :: {-# ARITY 0 #-} (a -> IO b) -> [a] -> IO ();
mapM :: Monad b => (a -> b c) -> [a] -> b [c];
mapM_ :: Monad b => (a -> b c) -> [a] -> b ();
maybe :: a -> (b -> a) -> Maybe b -> a;
not :: Bool -> Bool;
notElem :: {-# ARITY 1 #-} Eq a => a -> [a] -> Bool;
null :: [a] -> Bool;
odd :: Integral a => a -> Bool;
once :: {-# ARITY 1 #-} (a -> Bool) -> a -> Bool;
or :: [Bool] -> Bool;
ord :: Char -> Int;
otherwise :: Bool;
print :: Show a => a -> IO ();
putChar :: {-# ARITY 0 #-} Char -> IO ();
putStr :: {-# ARITY 0 #-} [Char] -> IO ();
putStrLn :: {-# ARITY 0 #-} [Char] -> IO ();
readFile :: [Char] -> IO [Char];
realToFrac :: (Real a, Fractional b) => a -> b;
repeat :: a -> [a];
replicate :: Int -> a -> [a];
reverse :: {-# ARITY 0 #-} [a] -> [a];
seq :: a -> b -> b;
sequence :: {-# ARITY 0 #-} Monad a => [a b] -> a [b];
sequenceIO :: {-# ARITY 0 #-} [IO a] -> IO [a];
sequenceIO_ :: {-# ARITY 0 #-} [IO a] -> IO ();
sequence_ :: {-# ARITY 0 #-} Monad a => [a b] -> a ();
showChar :: {-# ARITY 1 #-} Char -> [Char] -> [Char];
showParen :: {-# ARITY 2 #-} Bool -> ([Char] -> [Char]) ->
			     [Char] -> [Char];
showString :: {-# ARITY 1 #-} [Char] -> [Char] -> [Char];
shows :: {-# ARITY 0 #-} Show a => a -> [Char] -> [Char];
snd :: (a, b) -> b;
solve :: Bool -> Bool;
solveAll :: (a -> Bool) -> [a -> Bool];
span :: (a -> Bool) -> [a] -> ([a], [a]);
splitAt :: Int -> [a] -> ([a], [a]);
subtract :: Num a => a -> a -> a;
success :: Bool;
tail :: [a] -> [a];
take :: Int -> [a] -> [a];
takeWhile :: (a -> Bool) -> [a] -> [a];
try :: (a -> Bool) -> [a -> Bool];
uncurry :: (a -> b -> c) -> (a, b) -> c;
undefined :: a;
unknown :: a;
unlines :: [[Char]] -> [Char];
unpack :: (a -> Bool) -> a;
until :: (a -> Bool) -> (a -> a) -> a -> a;
unwords :: [[Char]] -> [Char];
unzip :: [(a, b)] -> ([a], [b]);
unzip3 :: [(a, b, c)] -> ([a], [b], [c]);
words :: [Char] -> [[Char]];
writeFile :: [Char] -> [Char] -> IO ();
zip :: {-# ARITY 0 #-} [a] -> [b] -> [(a, b)];
zip3 :: {-# ARITY 0 #-} [a] -> [b] -> [c] -> [(a, b, c)];
zipWith :: (a -> b -> c) -> [a] -> [b] -> [c];
zipWith3 :: (a -> b -> c -> d) -> [a] -> [b] -> [c] -> [d];
(||) :: Bool -> Bool -> Bool;
instance Bounded ();
instance (Bounded a, Bounded b) => Bounded (a, b);
instance (Bounded a, Bounded b, Bounded c) => Bounded (a, b, c);
instance (Bounded a, Bounded b, Bounded c, Bounded d) =>
	 Bounded (a, b, c, d);
instance (Bounded a, Bounded b, Bounded c, Bounded d, Bounded e) =>
	 Bounded (a, b, c, d, e);
instance (Bounded a, Bounded b, Bounded c, Bounded d, Bounded e,
	  Bounded f) =>
	 Bounded (a, b, c, d, e, f);
instance (Bounded a, Bounded b, Bounded c, Bounded d, Bounded e,
	  Bounded f, Bounded g) =>
	 Bounded (a, b, c, d, e, f, g);
instance Bounded Bool;
instance Bounded Char;
instance Enum ()
  {-# ARITY succ 1 pred 1 toEnum 1 fromEnum 1 enumFrom 1
	    enumFromThen 2 enumFromTo 2 enumFromThenTo 3 #-};
instance Enum Bool
  {-# ARITY succ 1 pred 1 toEnum 1 fromEnum 1 enumFrom 1
	    enumFromThen 2 #-};
instance Enum Char
  {-# ARITY succ 1 pred 1 enumFrom 1 enumFromThen 2 #-};
instance Eq () {-# ARITY (==) 2 #-};
instance (Eq a, Eq b) => Eq (a, b) {-# ARITY (==) 2 #-};
instance (Eq a, Eq b, Eq c) => Eq (a, b, c) {-# ARITY (==) 2 #-};
instance (Eq a, Eq b, Eq c, Eq d) => Eq (a, b, c, d)
  {-# ARITY (==) 2 #-};
instance (Eq a, Eq b, Eq c, Eq d, Eq e) => Eq (a, b, c, d, e)
  {-# ARITY (==) 2 #-};
instance (Eq a, Eq b, Eq c, Eq d, Eq e, Eq f) =>
	 Eq (a, b, c, d, e, f)
  {-# ARITY (==) 2 #-};
instance (Eq a, Eq b, Eq c, Eq d, Eq e, Eq f, Eq g) =>
	 Eq (a, b, c, d, e, f, g)
  {-# ARITY (==) 2 #-};
instance Eq Bool {-# ARITY (==) 2 #-};
instance Eq Char;
instance (Eq a, Eq b) => Eq (Either a b) {-# ARITY (==) 2 #-};
instance Eq a => Eq [a] {-# ARITY (==) 2 #-};
instance Enum Float
  {-# ARITY succ 1 pred 1 toEnum 1 fromEnum 1 enumFrom 1
	    enumFromThen 2 enumFromTo 2 enumFromThenTo 3 #-};
instance Eq Float;
instance Floating Float;
instance Fractional Float {-# ARITY fromRational 1 fromFloat 1 #-};
instance Functor [];
instance Functor IO {-# ARITY fmap 2 #-};
instance Bounded Int;
instance Enum Int
  {-# ARITY succ 1 pred 1 toEnum 1 fromEnum 1 enumFrom 1
	    enumFromThen 2 enumFromTo 2 enumFromThenTo 3 #-};
instance Eq Int;
instance Enum Integer
  {-# ARITY toEnum 1 fromEnum 1 enumFrom 1 enumFromThen 2
	    enumFromTo 2 enumFromThenTo 3 #-};
instance Eq Integer;
instance Integral Int {-# ARITY quotRem 2 divMod 2 toInt 1 #-};
instance Integral Integer {-# ARITY toInt 1 toInteger 1 #-};
instance Eq a => Eq (Maybe a) {-# ARITY (==) 2 #-};
instance Functor Maybe {-# ARITY fmap 2 #-};
instance Monad IO {-# ARITY fail 1 #-};
instance Monad Maybe {-# ARITY return 1 (>>=) 2 (>>) 2 fail 1 #-};
instance Monad [] {-# ARITY return 1 (>>=) 2 fail 1 #-};
instance Num Float {-# ARITY negate 1 abs 1 signum 1 #-};
instance Num Int {-# ARITY negate 1 abs 1 signum 1 fromInt 1 #-};
instance Num Integer {-# ARITY fromInt 1 fromInteger 1 #-};
instance Ord () {-# ARITY compare 2 #-};
instance (Ord a, Ord b) => Ord (a, b) {-# ARITY compare 2 #-};
instance (Ord a, Ord b, Ord c) => Ord (a, b, c)
  {-# ARITY compare 2 #-};
instance (Ord a, Ord b, Ord c, Ord d) => Ord (a, b, c, d)
  {-# ARITY compare 2 #-};
instance (Ord a, Ord b, Ord c, Ord d, Ord e) => Ord (a, b, c, d, e)
  {-# ARITY compare 2 #-};
instance (Ord a, Ord b, Ord c, Ord d, Ord e, Ord f) =>
	 Ord (a, b, c, d, e, f)
  {-# ARITY compare 2 #-};
instance (Ord a, Ord b, Ord c, Ord d, Ord e, Ord f, Ord g) =>
	 Ord (a, b, c, d, e, f, g)
  {-# ARITY compare 2 #-};
instance Ord Bool {-# ARITY compare 2 #-};
instance Ord Char;
instance (Ord a, Ord b) => Ord (Either a b)
  {-# ARITY compare 2 #-};
instance Ord Float {-# ARITY compare 2 #-};
instance Ord Int;
instance Ord Integer;
instance Ord a => Ord (Maybe a) {-# ARITY compare 2 #-};
instance Ord a => Ord [a] {-# ARITY compare 2 #-};
instance Bounded Ordering;
instance Enum Ordering
  {-# ARITY succ 1 pred 1 toEnum 1 fromEnum 1 enumFrom 1
	    enumFromThen 2 #-};
instance Eq Ordering {-# ARITY (==) 2 #-};
instance Ord Ordering {-# ARITY compare 2 #-};
instance Real Float;
instance Real Int {-# ARITY toRational 1 #-};
instance Real Integer {-# ARITY toRational 1 #-};
instance RealFloat Float {-# ARITY toFloat 1 #-};
instance RealFrac Float {-# ARITY properFraction 1 #-};
instance Show () {-# ARITY showsPrec 2 #-};
instance (Show a, Show b) => Show (a, b) {-# ARITY showsPrec 2 #-};
instance (Show a, Show b, Show c) => Show (a, b, c)
  {-# ARITY showsPrec 2 #-};
instance (Show a, Show b, Show c, Show d) => Show (a, b, c, d)
  {-# ARITY showsPrec 2 #-};
instance (Show a, Show b, Show c, Show d, Show e) =>
	 Show (a, b, c, d, e)
  {-# ARITY showsPrec 2 #-};
instance (Show a, Show b, Show c, Show d, Show e, Show f) =>
	 Show (a, b, c, d, e, f)
  {-# ARITY showsPrec 2 #-};
instance (Show a, Show b, Show c, Show d, Show e, Show f,
	  Show g) =>
	 Show (a, b, c, d, e, f, g)
  {-# ARITY showsPrec 2 #-};
instance Show Bool {-# ARITY showsPrec 2 #-};
instance Show Char {-# ARITY showsPrec 1 showList 1 #-};
instance (Show a, Show b) => Show (Either a b)
  {-# ARITY showsPrec 2 #-};
instance Show Float {-# ARITY showsPrec 2 #-};
instance Show Int {-# ARITY showsPrec 2 #-};
instance Show Integer {-# ARITY showsPrec 2 #-};
instance Show a => Show (Maybe a) {-# ARITY showsPrec 2 #-};
instance Show Ordering {-# ARITY showsPrec 2 #-};
instance Show a => Show [a] {-# ARITY showsPrec 1 #-};
instance Integral a => Enum (Ratio.Ratio a)
  {-# MODULE Ratio #-}
  {-# ARITY succ 1 pred 1 enumFrom 1 enumFromThen 2 enumFromTo 2
	    enumFromThenTo 3 #-};
instance Integral a => Eq (Ratio.Ratio a)
  {-# MODULE Ratio #-}
  {-# ARITY (==) 2 #-};
instance Integral a => Fractional (Ratio.Ratio a)
  {-# MODULE Ratio #-}
  {-# ARITY (/) 2 recip 1 fromRational 1 #-};
instance Integral a => Num (Ratio.Ratio a)
  {-# MODULE Ratio #-}
  {-# ARITY (+) 2 (-) 2 (*) 2 negate 1 abs 1 signum 1 fromInt 1
	    fromInteger 1 #-};
instance Integral a => Ord (Ratio.Ratio a)
  {-# MODULE Ratio #-}
  {-# ARITY compare 2 (<) 2 (<=) 2 (>=) 2 (>) 2 #-};
instance Integral a => Real (Ratio.Ratio a)
  {-# MODULE Ratio #-}
  {-# ARITY toRational 1 #-};
instance Integral a => RealFrac (Ratio.Ratio a)
  {-# MODULE Ratio #-}
  {-# ARITY properFraction 1 #-};
instance Integral a => Show (Ratio.Ratio a)
  {-# MODULE Ratio #-}
  {-# ARITY showsPrec 2 #-}
}
