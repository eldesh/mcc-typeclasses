interface Ratio where {
import Prelude;
infixl 7 %;
data Ratio a;
type Rational = Ratio Prelude.Integer;
(%) :: Prelude.Integral a => a -> a -> Ratio a;
approxRational :: Prelude.RealFrac a =>
		  a -> a -> Ratio Prelude.Integer;
denominator :: Prelude.Integral a => Ratio a -> a;
numerator :: Prelude.Integral a => Ratio a -> a;
instance Prelude.Integral a => Prelude.Enum (Ratio a);
instance Prelude.Integral a => Prelude.Eq (Ratio a);
instance Prelude.Integral a => Prelude.Fractional (Ratio a);
instance Prelude.Integral a => Prelude.Num (Ratio a);
instance Prelude.Integral a => Prelude.Ord (Ratio a);
instance Prelude.Integral a => Prelude.Real (Ratio a);
instance Prelude.Integral a => Prelude.RealFrac (Ratio a);
instance Prelude.Integral a => Prelude.Show (Ratio a);
{-# DATA Prelude.Integer #-};
{-# CLASS (Prelude.Enum a, Prelude.Real a) =>
	  Prelude.Integral a #-};
{-# CLASS (Prelude.Fractional a, Prelude.Real a) =>
	  Prelude.RealFrac a #-};
{-# CLASS Prelude.Enum a #-};
{-# CLASS Prelude.Eq a #-};
{-# CLASS Prelude.Num a => Prelude.Fractional a #-};
{-# CLASS (Prelude.Eq a, Prelude.Show a) => Prelude.Num a #-};
{-# CLASS Prelude.Eq a => Prelude.Ord a #-};
{-# CLASS (Prelude.Num a, Prelude.Ord a) => Prelude.Real a #-};
{-# CLASS Prelude.Show a #-};
instance Prelude.Integral Prelude.Int {-# MODULE Prelude #-};
instance Prelude.Integral Prelude.Integer {-# MODULE Prelude #-};
instance Prelude.RealFrac Prelude.Float {-# MODULE Prelude #-};
instance Prelude.Enum () {-# MODULE Prelude #-};
instance Prelude.Enum Prelude.Bool {-# MODULE Prelude #-};
instance Prelude.Enum Prelude.Char {-# MODULE Prelude #-};
instance Prelude.Enum Prelude.Float {-# MODULE Prelude #-};
instance Prelude.Enum Prelude.Int {-# MODULE Prelude #-};
instance Prelude.Enum Prelude.Integer {-# MODULE Prelude #-};
instance Prelude.Enum Prelude.Ordering {-# MODULE Prelude #-};
instance Prelude.Eq () {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b) =>
	 Prelude.Eq (a, b) {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b, Prelude.Eq c) =>
	 Prelude.Eq (a, b, c) {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b, Prelude.Eq c,
	  Prelude.Eq d) =>
	 Prelude.Eq (a, b, c, d) {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b, Prelude.Eq c, Prelude.Eq d,
	  Prelude.Eq e) =>
	 Prelude.Eq (a, b, c, d, e) {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b, Prelude.Eq c, Prelude.Eq d,
	  Prelude.Eq e, Prelude.Eq f) =>
	 Prelude.Eq (a, b, c, d, e, f) {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b, Prelude.Eq c, Prelude.Eq d,
	  Prelude.Eq e, Prelude.Eq f, Prelude.Eq g) =>
	 Prelude.Eq (a, b, c, d, e, f, g) {-# MODULE Prelude #-};
instance Prelude.Eq a => Prelude.Eq [a] {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Bool {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Char {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b) =>
	 Prelude.Eq (Prelude.Either a b) {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Float {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Int {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Integer {-# MODULE Prelude #-};
instance Prelude.Eq a =>
	 Prelude.Eq (Prelude.Maybe a) {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Ordering {-# MODULE Prelude #-};
instance Prelude.Fractional Prelude.Float {-# MODULE Prelude #-};
instance Prelude.Num Prelude.Float {-# MODULE Prelude #-};
instance Prelude.Num Prelude.Int {-# MODULE Prelude #-};
instance Prelude.Num Prelude.Integer {-# MODULE Prelude #-};
instance Prelude.Ord () {-# MODULE Prelude #-};
instance (Prelude.Ord a, Prelude.Ord b) =>
	 Prelude.Ord (a, b) {-# MODULE Prelude #-};
instance (Prelude.Ord a, Prelude.Ord b, Prelude.Ord c) =>
	 Prelude.Ord (a, b, c) {-# MODULE Prelude #-};
instance (Prelude.Ord a, Prelude.Ord b, Prelude.Ord c,
	  Prelude.Ord d) =>
	 Prelude.Ord (a, b, c, d) {-# MODULE Prelude #-};
instance (Prelude.Ord a, Prelude.Ord b, Prelude.Ord c,
	  Prelude.Ord d, Prelude.Ord e) =>
	 Prelude.Ord (a, b, c, d, e) {-# MODULE Prelude #-};
instance (Prelude.Ord a, Prelude.Ord b, Prelude.Ord c,
	  Prelude.Ord d, Prelude.Ord e, Prelude.Ord f) =>
	 Prelude.Ord (a, b, c, d, e, f) {-# MODULE Prelude #-};
instance (Prelude.Ord a, Prelude.Ord b, Prelude.Ord c,
	  Prelude.Ord d, Prelude.Ord e, Prelude.Ord f, Prelude.Ord g) =>
	 Prelude.Ord (a, b, c, d, e, f, g) {-# MODULE Prelude #-};
instance Prelude.Ord a => Prelude.Ord [a] {-# MODULE Prelude #-};
instance Prelude.Ord Prelude.Bool {-# MODULE Prelude #-};
instance Prelude.Ord Prelude.Char {-# MODULE Prelude #-};
instance (Prelude.Ord a, Prelude.Ord b) =>
	 Prelude.Ord (Prelude.Either a b) {-# MODULE Prelude #-};
instance Prelude.Ord Prelude.Float {-# MODULE Prelude #-};
instance Prelude.Ord Prelude.Int {-# MODULE Prelude #-};
instance Prelude.Ord Prelude.Integer {-# MODULE Prelude #-};
instance Prelude.Ord a =>
	 Prelude.Ord (Prelude.Maybe a) {-# MODULE Prelude #-};
instance Prelude.Ord Prelude.Ordering {-# MODULE Prelude #-};
instance Prelude.Real Prelude.Float {-# MODULE Prelude #-};
instance Prelude.Real Prelude.Int {-# MODULE Prelude #-};
instance Prelude.Real Prelude.Integer {-# MODULE Prelude #-};
instance Prelude.Show () {-# MODULE Prelude #-};
instance (Prelude.Show a, Prelude.Show b) =>
	 Prelude.Show (a, b) {-# MODULE Prelude #-};
instance (Prelude.Show a, Prelude.Show b, Prelude.Show c) =>
	 Prelude.Show (a, b, c) {-# MODULE Prelude #-};
instance (Prelude.Show a, Prelude.Show b, Prelude.Show c,
	  Prelude.Show d) =>
	 Prelude.Show (a, b, c, d) {-# MODULE Prelude #-};
instance (Prelude.Show a, Prelude.Show b, Prelude.Show c,
	  Prelude.Show d, Prelude.Show e) =>
	 Prelude.Show (a, b, c, d, e) {-# MODULE Prelude #-};
instance (Prelude.Show a, Prelude.Show b, Prelude.Show c,
	  Prelude.Show d, Prelude.Show e, Prelude.Show f) =>
	 Prelude.Show (a, b, c, d, e, f) {-# MODULE Prelude #-};
instance (Prelude.Show a, Prelude.Show b, Prelude.Show c,
	  Prelude.Show d, Prelude.Show e, Prelude.Show f, Prelude.Show g) =>
	 Prelude.Show (a, b, c, d, e, f, g) {-# MODULE Prelude #-};
instance Prelude.Show a => Prelude.Show [a] {-# MODULE Prelude #-};
instance Prelude.Show Prelude.Bool {-# MODULE Prelude #-};
instance Prelude.Show Prelude.Char {-# MODULE Prelude #-};
instance (Prelude.Show a, Prelude.Show b) =>
	 Prelude.Show (Prelude.Either a b) {-# MODULE Prelude #-};
instance Prelude.Show Prelude.Float {-# MODULE Prelude #-};
instance Prelude.Show Prelude.Int {-# MODULE Prelude #-};
instance Prelude.Show Prelude.Integer {-# MODULE Prelude #-};
instance Prelude.Show a =>
	 Prelude.Show (Prelude.Maybe a) {-# MODULE Prelude #-};
instance Prelude.Show Prelude.Ordering {-# MODULE Prelude #-};
instance Prelude.Show Prelude.Success {-# MODULE Prelude #-};
{-# DATA Prelude.Int #-};
{-# DATA Prelude.Float #-};
{-# DATA Prelude.Bool #-};
{-# DATA Prelude.Char #-};
{-# DATA Prelude.Ordering #-};
{-# DATA Prelude.Either a b #-};
{-# DATA Prelude.Maybe a #-};
{-# DATA Prelude.Success #-}
}
