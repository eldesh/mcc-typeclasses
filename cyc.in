#! /bin/sh
# @configure_input@
#
# Shell script for compiling Curry modules
#
# $Id: cyc.in 3210 2016-06-15 21:33:18Z wlux $
#
# Copyright (c) 2002-2013, Wolfgang Lux
# See LICENSE for the full license.
#

# Configuration parameters
cyc=`basename "$0"`
version=@PACKAGE_VERSION@
build="%BUILD_DATE%"
prefix=@prefix@
exec_prefix=@exec_prefix@
bindir=@bindir@
libdir=@libdir@
# DO NOT DELETE: Beginning of in-place configuration
srcdir="@srcdir@"
@in_place_config@
# DO NOT DELETE: End of in-place configuration
: ${CURRY_PATH=$libdir/curry-$version}
: ${CURRY_IMPORT_PATH=$CURRY_PATH}
: ${CURRY_INCLUDE_PATH=$CURRY_PATH}
: ${CURRY_LIBRARY_PATH=$CURRY_PATH}
export CURRY_IMPORT_PATH

# Local variables
echo=:
exec=
verbose=
toC=
toS=
toO=
cycc=$CURRY_PATH/cycc
cyccopts=
rtopts=
debug=
cc="@CC@"
ccopts=
ldopts=
hsize=
ssize=
tsize=
pfail=
stats=
trace=
saveTemps=
libs=
dbglib=
files=
temps=
linkfiles=
imports=
modules=
goal=
typeIt=
ofile=

# functions
check_size ( ) {
    eval _x=\$"$2"
    case $_x in
      "" ) echo 1>&2 "$cyc: missing size after $1"; exit 1;;
      *[kK] ) _y=`expr "$_x" : '\([0-9]*\)[kK]$'`"*1024";;
      *[mM] ) _y=`expr "$_x" : '\([0-9]*\)[mM]$'`"*1024*1024";;
      * ) _y=`expr "$_x" : '\([0-9]*\)$'`;;
    esac
    case $_y in
      [0-9]* ) eval $2=$_y;;
      * ) echo 1>&2 "$cyc: illegal size after $1: $_x"; exit 1;;
    esac
}

incr ( ) {
    eval _x=\$"$1"; test -n "$_x" || _x=0
    _y="$2"; test -n "$_y" || _y=1
    eval $1=`expr "$_x" + "$_y"`
}

quote ( ) {
    case $1 in
      *\'* )
	sed "s/'/'\\\\''/g;1s/^/'/;\$s/$/'/" <<EOF
$1
EOF
	;;
      * ) printf "'%s'" "$1";;
    esac
}

# Option processing
while test $# -gt 0; do
  case $1 in
    # Overall options
    -c ) toO=1;;
    -C ) toC=1;;
    -S ) toS=1;;
    -o ) ofile=$2; shift;;
    -o* ) ofile=`expr X"$1" : X'-o\(.*\)'`;;
    -n ) exec=echo;;
    -v ) verbose=-v; ccopts="$ccopts -v";;
    -q ) ;; # option ignored for compatibility with cymake

    # (C-)Preprocessor definitions
    -[DU] ) ccopts="$ccopts $1 "`quote "$2"`; shift;;
    -[DU]* ) ccopts="$ccopts "`quote "$1"`;;

    # Special definitions
    -gg ) debug=-g;;
    -gc-2space | --gc-2space )
	echo 1>&2 "$cyc: deprecated option $1"
	echo 1>&2 "the two-space copying collector is the default"
	;;
    -gc-compact | --gc-compact )
	echo 1>&2 "$cyc: deprecated option $1"
	echo 1>&2 "the compacting collector is no longer available"
	;;
    -save-temps ) saveTemps=$1;;

    # cycc options
    -no-intf | --no-intf | -no-icurry | --no-icurry )
	cyccopts="$cyccopts --no-icurry";;
    -Whaskell ) cyccopts="$cyccopts --haskell-mode";;
    -Wprolog ) cyccopts="$cyccopts --prolog-mode";;
    -Wgoedel ) cyccopts="$cyccopts --goedel-mode";;
    -W?* ) cyccopts=$cyccopts\ --warn-`expr X"$1" : X'-W\(.*\)'`;;
    -warn* ) cyccopts="$cyccopts -$1";;
    --warn* ) cyccopts="$cyccopts $1";;
    -dump* ) cyccopts="$cyccopts -$1";;
    --dump* ) cyccopts="$cyccopts $1";;
    -g | -debug | --debug ) cyccopts="$cyccopts --debug"; dbglib=-lcurry_g;;
    -trusted | --trusted ) cyccopts="$cyccopts --trusted";;

    # goal options
    -M ) modules="$modules "`quote "$2"`; shift;;
    -M* ) arg=`expr X"$1" : X'-M\(.*\)'`; modules="$modules "`quote "$arg"`;;
    -e ) goal=$2; shift;;
    -e* ) goal=`expr X"$1" : X'-e\(.*\)'`;;
    -T ) typeIt=$2; shift;;
    -T* ) typeIt=`expr X"$1" : X'-T\(.*\)'`;;

    # C Compiler options
    -cc ) cc=`quote "$2"`; shift;;
    -ccopt-* | --ccopt-* )
      arg=`expr X"$1" : X'-*ccopt\(-.*\)'`; ccopts="$ccopts "`quote "$arg"`;;
    -ccopt | --ccopt ) ccopts="$ccopts "`quote "$2"`; shift;;
    -ccopts-* | --ccopts-* )
      ifs=$IFS; IFS=,
      for arg in `expr X"$1" : X'-*ccopts*\(-.*\)'`; do
	ccopts="$ccopts "`quote "$arg"`
      done
      IFS=$ifs;;
    -ccopts | --ccopts )
      ifs=$IFS; IFS=,
      for arg in $2; do ccopts="$ccopts "`quote "$arg"`; done
      IFS=$ifs; shift;;
    -arch ) ccopts="$ccopts $1 "`quote "$2"`; shift;;
    -O* ) ccopts="$ccopts "`quote "$1"`;;

    # Include files and imported modules
    -I ) ccopts="$ccopts -I"`quote "$2"`; shift;;
    -I* ) ccopts="$ccopts "`quote "$1"`;;
    -i )
      arg=`quote "$2"`; shift
      ccopts="$ccopts -I$arg"; imports="$imports -i $arg";;
    -i* )
      arg=`expr X"$1" : X'-i\(.*\)'`; arg=`quote "$arg"`
      ccopts=$ccopts\ -I$arg; imports="$imports -i$arg";;
    -P )
      arg=`quote "$2"`; shift
      ccopts="$ccopts -I$arg"; @LD_R@ldopts="$ldopts -R$arg"
      ldopts="$ldopts -L$arg"; imports="$imports -i $arg";;
    -P* )
      arg=`expr X"$1" : X'-P\(.*\)'`; arg=`quote "$arg"`
      ccopts="$ccopts -I$arg"; @LD_R@ldopts="$ldopts -R$arg"
      ldopts="$ldopts -L$arg"; imports="$imports -i $arg";;
    -F ) ccopts="$ccopts -F"`quote "$2"`; shift;;
    -F* ) ccopts="$ccopts "`quote "$1"`;;

    # Linker options
    -ldopt-* | --ldopt-* )
      opt=`expr X"$1" : X'-*ldopt\(-.*\)'`
      ldopts="$ldopts "`quote "$opt"`;;
    -ldopt | --ldopt ) ldopts="$ldopts "`quote "$2"`; shift;;
    -ldopts-* | --ldopts-* )
      ifs=$IFS; IFS=,
      for opt in `expr X"$1" : X'-*ldopts*\(-.*\)'`; do
	ldopts="$ldopts "`quote "$opt"`
      done
      IFS=$ifs;;
    -ldopts | --ldopts )
      ifs=$IFS; IFS=,
      for opt in $2; do ccopts="$ccopts "`quote "$opt"`; done
      IFS=$ifs; shift;;
    -[LR] ) ldopts="$ldopts $1"`quote "$2"`; shift;;
    -[LR]* ) ldopts="$ldopts "`quote "$1"`;;
    -l ) libs="$libs -l"`quote "$2"`; shift;;
    -l* ) libs="$libs "`quote "$1"`;;
    -framework ) ldopts="$ldopts $1 "`quote "$2"`; shift;;

    # Runtime system options for cycc
    -H* ) rtopts="$rtopts "`quote "$1"`;;
    +RTS )
	shift
	while test $# -gt 0 && test "$1" != "-RTS"; do
	  rtopts="$rtopts "`quote "$1"`;
	  shift
	done;;

    # Default values for the executable
    -d ) incr trace 1;;
    -f ) incr pfail 1;;
    -p ) incr stats 1;;
    -h ) hsize=$2; shift; check_size -h hsize;;
    -h* ) hsize=`expr X"$1" : X'-h\(.*\)'`; check_size -h hsize;;
    -k ) ssize=$2; shift; check_size -k ssize;;
    -k* ) ssize=`expr X"$1" : X'-k\(.*\)'`; check_size -k ssize;;
    -t ) tsize=$2; shift; check_size -t tsize;;
    -t* ) tsize=`expr X"$1" : X'-t\(.*\)'`; check_size -t tsize;;

    # Pass all other flags to the C compiler
    -* ) ccopts="$ccopts "`quote "$1"`;;

    # Save all files
    * ) files="$files "`quote "$1"`;;
  esac
  shift
done

# Add runtime options to cycc
cycc=`quote "$cycc"`
test -n "$rtopts" && cycc="$cycc +RTS $rtopts -RTS"

# Eventually display the compiler version
if test -n "$verbose"; then
  echo 1>&2 "$cyc version $version (built on $build)"
  test "$exec" || echo='echo 1>&2'
fi
# Check for conflicting options
if test -n "$goal" && test -n "$typeIt"; then
  echo 1>&2 "$cyc: conflicting options -e and -T specified"
  exit 1
fi

# Check for input files
if test -z "$files$goal$typeIt"; then
  test -n "$verbose" && exit 0
  echo 1>&2 "$cyc: no input files"
  exit 1
fi

# Add all default include directories to the C compiler's flags
ifs=$IFS
IFS=:
for d in $CURRY_INCLUDE_PATH; do
  ccopts="$ccopts -I"`quote "$d"`
done
for d in $CURRY_LIBRARY_PATH; do
  @LD_R@ldopts="$ldopts -R"`quote "$d"`
  ldopts="$ldopts -L"`quote "$d"`
done
IFS=$ifs

# Add configuration options
ccopts="$ccopts @CPPFLAGS@ @CURRY_CFLAGS@"
ldopts="$ldopts @LDFLAGS@"

# Cygpath workaround: converts path to Windows-style
if test -n "@CYGPATH@"; then
  CURRY_IMPORT_PATH=`@CYGPATH@ -w -p $CURRY_IMPORT_PATH`
fi

# Remove all temporary files upon exit
# NB check for empty temps for non POSIX compliant rm's (e.g. Mac OS X 10.1)
trap 'rc=$?; test "$temps" && rm -f $temps; exit $rc' 0 1 2 3 15

# Process all files
eval set dummy "$files"; shift
if test -n "$ofile" && test -n "$toC$toS$toO" && test $# -gt 1; then
  echo 1>&2 "$cyc: cannot specify -o with -c, -S, or -C and multiple input files"
  exit 1
fi

i=0
for f in "$@"; do
  i=`expr $i + 1`
  stem=
  curry_ccopts=

  # Compile Curry source files into C code
  case $f in
    *.curry | *.lcurry )
      dir=`dirname "$f"`
      curry_ccopts=-I`quote "$dir"`
      modules="$modules "`quote "$f"`
      stem=`expr "$f" : '\(.*\)\.curry'`
      stem=$stem`expr "$f" : '\(.*\)\.lcurry'`
      if test -n "$toC"; then
        if test -n "$ofile"; then
	  target=$ofile
	else
	  target=$stem.c
	fi
      else
        if test -n "$debug$saveTemps"; then
	  target=$stem.c
	else
          target=/tmp/cyc$$_$i.c
	  temps="$temps $target"
	fi
      fi
      # Cygpath workaround: converts paths to Windows-style
      if test -n "@CYGPATH@"; then
        target2=`@CYGPATH@ -w $target`
        f2=`@CYGPATH@ -w $f`
       else 
        target2=$target
        f2=$f
      fi
      target2=`quote "$target2"`
      f2=`quote "$f2"`
      eval $echo "$cycc" "$imports" "$cyccopts" -o "$target2" "$f2"
      eval $exec "$cycc" "$imports" "$cyccopts" -o "$target2" "$f2" || exit $?
      f=$target
      ;;
  esac
  test -n "$toC" && continue

  # Compile C/assembler code into assembler code or object files
  case $f in
    *.[cs] )
      test -n "$stem" || stem=`expr "$f" : '\(.*\)\.[cs]'`
      if test -n "$toS"; then c=-S suffix=.s; else c=-c suffix=.o; fi
      if test -n "$toS$toO"; then
        if test -n "$ofile"; then
	  target=$ofile
	else
	  target=$stem$suffix
	fi
      else
        if test -n "$saveTemps"; then
	  target=$stem.o
	else
          target=/tmp/cyc$$_$i.o
	  temps="$temps $target"
	fi
      fi
      target2=`quote "$target"`
      f2=`quote "$f"`
      eval $echo "$cc" $debug "$curry_ccopts" "$ccopts" $saveTemps $c -o "$target2" "$f2"
      eval $exec "$cc" $debug "$curry_ccopts" "$ccopts" $saveTemps $c -o "$target2" "$f2" || exit $?
      f=$target
      ;;
  esac
  test -n "$toS$toO" && continue

  # Add all files for the link step
  linkfiles="$linkfiles "`quote "$f"`
done

# Eventually link the program or compute the goal's type
if test -n "$typeIt"; then
  if test -n "$ofile"; then
    # Cygpath workaround: converts path to Windows-style
    if test -n "@CYGPATH@"; then
      ofile2=`@CYGPATH@ -w $ofile`
    else
      ofile2=$ofile
    fi
    target="-o "`quote "$ofile2"`
  else
    target=
  fi
  typeIt2=`quote "$typeIt"`
  eval $echo "$cycc" "$imports" "$cyccopts" -t"\\\"$typeIt2\\\"" "$modules" "$target" || exit $?
  eval $exec "$cycc" "$imports" "$cyccopts" -t"$typeIt2" "$modules" "$target" || exit $? || exit $?
elif test -z "$toC$toS$toO"; then
  target=/tmp/cyc$$.c
  test -n "$debug$saveTemps" || temps="$temps $target"
  # Cygpath workaround: converts path to Windows-style
  if test -n "@CYGPATH@"; then
    target2=`@CYGPATH@ -w $target`
  else
    target2=$target
  fi
  goal=`quote "$goal"`
  target2=`quote "$target2"`
  eval $echo "$cycc" "$imports" "$cyccopts" -e"\\\"$goal\\\"" "$modules" -o "$target2"
  eval $exec "$cycc" "$imports" "$cyccopts" -e"$goal" "$modules" -o "$target2" || exit $?

  test -n "$hsize" && ldopts="$ldopts -DDEFAULT_HEAPSIZE=$hsize"
  test -n "$ssize" && ldopts="$ldopts -DDEFAULT_STACKSIZE=$ssize"
  test -n "$tsize" && ldopts="$ldopts -DDEFAULT_TRAILSIZE=$tsize"
  test -n "$pfail" && ldopts="$ldopts -DDEFAULT_PRINT_FAIL=$pfail"
  test -n "$stats" && ldopts="$ldopts -DDEFAULT_SHOW_STATS=$stats"
  test -n "$trace" && ldopts="$ldopts -DDEFAULT_DO_TRACE=$trace"
  test -n "$ofile" && ldopts="$ldopts -o "`quote "$ofile"`
  eval $echo "$cc" $debug "$ccopts" "$ldopts" /tmp/cyc$$.c "$linkfiles" "$libs" $dbglib -lcurry @LIBS@
  eval $exec "$cc" $debug "$ccopts" "$ldopts" /tmp/cyc$$.c "$linkfiles" "$libs" $dbglib -lcurry @LIBS@ || exit $?
fi

# done
exit 0
