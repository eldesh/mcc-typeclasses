#! @CYI_SHELL@
# @configure_input@
#
# A poor (wo)man's interactive top-level for Curry
#
# $Id: cyi.in 3029 2011-06-20 08:00:10Z wlux $
#
# Copyright (c) 2002-2011, Wolfgang Lux
# See LICENSE for the full license.
#

if test -n "${ZSH_VERSION+set}"; then
  emulate ksh
fi

# Configuration parameters
cyi=`basename $0`
version=@PACKAGE_VERSION@
prefix=@prefix@
exec_prefix=@exec_prefix@
bindir=@bindir@
libdir=@libdir@
# DO NOT DELETE: Beginning of in-place configuration
srcdir="@srcdir@"
@in_place_config@
# DO NOT DELETE: End of in-place configuration
: ${CYC=$bindir/cyc-$version}
: ${CYMAKE=$bindir/cymake-$version}
: ${CURRY_PATH=$libdir/curry-$version}
: ${CURRY_IMPORT_PATH=$CURRY_PATH}
export CURRY_PATH CURRY_IMPORT_PATH

echo "    _____ __ __"
echo "   / ___/ |  / _               Muenster Curry Compiler"
echo "  / /     | / | |              Version $version, Copyright (c) 1998-2007"
echo " / /___  / /  | |"
echo " \____/ /_/   |_|              Type :h for help"
echo 

cyc=$CYC
cymake=$CYMAKE
pager=${PAGER-/bin/cat}
editor=${VISUAL-${EDITOR-/usr/bin/vi}}
srcdir=
source=
target=
cyopts=
interfaces=
module=
command=
dcommand=
prompt='> '
goal=

# NB On some systems (e.g., Mac OS X 10.5) bash turns on SYSV echo style
#    by default when it is run as /bin/sh. The following command turns this
#    off by unsetting the respective shell option if it is available.
( shopt -u xpg_echo ) 2>/dev/null && shopt -u xpg_echo
case `echo "echo\c"` in
  echo ) echo_c='\c';;		# SYSV style
  *    ) echo_c= ;;
esac
case `echo -n "echo"` in
  echo ) echo_n=-n;;		# BSD style
  *    ) echo_n= ;;
esac

backslash_warning ( ) {
cat <<\EOF 2>&1
Warning: Backslashes on the command line must be escaped
  For instance, use \\x -> x for a lambda abstraction
  and '\\n' for the linefeed character.
EOF
}

read_test ( ) {
  input='foo\nbar'
  read $1 line <<EOF
$input
EOF
  test "$input" = "$line"
}

# Some shells (e.g. Solaris /bin/sh, AIX /bin/bsh) terminate immediately
# if read -r is used; therefore perform the check whether read -r works
# in a subshell.

if read_test; then
  rawread=yes
  read_r=
elif ( read_test -r ) 2>/dev/null; then
  rawread=yes
  read_r=-r
else
  rawread=no
  read_r=
  backslash_warning
fi

help ( ) {
  echo "Commands"
  echo "  GOAL                  evaluate GOAL"
  echo "  :^[GOAL]              evaluate (previous) GOAL"
  echo "  :d[ebug] [GOAL]       debug (previous) GOAL"
  echo "  :t[ype] [GOAL]        print type of (previous) GOAL"
  echo "  :l[oad] MODULE        load (and compile) MODULE"
  echo "  :l[oad]               unload current module"
  echo "  :r[eload]             repeat last :load command"
  echo "  :f[reshen]            recompile current module"
  echo "  :clean                remove compiled files for current module"
  echo "  :i[nterface] MODULE   show interface of MODULE"
  echo "  :i[nterface]          show interface of current module"
  echo "  :e[dit] FILE          edit FILE"
  echo "  :e[dit]               edit current module"
  echo "  :s[et] OPTION...      add OPTIONs to current compiler options"
  echo "  :u[nset] WORD...      remove WORDs from compiler options"
  echo "  :cd DIR           	change current directory"
  echo "  :cd           	show current directory"
  echo "  :!COMMAND          	execute shell COMMAND"
  echo "  :v[ersion]            print the compiler version"
  echo "  :q[uit]               quit"
  echo
  echo "Valid GOALs (all variables must be declared)"
  echo "  EXPR                  expression"
  echo "  EXPR where DECLS      expression with additional declarations"
  echo
  test $rawread = yes || backslash_warning
}

quote ( ) {
  case $1 in
    *\'* ) echo "$1" | sed "s/'/'\\\\''/g;s/^/'/;s/$/'/";;
    * ) echo "'$1'";;
  esac
}

compile_source ( ) {
  test -z "$source" || (cd "$srcdir" && "$cymake" $* $cyopts "$source")
}

compile_target ( ) {
  if test -n "$target"; then
    (cd "$srcdir" && "$cymake" -q $cyopts "$@" "$target")
  else
    (cd "${srcdir:-.}" && "$cymake" -q $cyopts $interfaces "$@")
  fi
}

find_module ( ) {
  "$cymake" --find $cyopts "$1" | sed 's/^.*: //'
}

set_goal ( ) {
  set dummy "$1" $1; shift
  case $# in
    1 )
      if test -z "$goal"; then
        echo "No goal"
	return 1
      fi
      ;;
    * ) goal=$1; qgoal=`quote "$goal"`;;
  esac
}

set_module ( ) {
    case $1 in
      *.curry ) stem=`expr "$1" : '\(.*\).curry'`;;
      *.lcurry ) stem=`expr "$1" : '\(.*\).lcurry'`;;
      *.icurry ) stem=`expr "$1" : '\(.*\)'.icurry`;;
      *.o ) stem=`expr "$1" : '\(.*\)'.o`;;
      * ) stem=$1;;
    esac
    read line < $stem.icurry
    set $line
    module=$2
    prompt="$module> "
}

load ( ) {
  eval set dummy "$1"; shift
  case $# in
    0 )
      srcdir=
      source=
      target=
      module=Prelude
      interfaces=
      command=
      dcommand=
      prompt="$module> "
      ;;
    1 )
      m=`find_module "$1"`
      case $m in
        "" ) echo "missing source file for $1";;
	*.curry | *.lcurry )
	    if test -f "$m"; then
              srcdir=`pwd`
	      source=$m
	      interfaces=
	      case $m in
		*.curry ) target=`expr "$m" : '\(.*\)\.curry'`;;
		*.lcurry ) target=`expr "$m" : '\(.*\)\.lcurry'`;;
	      esac
	      command=
	      dcommand=
            else
	      echo "source file $m does not exist"
	    fi
	    reload;;
	*.icurry )
	    srcdir=`pwd`
	    source=
	    interfaces=-M$m
	    target=
	    command=
	    dcommand=
	    set_module "$m";;
	* )
	  echo >&2 "$cyi: internal error: unexpected result from cymake --find"
	  return;;
      esac;;
    * ) echo "too many files";;
  esac
}

reload ( ) {
  if test -n "$source"; then
    compile_source || return
    set_module "$source"
    command=
    dcommand=
    # NB The -e _ option is necessary to force cymake into generating a link
    #    command for the target, which includes -M options that bring the
    #    entities of all imported interfaces into scope within the goal. The
    #    goal expression itself is irrelevant here but must be a non-empty
    #    string.
    eval set dummy "`compile_target -e _ -### | tail -1`"; shift
    while test $# -gt 0; do
      case $1 in
	-o | -e ) shift;;
	* ) command="$command "`quote "$1"`
      esac
      shift
    done
  fi
}

clean ( ) {
  compile_source -q --clean
}

interface ( ) {
  eval set dummy "$1"; shift
  case $# in
    0 ) d=${srcdir:-.}; if test -n "$source"; then m=$source; else m=$module; fi;;
    1 ) d=. m=$1;;
    * ) echo "too many modules"; return;;
  esac
  i=`cd "$d" && find_module "$m"`
  case $i in
    "" ) ;;
    *.curry ) i=`expr "$i" : '\(.*\).curry'`.icurry;;
    *.lcurry ) i=`expr "$i" : '\(.*\).lcurry'`.icurry;;
    *.icurry ) ;;
    * )
      echo >&2 "$cyi: internal error: unexpected result from cymake --find"
      return;;
  esac
  if test -n "$i" && (cd "$d" && test -f "$i"); then
    (cd "$d"; $pager "$i")
  else
    echo "Interface of module $m not found";
    return 1
  fi
}

edit ( ) {
  eval set dummy "$1"; shift
  case $# in
    0 ) test -n "$source" || { echo "no source file"; return; }
	(cd "$srcdir" && $editor "$source");;
    1 ) $editor "$1";;
    * ) echo "too many files";;
  esac
}

trap 'rc=$?; rm -f /tmp/cyi$$@EXEEXT@; exit $rc' 0 1 15
trap 'rm -f /tmp/cyi$$@EXEEXT@' 2 3
evaluate ( ) {
  set_goal "$1" || return
  eval "${command:-compile_target}" -e "$qgoal" -o /tmp/cyi$$ && /tmp/cyi$$
  rm -f /tmp/cyi$$@EXEEXT@
}

debug ( ) {
  set_goal "$1" || return
  if test -n "$source"; then
    if test -z "$dcommand"; then
      echo "Preparing $source for debugging; this may take some time..."
      compile_source --debug || return
      eval set dummy "`compile_target -a --debug -### | tail -1`"; shift
      while test $# -gt 0; do
	case $1 in
	  -o ) shift;;
	  * ) dcommand="$dcommand "`quote "$1"`
	esac
	shift
      done
    fi
  fi
  eval "${dcommand:-compile_target --debug}" -e "$qgoal" -o /tmp/cyi$$ && /tmp/cyi$$
  rm -f /tmp/cyi$$@EXEEXT@
}

type_goal ( ) {
  set_goal "$1" || return
  eval "${command:-compile_target}" -T "$qgoal"
}

show_options ( ) {
  echo "Current settings:"
  echo "$cyopts"
}

set_options ( ) {
  if test $# -eq 0; then
    show_options
  else
    cyopts="$cyopts $*"
    if test -t 0; then show_options; fi
  fi
}

unset_options ( ) {
  for opt in $*; do
    set dummy $cyopts; shift
    cyopts=
    while test $# -gt 0; do
      if test "X$1" = "X$opt"; then shift; cyopts="$cyopts $*"; break; fi
      cyopts="$cyopts $1"
      shift
    done
  done
  if test -t 0; then show_options; fi
}

chdir ( ) {
  set dummy "$1" $1; shift
  case $# in
    1 ) pwd;;
    * )
     # First check whether we can change to the new directory in a subshell.
     # This is a workaround for some brain-dead old Bourne shells that
     # exit immediately when an internal command like cd fails.
     ( eval cd "$1" ) && eval cd "$1";;
  esac
}

system ( ) {
  set dummy "$1" $1; shift
  case $# in
    1 ) ${SHELL-/bin/sh};;
    * ) /bin/sh -c "$1";;
  esac
}

while test $# -gt 0; do
  case $1 in
    -[ilDILU] ) cyopts="$cyopts $1 $2"; shift;;
    -[ilDILOU]* ) cyopts="$cyopts $1";;
    -* ) echo "$cyi: unknown option $1"; exit 1;;
    * ) break;;
  esac
  shift
done

if test -t 0; then
  if test -n "${BASH_VERSION+set}"; then
    do_read ( ) {
      history -n ~/.cyi_history
      read -e -p "$prompt" -r $1 || return $?
      eval echo \"\$$1\" >> ~/.cyi_history
    }
  elif test -n "${ZSH_VERSION+set}"; then
    zmodload zsh/zle
    do_read (  ) {
      eval $1=
      vared -p"$prompt" $1
    }
  elif test -n "${RANDOM+set}"; then
    # assume Korn Shell
    HISTFILE=~/.cyi_history
    set -o emacs
    do_read ( ) {
      read -s -r $1?"$prompt"
    }
  else
    do_read ( ) {
      echo $echo_n "$prompt$echo_c"
      read $read_r $1
    }
  fi
else
  do_read ( ) {
    read $read_r $1
  }
fi

quit ( ) {
    echo "[Leaving $cyi]"
    exit 0
}

interpret ( ) {
  line=$1
  set dummy $line; shift
  case $1 in
    "" ) ;;
    :h | :help ) help;;
    :l | :load ) line=`expr "$line" : $1'\([^;]*\)'`; load "$line";;
    :r | :reload ) reload;;
    :f | :freshen ) clean && reload;;
    :clean ) clean;;
    :i | :interface ) line=`expr "$line" : $1'\([^;]*\)'`; interface "$line";;
    :e | :edit ) line=`expr "$line" : $1'\([^;]*\)'`; edit "$line";;
    :t ) line=`expr "$line" : ':t\(.*\)'`; type_goal "  $line";;
    :type ) line=`expr "$line" : ':type\(.*\)'`; type_goal "     $line";;
    :s | :set ) shift; set_options $*;;
    :u | :un | :unset ) shift; unset_options $*;;
    :cd ) line=`expr "$line" : $1'\([^;]*\)'`; chdir "$line";;
    :!* ) line=`expr "$line" : ':![ 	]*\(.*\)'`; system "$line";;
    :v | :version ) "$cyc" -v;;
    :q | :quit ) quit;;
    :d ) line=`expr "$line" : ':d\(.*\)'`; debug "  $line";;
    :debug ) line=`expr "$line" : ':debug\(.*\)'`; debug "      $line";;
    ':^'* ) line=`expr "$line" : ':^\(.*\)'`; evaluate "  $line";;
    :* ) echo "unknown command, use :h for help";;
    * ) evaluate "$line";;
  esac
}

if test -r .cyirc; then
  while read line; do interpret "$line"; done < .cyirc
elif test -r "$HOME"/.cyirc; then
  while read line; do interpret "$line"; done < "$HOME"/.cyirc
fi

load "$1"

while do_read line; do
  interpret "$line"
done
quit
