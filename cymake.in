#! /bin/sh
# @configure_input@
#
# Shell script for building Curry programs
#
# $Id: cymake.in 3215 2016-06-15 21:48:35Z wlux $
#
# Copyright (c) 2002-2015, Wolfgang Lux
# See LICENSE for the full license.
#


# Configuration parameters
cymake=`basename $0`
version=@PACKAGE_VERSION@
build="%BUILD_DATE%"
prefix=@prefix@
exec_prefix=@exec_prefix@
bindir=@bindir@
libdir=@libdir@
# DO NOT DELETE: Beginning of in-place configuration
srcdir="@srcdir@"
@in_place_config@
# DO NOT DELETE: End of in-place configuration
: ${CYC=$bindir/cyc-$version}
: ${CURRY_PATH=$libdir/curry-$version}
: ${CURRY_IMPORT_PATH=$CURRY_PATH}
export CYC CURRY_PATH CURRY_IMPORT_PATH

# Local variables
echo=echo
exec=
verbose=
cyc=$CYC
cymk=$CURRY_PATH/cymk
newer=$CURRY_PATH/newer
progress=${CURRY_CYMAKE_PROGRESS-:}
mkopts=
cyopts=
ldopts=
linkAlways=
goal=
typeIt=
output=
clean=
find=
depend=
imports=
libs=
files=
temps=

# Functions
quote1 ( ) {
  case $1 in
    *\'* )
      sed "s/'/'\\\\''/g;1s/^/'/;\$s/$/'/" <<EOF
$1
EOF
      ;;
    * ) printf "'%s'" "$1";;
  esac
}

quote ( ) {
  res=
  for arg in "$@"; do
    case $arg in
      *\'* ) res="$res${res:+ }"`quote1 "$arg"`;;
      * ) res="$res${res:+ }'$arg'";;
    esac
  done
  echo "$res"
}

check_source ( ) {
  stem=`expr "$1" : '\(.*\)'$2`
  for suffix in $3; do
    if test -f "$stem$suffix"; then return 0; fi
  done
  echo 1>&2 "$cymake: missing source file for $1"
  return 1
}

remove ( ) {
  case $f in	## Dirty trick to remove the correct executable with -o FILENAME
    *.curry | *.lcurry | *.o ) target=;;
    * ) target=$f;;
  esac
  for f in "$@"; do
    if test "$target" = "$f" && test -n "$output"; then f=$output; fi
    if test -f "$f"; then
      $echo rm -f "$f"
      $exec rm -f "$f"
    fi
  done
}

compile ( ) {
  i=$1 n=$2 source=$3 interf=$4 object=$5; shift 5
  if test -f "$interf" && "$newer" "$object" "$source" "$@"; then
    $progress $i $n skipping "$source"
  else
    $progress $i $n compiling "$source"
    source=`quote1 "$source"` object=`quote1 "$object"`
    eval $echo "$cyc" "$cyopts" -c "$source" -o "$object"
    eval $exec "$cyc" "$cyopts" -c "$source" -o "$object" || exit $?
  fi
}

link ( ) {
  if test -n "$output"; then target=$output; else target=$3; fi;
  i=$1 n=$2; shift 3; objs=`quote "$@"`
  if test -n "$goal"; then
    $progress $i $n linking "$target"
    goal=`quote1 "$goal"` target=`quote1 "$target"`
    eval $echo "$cyc" "$cyopts" "$ldopts" -e "\\\"$goal\\\"" -o "$target" "$objs" "$libs"
    eval $exec "$cyc" "$cyopts" "$ldopts" -e "$goal" -o "$target" "$objs" "$libs" || exit $?
  elif test -n "$typeIt"; then
    $progress $i $n linking ""
    if test -n "$output"; then objs="-o "`quote1 "$output"`" $objs"; shift; fi
    typeIt=`quote1 "$typeIt"`
    eval $echo "$cyc" "$cyopts" -T "\\\"$typeIt\\\"" "$objs"
    eval $exec "$cyc" "$cyopts" -T "$typeIt" "$objs" || exit $?
  elif test -z "$linkAlways" && "$newer" "$target" "$@"; then
    $progress $i $n skipping ""
  else
    $progress $i $n linking "$target"
    target=`quote1 "$target"`
    eval $echo "$cyc" "$cyopts" "$ldopts" -o "$target" "$objs" "$libs"
    eval $exec "$cyc" "$cyopts" "$ldopts" -o "$target" "$objs" "$libs" || exit $?
  fi
}

# Option processing
while test $# -gt 0; do
  case $1 in
    # Overall options
    -M | --depend ) depend=$1;;
    -[cCS] ) echo 1>&2 "$cymake: unsupported option $1"; exit 1;;
    -a ) linkAlways="$1";;
    -e ) goal=$2; shift;;
    -e* ) goal=`expr X"$1" : X'-e\(.*\)'`;;
    -T ) typeIt=$2; shift;;
    -T* ) typeIt=`expr X"$1" : X'-T\(.*\)'`;;
    -g | --debug ) mkopts="$mkopts $1"; cyopts="$cyopts $1";;
    --clean ) clean=--clean;;
    --find ) find=--find;;
    -o ) output="$2"; shift;;
    -o* ) output=`expr X"$1" : X'-o\(.*\)'`;;
    -n ) exec=echo;;
    -###) exec=quote;;
    -v ) verbose=-v; echo=echo cyopts="$cyopts -v";;
    -q ) echo=:;;

    # Include files and imported modules
    -i | -P )
      arg=`quote1 "$2"`; shift
      cyopts="$cyopts $1 $arg"; imports="$imports $1 $arg";;
    -i* | -P* )
      arg=`quote1 "$1"`; cyopts="$cyopts $arg"; imports="$imports $arg";;

    # Linker options
    -ldopt-* | -ldopts-* | --ldopt-* | --ldopts-* )
      ldopts="$ldopts "`quote1 "$1"`;;
    -ldopt | -ldopts | --ldopt | --ldopts )
      ldopts="$ldopts $1 "`quote1 "$2"`; shift;;
    -[LR] ) ldopts="$ldopts $1"`quote1 "$2"`; shift;;
    -[LR]* ) ldopts="$ldopts "`quote1 "$1"`;;
    -l ) libs="$libs -l"`quote1 "$2"`; shift;;
    -l* ) libs="$libs "`quote1 "$1"`;;

    # Pass all other flags to the Curry compiler
    # NB some options require an argument; must keep this list in sync with cyc
    -[DUIFhkt] | -cc | -ccopt | --ccopt | -ccopts | --ccopts | -arch | -framework )
	 cyopts="$cyopts $1 "`quote1 "$2"`; shift;;
    -* ) cyopts="$cyopts "`quote1 "$1"`;;

    +RTS )
	shift
	cyopts="$cyopts +RTS"
	while test $# -gt 0 && test "$1" != "-RTS"; do
	  cyopts="$cyopts "`quote1 "$1"`;
	  shift
	done
	cyopts="$cyopts -RTS";;

    # Pass archive files and shared libraries to the linker
    *.a | *.so | *.dylib | *.dll ) libs="$libs "`quote1 "$1"`;;

    # Save all files
    * ) files="$files "`quote1 "$1"`;;
  esac
  shift
done
set dummy $depend $clean $find; shift
if test $# -gt 1; then
  echo 1>&2 "$cymake: specify only one of -M, --clean, and --find"
  exit 1
fi
cyc=`quote1 "$cyc"`
cymk=`quote1 "$cymk"`

# Eventually display the compiler version
test -n "$verbose" && echo 1>&2 "$cymake version $version (built on $build)"
test "$exec" && verbose= echo=:

# Generate only dependencies if requested
if test -n "$depend$find"; then
  if test -z "$files"; then
    echo 1>&2 "$cymake: no targets"
    exit 1
  fi
  test -n "$output" && mkopts="$mkopts -o "`quote1 "$output"`
  test -n "$verbose" && \
    eval echo 1>&2 "$cymk" $depend $find "$mkopts" "$imports" "$files"
  eval $exec "$cymk" $depend $find "$mkopts" "$imports" "$files"
  exit $?
fi

# Check for input files
if test -z "$files$goal$typeIt"; then
  test -n "$verbose" && exit 0
  echo 1>&2 "$cymake: no targets"
  exit 1
fi

# Remove build script upon exit
trap 'rc=$?; rm -f /tmp/cymake$$; exit $rc' 0 1 2 3 15

# Process all targets
eval set dummy "$files"; shift
if test -n "$output" && test $# -gt 1; then
  echo 1>&2 "$cymake: cannot specify -o with multiple targets"
  exit 1
fi
if test -n "$goal" && test $# -gt 1; then
  echo 1>&2 "$cymake: cannot specify -e with multiple targets"
  exit 1
fi
if test -n "$typeIt" && test $# -gt 1; then
  echo 1>&2 "$cymake: cannot specify -T with multiple targets"
  exit 1
fi
if test -n "$goal" && test -n "$typeIt"; then
  echo 1>&2 "$cymake: conflicting options -e and -T specified"
  exit 1
fi


if test $# -eq 0; then
  if test -n "$clean"; then
    test -n "$output" || output=a.out
    remove "$output"
  else
    link 1 1 a.out
  fi
  exit $?
fi

eval set dummy "$files"; shift
for f in "$@"; do
  suffixes=".lcurry .curry"
  case $f in
    *.curry ) suffix=.curry suffixes=.curry;;
    *.lcurry ) suffix=.lcurry suffixes=.lcurry;;
    *.o ) suffix=.o;;
    * ) suffix=;;
  esac
  check_source "$f" "$suffix" "$suffixes" || exit $?
  f=`quote1 "$f"`
  if test -n "$goal$typeIt"; then
    g=`quote1 "$goal$typeIt"`
    test -n "$verbose" && \
      eval echo 1>&2 "$cymk" $clean "$mkopts" -e "\\\"$g\\\"" "$imports" "$f"
    eval "$cymk" $clean "$mkopts" -e "$g" -o /tmp/cymake$$ "$imports" "$f" || \
      exit $?
  else
    test -n "$verbose" && \
      eval echo 1>&2 "$cymk" $clean "$mkopts" "$imports" "$f"
    eval "$cymk" $clean "$mkopts" -o /tmp/cymake$$ "$imports" "$f" || exit $?
  fi

  . /tmp/cymake$$
done

# done
exit 0
