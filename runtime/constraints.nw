% -*- noweb-code-mode: c-mode -*-
% $Id: constraints.nw 3273 2016-07-13 21:23:01Z wlux $
%
% Copyright (c) 2002-2016, Wolfgang Lux
% See ../LICENSE for the full license.
%
\subsection{Concurrent Conjunction}\label{sec:concurrent}
This file implements the concurrent conjunction of two constraints
\texttt{(\&)}.

<<constraints.c>>=
#include "config.h"
#include <stdio.h>
#include <stdlib.h>
#include "debug.h"
#include "run.h"
#include "regs.h"
#include "heap.h"
#include "stack.h"
#include "eval.h"
#include "threads.h"
#include "search.h"
#include "unify.h"
#include "cam.h"

@
The code for a concurrent conjunction is defined to be equivalent to
the definition
\begin{verbatim}
  True & True = True
\end{verbatim}
except for evaluating both arguments concurrently. To that end both
arguments are evaluated on separate threads, except when one argument
is already a head normal form. In that case an uninstantiated variable
is bound to the constant \verb{True} and then the other argument is
evaluated on the current thread.

<<constraints.c>>=
DECLARE_LABEL(extern, ___38_);
DECLARE_LABEL(static, ___38__1);
DECLARE_LABEL(static, ___38__2);
DECLARE_LABEL(static, ___38__3);
DECLARE_LABEL(static, ___38__4);

#define NO_SOLUTION "(&): no match"

FUNCTION(___38_)
{
    Node *c1, *c2, *aux;
 ENTRY_LABEL(extern, ___38_)
    for ( c1 = regs.r[0]; node_tag(c1) == INDIR_TAG; c1 = c1->n.node )
	;
    for ( c2 = regs.r[1]; node_tag(c2) == INDIR_TAG; c2 = c2->n.node )
	;

    switch ( node_tag(c1) )
    {
    case EVAL_TAG:
	switch ( node_tag(c2) )
	{
	case EVAL_TAG:
	    regs.r[0] = c1;
	    regs.r[1] = c2;
	    CHECK_HEAP(2, queueMe_node_size);
	    aux	      = (Node *)regs.hp;
	    aux->info = queueMe_info_table;
	    aux->q.wq = 0;
	    regs.hp  += queueMe_node_size;

	    SAVE_RET2(regs.r[1], aux);
	    regs.r[1] = aux;
	    start_thread(2, ___38__1);

	    SAVE_RET3(Prelude_True, (Node *)update, regs.r[1]);
	    CALL_ENT(regs.r[0], ___38__4);

	case LVAR_TAG:
	    SAVE_RET1(c1);
	    CALL2(bind_var, ___38__3, c2, Prelude_True);

	case GVAR_TAG:
	    SAVE_RET1(c1);
	    CALL1(sync_global, ___38__2, c2);

	default:
	    if ( c2 == Prelude_False )
		FAIL(NO_SOLUTION);
	    assert(c2 == Prelude_True);
	}
	SAVE_RET1(Prelude_True);
	CALL_ENT(c1, ___38__4);

    case LVAR_TAG:
	SAVE_RET1(c2);
	CALL2(bind_var, ___38__3, c1, Prelude_True);

    case GVAR_TAG:
	SAVE_RET1(c2);
	CALL1(sync_global, ___38__2, c1);

    default:
	if ( c1 == Prelude_False )
	    FAIL(NO_SOLUTION);
	assert(c1 == Prelude_True);
    }
    SAVE_RET1(Prelude_True);
    CALL_ENT(c2, ___38__4);
}

static
FUNCTION(___38__1)
{
 ENTRY_LABEL(static, ___38__1)
    regs.r[0] = regs.sp[0];
    regs.sp  += 1;
    EVAL(___38__4);
}

static
FUNCTION(___38__2)
{
    Node *r;
 ENTRY_LABEL(static, ___38__2)
    for ( r = regs.r[0]; node_tag(r) == INDIR_TAG; r = r->n.node )
	;
    if ( r == Prelude_False )
	 FAIL(NO_SOLUTION);
    assert(r == Prelude_True);
    GOTO(___38__3);
}

static
FUNCTION(___38__3)
{
 ENTRY_LABEL(static, ___38__3)
    regs.r[0]  = regs.sp[0];
    regs.sp[0] = Prelude_True;
    EVAL(___38__4);
}

@
When an argument has been evaluated to head normal form, it must be
either a variable or one of the constants [[True]] and [[False]]. If
an argument reduces to [[False]] the whole conjunction fails with a no
match error. Otherwise, an unbound variable is instantiated to
[[True]] and then returns the other argument, which at this point must
be either the constant [[True]] or a queue-me node.

<<constraints.c>>=
static
FUNCTION(___38__4)
{
    Node *arg;
 ENTRY_LABEL(static, ___38__4)
    for ( arg = regs.r[0]; node_tag(arg) == INDIR_TAG; arg = arg->n.node )
	;

    switch ( node_tag(arg) )
    {
    case LVAR_TAG:
	CALL2(bind_var, ___38__4, arg, Prelude_True);

    case GVAR_TAG:
	CALL1(sync_global, ___38__4, arg);

    default:
	if ( arg == Prelude_False )
	    FAIL(NO_SOLUTION);
	assert(arg == Prelude_True);
    }

    for ( arg = regs.sp[0]; node_kind(arg) == INDIR_KIND; arg = arg->n.node )
	;
    if ( node_kind(arg) == QUEUEME_KIND )
	ENTER(arg, 1);
    assert(arg == Prelude_True);
    RETURN(arg, 1);
}

@ 
The unsafe function [[spawnConstraint]] forks a new concurrent
computation, but does not wait for its termination. It is defined for
compatibility with PAKCS. No new thread is started when the first
argument is already in head normal form.

<<constraints.c>>=
DECLARE_LABEL(extern, __spawnConstraint);
DECLARE_LABEL(static, __spawnConstraint_1);
DECLARE_LABEL(static, __spawnConstraint_2);
DECLARE_LABEL(static, __spawnConstraint_3);

#undef NO_SOLUTION
#define NO_SOLUTION "spawnConstraint: no match"

FUNCTION(__spawnConstraint)
{
    Node *c, *x;
 ENTRY_LABEL(extern, __spawnConstraint)
    c = regs.r[0];
    for (;;)
    {
	switch ( node_tag(c) )
	{
	case INDIR_TAG:
	    c = c->n.node;
	    continue;
	case EVAL_TAG:
	    SAVE_REGS(1);
	    regs.r[0] = c;
	    start_thread(1, __spawnConstraint_3);
	    SAVE_REGS(0);
	    CALL_ENT(regs.r[0], __spawnConstraint_1);
	case LVAR_TAG:
	    SAVE_REGS(1);
	    CALL2(bind_var, __spawnConstraint_3, c, Prelude_True);
	case GVAR_TAG:
	    SAVE_REGS(1);
	    CALL1(bind_var, __spawnConstraint_2, c);
	default:
	    if ( c == Prelude_False )
		FAIL(NO_SOLUTION);
	    assert(c == Prelude_True);
	}
	break;
    }

    x = regs.r[1];
    if ( is_tagged_ptr(x) )
	ENT(x);
    RET(x);
}

static
FUNCTION(__spawnConstraint_1)
{
    Node *c;
 ENTRY_LABEL(extern, __spawnConstraint_1)
    c = regs.r[0];
    for (;;)
    {
	switch ( node_tag(c) )
	{
	case INDIR_TAG:
	    c = c->n.node;
	    continue;
	case LVAR_TAG:
	    CALL_RET2(bind_var, 0, c, Prelude_True);
	case GVAR_TAG:
	    CALL1(bind_var, __spawnConstraint_1, c);
	default:
	    if ( c == Prelude_False )
		FAIL(NO_SOLUTION);
	    assert(c == Prelude_True);
	}
	break;
    }
    RETURN(c, 0);
}

static
FUNCTION(__spawnConstraint_2)
{
    Node *c;
 ENTRY_LABEL(static, __spawnConstraint_2)
    for ( c = regs.r[0]; node_tag(c) == INDIR_TAG; c = c->n.node )
	;
    if ( c == Prelude_False )
	FAIL(NO_SOLUTION);
    assert(c == Prelude_True);
    GOTO(__spawnConstraint_3);
}

static
FUNCTION(__spawnConstraint_3)
{
    Node *x;
 ENTRY_LABEL(static, __spawnConstraint_3)
    x = regs.sp[0];
    if ( is_tagged_ptr(x) )
	ENTER(x, 1);
    RETURN(x, 1);
}
