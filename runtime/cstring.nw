% -*- noweb-code-mode: c-mode -*-
% $Id: cstring.nw 2297 2007-06-19 22:51:03Z wlux $
%
% Copyright (c) 2001-2007, Wolfgang Lux
% See ../LICENSE for the full license.
%
\subsection{C String Interface}\label{sec:string}
The C string library interface provides some functions that translate
C strings into Curry strings and vice versa. In addition, this file
includes two functions that convert character and floating-point
literals into their (C) string representations.

<<cstring.h>>=
extern Node	*from_string(unsigned int n_regs, const char *cp);
extern Node	*from_string_len(unsigned int n_regs, const char *cp,
				 unsigned long len);
extern Node	*prefix_string(unsigned int n_regs, const char *cp, Node *);
extern Node	*prefix_string_len(unsigned int n_regs, const char *cp,
				   unsigned long len, Node *);
extern unsigned string_length(Node *);
extern char	*copy_string(Node *, char *buf);
extern char	*to_string(Node *);

extern char *lit_char(char *buf, int c0, int c, int q);
extern char *lit_double(char *buf, double d);

@ 
<<cstring.c>>=
#include "config.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#ifdef HAVE_IEEEFP_H
# include <ieeefp.h>
#endif
#include "debug.h"
#include "run.h"
#include "regs.h"
#include "heap.h"
#include "data.h"
#include "cstring.h"

@
The functions [[from_string]] and [[from_string_len]] translate a C
string into the corresponding Curry list of characters and return a
pointer to the list. The whole string is translated at once by these
functions. In order to prepend a C string to a given list of
characters, use the functions [[prefix_string]] and
[[prefix_string_len]] instead.

The macros [[primPeekString]] and [[primPeekCStringLen]] make these
function available to the foreign function interface.
[[PrimPeekCString]] computes the length of the C string using
[[strlen]], whereas the length is passed explicitly to
[[primPeekCString]]. This allows converting C strings with embedded
\verb|\NUL| characters as well as substrings.

<<cstring.h>>=
#define primPeekCString(str)		from_string(0, str)
#define primPeekCStringLen(str, len)	from_string_len(0, str, len)

@ 
<<cstring.c>>=
Node *
from_string(unsigned int n_regs, const char *cp)
{
    return prefix_string_len(n_regs, cp, strlen(cp), nil);
}

Node *
from_string_len(unsigned int n_regs, const char *cp, unsigned long len)
{
    return prefix_string_len(n_regs, cp, len, nil);
}

Node *
prefix_string(unsigned int n_regs, const char *cp, Node *list)
{
    return prefix_string_len(n_regs, cp, strlen(cp), list);
}

Node *
prefix_string_len(unsigned int n_regs, const char *cp,
		  unsigned long len, Node *list)
{
    if ( len > 0 )
    {
	Node *tail;

	BEGIN_LOCAL_ROOTS1(list)
	CHECK_HEAP(n_regs, len * cons_node_size);
	END_LOCAL_ROOTS

	cp  += len;
	tail = list;

	do
	{
	    list	    = (Node *)regs.hp;
	    list->info	    = &cons_info;
	    list->c.args[0] = (Node *)(char_table + (*--cp & 0xff));
	    list->c.args[1] = tail;
	    regs.hp	   += cons_node_size;
	    tail	    = list;
	}
	while ( --len > 0 );
    }
    return list;
}

@ 
The function [[string_length]] returns the length of a Curry string.
The function [[copy_string]] copies a Curry string into a string
buffer terminated with a final [['\0']] character. The buffer must be
large enough to hold the string including the terminator character.
Finally, the function [[to_string]] uses [[malloc]] to allocate a
suitable buffer and copies the Curry string argument into this buffer.
The macro [[primNewCString]] makes this function available to the
foreign function interface.

<<cstring.h>>=
#define primNewCString(str)	to_string(str)

@ 
<<cstring.c>>=
unsigned
string_length(Node *list)
{
    unsigned n = 0;

    while ( list->info->kind != CAPP_KIND || list->info->tag != NIL_TAG )
    {
	while ( list->info->kind == INDIR_KIND )
	    list = list->n.node;

	assert(list->info->kind == CAPP_KIND);
	if ( list->info->tag == CONS_TAG )
	    n++, list = list->c.args[1];
	else
	    assert(list->info->tag == NIL_TAG);
    }

    return n;
}

char *
copy_string(Node *list, char *buf)
{
    char *cp = buf;
    Node *head;

    while ( list->info->kind != CAPP_KIND || list->info->tag != NIL_TAG )
    {
	while ( list->info->kind == INDIR_KIND )
	    list = list->n.node;
	assert(list->info->kind == CAPP_KIND);

	if ( list->info->tag == CONS_TAG )
	{
	    head = list->c.args[0];
	    while ( is_boxed(head) && head->info->kind == INDIR_KIND )
		head = head->n.node;
	    assert(is_boxed(head) && head->info->kind == CHAR_KIND);
	    *cp++ = head->ch.ch;
	    list  = list->c.args[1];
	}
	else
	    assert(list->info->tag == NIL_TAG);
    }
    *cp = '\0';
    return buf;
}

char *
to_string(Node *list)
{
    unsigned n   = string_length(list);
    char     *cp = (char *)malloc(n + 1);

    if ( cp == NULL )
	sys_error("to_string");
    return copy_string(list, cp);
}

@ 
The function [[lit_char]] converts a character into its printable
representation (without quotes). The argument [[q]] is used for
specifying the quote character. This character will be escaped with a
backslash character in the return value. Passing [['\0']] as quote
character avoids escaping. The argument [[c0]] specifies the preceding
character and is used in order to insert a ``null character'' escape
sequence \verb|\&| between a numeric character escape sequence and a
digit so that it is possible to distinguish the strings
\verb|['\137',9]| and \verb|['\1379']|. Similarly, \verb|\&| is
inserted between \verb|\SO| (ASCII code 14) and \verb|H| in order to
distinguish the strings \verb|['\SO','H']| and \verb|['\SOH']|.

The buffer passed to [[lit_char]] must be long enough to accommodate
the converted string. In order to support the whole Unicode character
set range ($[\texttt{'\bs{}NUL'},\texttt{'\bs{}x10ffff'}]$) at least 9
bytes are required.

<<cstring.c>>=
static const char *asciiTab[] = {
    "\\NUL", "\\SOH", "\\STX", "\\ETX", "\\EOT", "\\ENQ", "\\ACK", "\\a",
    "\\b",   "\\t",   "\\n",   "\\v",   "\\f",   "\\r",  "\\SO",  "\\SI",
    "\\DLE", "\\DC1", "\\DC2", "\\DC3", "\\DC4", "\\NAK", "\\SYN", "\\ETB",
    "\\CAN", "\\EM",  "\\SUB", "\\ESC", "\\FS",  "\\GS",  "\\RS",  "\\US"
};

char *
lit_char(char *buf, int c0, int c, int q)
{
    if ( c >= '\0' && c < ' ' )
	strcpy(buf, asciiTab[c]);
    else if ( c == 0177 )
	strcpy(buf, "\\DEL");
    else if ( c >= ' ' && c < 0177 )
    {
	char *cp = buf;

	if ( c == q || c == '\\' )
	    *cp++ = '\\';
	else if ( (c == 'H' && c0 == 016/*'\SO'*/) ||
		  (isdigit(c) && c0 > 0177) )
	{
	    *cp++ = '\\';
	    *cp++ = '&';
	}
	*cp++ = c;
	*cp   = '\0';
    }
    else
	sprintf(buf, "\\%d", c);

    return buf;
}

@ 
The function [[lit_double]] converts a floating-point value into a
string. The conversion essentially uses the [[%g]] format of
[[sprintf]], but appends a suffix \verb|.0| to the number if there is
no fraction and no exponent in the printed representation. Infinities
and NaNs are handled specially because their printed representation
depends on the operating systems and no \verb|.0| suffix must be
appended to them. The buffer passed to [[lit_double]] must be long
enough to accomodate the largest possible string. For the IEEE double
format, at least 25 characters\footnote{One sign character, up to 17
  significant digits, a decimal point, the character \texttt{e}
  marking the exponent, a sign and three digits in the exponent, and
  the final \texttt{NUL} character.} must be provided.

In general, 17 significant digits are required in order to print an
IEEE double value exactly. However, the [[%.17g]] floating point
format may produce spurious insignificant digits at the end of the
string. For instance, many implementations will print the string
\verb|"0.20000000000000001"| for \verb|printf("%.17g", 0.2)|
instead of \verb|"0.2"|. In order to avoid such results, we first try
to convert the number with 16 significant digits. If the resulting
string does not match the number exactly, we will call [[sprintf]]
again; this time with 17 significant digits. Note that this code
assumes that the Curry lexer computes the same number as the C
function [[strtod]].

\ToDo{Use a better algorithm for converting floating-point numbers
  into strings in order to avoid the string to double
  conversion. See~\cite{BurgerDybvig96:Printing} for an alternative.}

<<cstring.c>>=
char *
lit_double(char *buf, double d)
{
    const char *loc;

    if ( finite(d) )
    {
	loc = setlocale(LC_NUMERIC, NULL);
	setlocale(LC_NUMERIC, "C");

	sprintf(buf, "%.16g", d);
	if ( strtod(buf, NULL) != d )
	    sprintf(buf, "%.17g", d);
	if ( !strpbrk(buf, ".e") )
	    strcat(buf, ".0");

	setlocale(LC_NUMERIC, loc);
    }
    else if ( isnan(d) )
	strcpy(buf, "NaN");
    else
    {
	char *cp = buf;

	if ( d < 0 )
	    *cp++ = '-';
	strcpy(cp, "Infinity");
    }

    return buf;
}
