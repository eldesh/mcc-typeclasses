% -*- noweb-code-mode: c-mode -*-
% $Id: curry.nw 2346 2007-06-23 10:23:59Z wlux $
%
% Copyright (c) 2002-2007, Wolfgang Lux
% See ../LICENSE for the full license.
%
\section{The Runtime System}
This chapter describes the C runtime system for the Curry abstract
machine. Clients can use the header file [[curry.h]] to include all
definitions for the runtime system. The file, in turn, includes the
header files of all runtime system components and also some required
header files from the standard C library.

<<curry.h>>=
#ifndef _CURRY_H
#define _CURRY_H 1

/* configuration and debugging */
#include "config.h"
#include "debug.h"

/* standard C library */
#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <limits.h>

/* runtime system */
#include "run.h"
#include "regs.h"
#include "heap.h"
#include "stack.h"
#include "trail.h"
#include "threads.h"
#include "spaces.h"
#include "search.h"
#include "data.h"
#include "eval.h"
#include "backtrack.h"
#include "io_monad.h"
#include "unify.h"
#include "cstring.h"
#include "main.h"
#include "trace.h"

/* abstract machine instructions */
#ifdef CURRY_RTS
# include "cam.h"
#endif

#endif /* _CURRY_H */

@
\subsection{Configuration}
There are two kinds of configuration options. The first group includes
all options that allow selecting a particular variant of the runtime
system, the other consists of system dependent definitions, which are
used in order to work around some portability issues. The settings of
all options are maintained in file [[config.h]], which is generated by
the [[configure]] script using the template found in [[config.h.in]].

<<config.h.in>>=
#ifndef _CONFIG_H
<<Configuration options>>
<<Portability definitions>>
#endif /* _CONFIG_H */

@ 
\subsubsection{Configuration options}
Currently, the following configuration options are supported.
\begin{itemize}
\item [[UNALIGNED_DOUBLE]]: If this flag is set, variables of type
  [[double]] can be read and written even if they are not aligned to a
  double word boundary. The value of this flag is determined
  automatically by the [[configure]] script.
\item [[USE_TRAMPOLINE]]: This flag determines whether tail calls are
  implemented using a global trampoline function or by inserting
  assembler jump instructions into the code (see
  Sect.~\ref{sec:execution}). This flag is controlled by the
  \texttt{--enable-trampoline} option of \texttt{configure}.
\item [[USE_STANDARD_TRAMPOLINE]]: If [[USE_TRAMPOLINE]] is defined,
  this flag determines whether \emph{all} tail calls are performed
  through the trampoline loop. This flag can be set passing the
  [[standard]] argument to \texttt{--enable-trampoline} configuration
  option.
\item [[NO_POINTER_TAGS]]: This flag determines whether the runtime
  system uses tagged pointers, which allow encoding integer numbers in
  pointer values rather than allocating nodes for them. If this flag
  is non-zero, all integer numbers are allocated in the heap and
  pointer tagging is not used. This flag is controlled by the
  \texttt{--disable-pointer-tags} option of \texttt{configure}.
\item [[COPY_SEARCH_SPACE]]: If this flag is non-zero, a copying
  implementation is used for encapsulated
  search~\cite{Lux04:CopyTrail} as well as for global search. In this
  configuration, the runtime system does not use a trail stack in
  order to record destructive updates of the search goal's graph but
  rather uses independent copies for each branch of the goal's search
  tree.
\item [[YIELD_NONDET]]: If this flag is non-zero, the abstract machine
  prioritizes deterministic threads over non-deterministic threads. By
  enabling this flag, unnecessary non-deterministic splittings may be
  avoided, e.g., for the goal \verb|nat n & n =:= S Z| and the program
\begin{verbatim}
data Nat = Z | S Nat
nat Z     = success
nat (S n) = nat n
\end{verbatim}
  On the other hand, setting this flag may result in a high degree of
  concurrency and even lead to non-termination, e.g., for the goal
  \verb|repeat coin =:= from 0| and the program
\begin{verbatim}
coin = 0
coin = 1
repeat x = x : repeat x
from   n = n : from (n + 1)
\end{verbatim}
  Note that this non-termination is due to the implicit concurrent
  unification of the arguments of the two data structures. The setting
  of this flag is controlled by the \texttt{--enable-stability} option
  of \texttt{configure}.
\item [[NO_OCCURS_CHECK]]: If this flag is non-zero, the abstract
  machine does not perform an occurs check in unifications. Programs
  without occurs check might be executed more efficiently, but they
  are subject to non-termination in examples like \texttt{let x,y free
  in x =:= (1:y) \& y =:= (1:x)}. Note that the occurs check is also
  used for detecting normal forms, which allows for a more efficient
  implementation of \texttt{$x$ =:= $e$} when $x$ is a variable and
  the expression $e$ is in normal form (see
  Sect.~\ref{sec:unification}).
\end{itemize}
\begin{sloppy}
  The template definitions below ensure that the symbols
  [[USE_TRAMPOLINE]], [[NO_POINTER_TAGS]], [[COPY_SEARCH_SPACE]],
  [[YIELD_NONDET]], and [[NO_OCCURS_CHECK]] are always defined. This
  will ensure a consistent use of these options throughout the runtime
  system, as a redefinition will raise a compilation error.

\end{sloppy}
<<Configuration options>>=
/* Define to empty if doubles have alignment constraints */
#undef UNALIGNED_DOUBLE

/* Define as 1 to use trampoline code for tail calls */
#define USE_TRAMPOLINE 0

/* Define as 1 to perform all tail calls via the trampoline */
/* NB This macro has an effect only if USE_TRAMPOLINE is non-zero */
#define USE_STANDARD_TRAMPOLINE 0

/* Define as 1 to disable use of tagged pointers */
#define NO_POINTER_TAGS 0

/* Define as 1 to use a copying implementation for non-deterministic search */
#define COPY_SEARCH_SPACE 0

/* Define as 1 to enable stability */
#define YIELD_NONDET 0

/* Define as 1 to disable occurs check in unification */
#define NO_OCCURS_CHECK 0

@ 
\subsubsection{Portability definitions}
The Gnu C compiler allows the programmer to specify certain function
attributes in declarations, which help the compiler to generate better
code and to check the code more carefully. Since attribute
annotations are peculiar to Gnu C, we set up a pre-processor macro
that ignores them when another C compiler is used.

<<Portability definitions>>=
#if __GNUC__ < 2
# define __attribute__(attrs)
#endif

@ 
All ANSI compliant compilers should support the [[const]] and
[[volatile]] keywords. However, the [[inline]] keyword is not
necessarily supported so we have to check for it.

<<Portability definitions>>=
/* Define to empty if the compiler does not support const */
#undef const

/* Define to empty if the compiler does not support volatile */
#undef volatile

/* Define to empty if the compiler does not support inline */
#undef inline

@ 
Not all systems have a working [[vfork]] implementation. On those
systems, [[fork]] will be used in order to fork a new process.

<<Portability definitions>>=
/* Define to empty if the system does not have a working vfork */
#undef HAVE_WORKING_VFORK

@ 
The garbage collector uses the [[mprotect]] system call on machines
where it is available in order to protect the inactive semi-space of
the heap.

<<Portability definitions>>=
/* Define to empty if the system not have mprotect */
#undef HAVE_MPROTECT

@ 
In order to identify floating-point numbers which represent an
infinity or a NaN, we use the functions [[finite]] and [[isnan]].
On many systems, the prototypes of these functions are defined in
[[math.h]]. However, on Solaris they are defined in [[ieeefp.h]].

<<Portability definitions>>=
/* Define to empty if the system does not have ieeefp.h */
#undef HAVE_IEEEFP_H

@
Traditionally, the socket functions [[accept]], [[getsockname]],
[[getpeername]], etc.\ were using [[int *]] as parameter. However,
since the size of [[int]] can differ on 64-bit systems, newer
operating systems use [[socklen_t *]] instead.

<<Portability definitions>>=
/* Define to empty if socklen_t is not defined */
#undef HAVE_SOCKLEN_T

