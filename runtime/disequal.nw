% -*- noweb-code-mode: c-mode -*-
% $Id: disequal.nw 2750 2008-08-30 13:21:58Z wlux $
%
% Copyright (c) 2002-2008, Wolfgang Lux
% See ../LICENSE for the full license.
%
\subsection{Disequality Constraints}
The representation of disequality constraints extends the common
[[Constraint]] structure with the term from which the variable has to
be different.

<<disequal.h>>=
#ifdef CURRY_RTS
extern NodeInfo diseq_constraint_info;
typedef struct diseq_constraint {
    Constraint cstr;
    Node       *node;
} Disequality;
#endif

@ 
The primitive function [[=/=]] implements disequality constraints.

<<disequal.h>>=
DECLARE_LABEL(extern, ___61__47__61_);

@ 
<<disequal.c>>=
#include "config.h"
#include "debug.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "run.h"
#include "regs.h"
#include "heap.h"
#include "stack.h"
#include "eval.h"
#include "threads.h"
#include "spaces.h"
#include "trail.h"
#include "unify.h"
#include "equal.h"
#include "disequal.h"
#include "cam.h"
#include "trace.h"

DECLARE_LABEL(static, ___61__47__61__1);
DECLARE_LABEL(static, ___61__47__61__2);
DECLARE_LABEL(static, diseq_var);
DECLARE_LABEL(static, diseq_args);
DECLARE_LABEL(static, diseq_args_1);
DECLARE_LABEL(static, diseq_args_2);
DECLARE_LABEL(static, diseq_papp_args);
DECLARE_LABEL(static, check_diseq);

#define diseq_constraint_size wordsof(Disequality)
NodeInfo diseq_constraint_info = {
    CAPP_KIND, 0, diseq_constraint_size, 0, 0, check_diseq, 0, 0, 0
};

#define NO_SOLUTION "(=/=): no solution"

FUNCTION(___61__47__61_)
{
 ENTRY_LABEL(extern, ___61__47__61_)
    TRACE_FUN("=/=", 2);
    SAVE_REGS(1);
    EVAL(___61__47__61__1);
}

static
FUNCTION(___61__47__61__1)
{
 ENTRY_LABEL(static, ___61__47__61__1)
    SWAPn(0);
    EVAL(___61__47__61__2);
}

static
FUNCTION(___61__47__61__2)
{
    Node *arg1, *arg2;
 ENTRY_LABEL(static, ___61__47__61__2)
    arg1 = regs.sp[0];
    arg2 = regs.r[0];

    while ( is_tagged_ptr(arg1) && is_indir_node(arg1) )
	arg1 = arg1->n.node;
    if ( is_tagged_ptr(arg1) && is_variable_node(arg1) )
    {
	/* check for trivial disequality (x=/=x) */
	if ( arg1 != arg2 )
	{
	    regs.r[0]  = arg1;
	    regs.sp[0] = arg2;
	    GOTO(diseq_var);
	}
    }
    else if ( is_tagged_ptr(arg2) && is_variable_node(arg2) )
    {
	regs.r[0]  = arg2;
	regs.sp[0] = arg1;
	GOTO(diseq_var);
    }
    else
    {
	int n = eq_root(arg1, arg2);

	if ( n < 0 )
	    RETURN(Success, 1);
	else if ( n > 0 )
	{
	    bool exist_type;
	    Node *arglist;

	    /* NB assign exist_type before calling eq_args because a
	     *    garbage collection in eq_args will invalidate arg1 */
	    exist_type = is_eapp_node(arg1) || is_papp_node(arg1);
	    arglist    = eq_args(0, arg1, arg2, n);
	    if ( !arglist )
		RETURN(Success, 1);

	    if ( arglist != nil )
	    {
		regs.sp[0] = arglist;
		if ( exist_type )
		{
		    regs.r[0] = CONST(__Prelude__True);
		    GOTO(diseq_papp_args);
		}
		else
		    GOTO(diseq_args);
	    }
	}
    }

    FAIL(NO_SOLUTION);
}

@
A disequality constraint between a variable and another expression is
handled by evaluating the expression to normal form and adding the
resulting data term to the constraint list of the variable. In
order to ensure that a constraint is always a data term, the runtime
system should create a new variable and unify this variable with the
argument (which also causes evaluation to normal form). However, we
add the expression directly to the constraint list here, which should
not cause any problems as the runtime system does not rely on
disequality constraints being in normal form.

If a disequality constraint is applied to two unbound variables, we
add the constraint (only) to the variable at the higher address. As
for the unification of two variables, this policy avoids redundant
trailing when one of the variables is allocated in the current heap
segment and the other one is protected below a choice point.

Note that this implementation is incomplete. For instance, it will not
compute the valid solution \verb|x=Nothing| for the constraint
\verb|x =/= Just undefined|. In order to compute such solutions, the
runtime system should replace a constraint
$x$ \texttt{=/=} $c_i\,e_1\,\dots\,e_{k_i}$
by
\begin{quote}
\texttt{(}$x$ \texttt{=:=} $c_1\,y_{1,1}\,\dots\,y_{1,k_1}$
\texttt{|} $\dots$ \texttt{|}
$x$ \texttt{=:=} $c_n\,y_{n,1}\,\dots\,y_{n,k_n}$
\texttt{)} \texttt{\&}
$x$ \texttt{=/=} $c_i\,e_1\,\dots\,e_{k_i}$
\end{quote}
where $c_1, \dots, c_n$ are all data constructors (with arities $k_1,
\dots, k_n$, respectively) of the same data type as $c_i$ and
\texttt{|} denotes the disjunction operator. Unfortunately, these
data constructors are not known in the runtime system.

\ToDo{Maintain information about sibling constructors in the runtime
  system.}

\ToDo{Avoid adding redundant disequalities by checking the constraint
  lists before adding a new constraint.}

<<disequal.c>>=
static
FUNCTION(diseq_var)
{
    enum occurs occ;
    Disequality *cstr;
 ENTRY_LABEL(static, diseq_var)
    if ( is_tagged_ptr(regs.sp[0]) && is_variable_node(regs.sp[0]) &&
	 is_local_space(regs.sp[0]->v.spc) )
    {
	if ( regs.sp[0] > regs.r[0] || !is_local_space(regs.r[0]->v.spc) )
	    SWAPn(0);
    }
    else if ( !is_local_space(regs.r[0]->v.spc) )
	CALL1(sync_var, ___61__47__61__1, regs.r[0]);

    /* occurs check */
    occ = occurs(regs.r[0], regs.sp[0]);
    if ( occ == occurs_yes )
	RETURN(Success, 1);

    /* add the constraint to the variable */
    CHECK_HEAP(1, diseq_constraint_size);
    cstr	     = (Disequality *)regs.hp;
    cstr->cstr.info  = &diseq_constraint_info;
    cstr->cstr.cstrs = regs.r[0]->v.cstrs;
    cstr->node	     = regs.sp[0];
    regs.hp	    += diseq_constraint_size;

    SET_FIELD(regs.r[0], v.cstrs, (Constraint *)cstr);

    /* if necessary, evaluate the argument to normal form */
    if ( occ == occurs_no_nf )
	RETURN(Success, 1);
    CALL_RET2(___61__58__61_, 1, regs.sp[0], regs.sp[0]);
}

@ 
The function [[diseq_args]] handles disequalities between the
arguments of two data terms with the same root. Such a disequality can
be solved only by introducing a disjunction into the program. In
particular, the disequality
$c\,e_1\,\dots\,e_n$ \texttt{=/=} $c\,e_1'\,\dots\,e_n'$
is equivalent to the disjunction
$e_1$ \texttt{=/=} $e_1'$ \texttt{|}                                         %'
$e_2$ \texttt{=/=} $e_2'$ \texttt{|} \dots \texttt{|}                        %'
$e_n$ \texttt{=/=} $e_n'$                                                    %'
where \texttt{|} denotes the disjunction operator.

\ToDo{The current implementation handles the above disjunction as
  nested binary disjunctions by treating \texttt{|} as a binary
  operator which associates to the right. This does not matter much
  for global backtracking search, but leads to a slightly unbalanced
  tree of solutions in encapsulated search. A better implementation
  should split a disjunction for \emph{n} argument pairs into \emph{n}
  continuations in one step.}

<<disequal.c>>=
static
FUNCTION(diseq_args)
{
    static const Label diseq_args_choices[] = { diseq_args_1, diseq_args_2, 0 };
 ENTRY_LABEL(static, diseq_args)
    if ( regs.sp[0]->c.args[2] == nil )
	GOTO(diseq_args_1);

    CHECK_STACK1();
    regs.sp   -= 1;
    regs.sp[0] = (Node *)diseq_args_choices;
#if !NO_STABILITY
    regs.ret   = regs.handlers->choices;
    GOTO(yield_thread);
#else
    GOTO(regs.handlers->choices);
#endif
}

static
FUNCTION(diseq_args_1)
{
    Node *arglist;
 ENTRY_LABEL(static, diseq_args_1)
    arglist = regs.sp[0];
    CALL_RET2(___61__47__61_, 1, arglist->c.args[0], arglist->c.args[1]);
}

static
FUNCTION(diseq_args_2)
{
 ENTRY_LABEL(static, diseq_args_2)
    regs.sp[0] = regs.sp[0]->c.args[2];
    GOTO(diseq_args);
}

@ 
As explained on p.~\pageref{unsafe-equality} in
Sect.~\ref{unsafe-equality}, computing the equality of two partial
applications and of two data constructors with existentially
quantified types, respectively, is not type safe. In order to prevent
ill-typed nodes from escaping the scope of a disequality constraint,
we restrict disequality constraints between partial applications and
between existentially quantified data constructors to ground terms.
This is implemented by applying the \texttt{(==)} primitive to each
pair of arguments and checking that at least one of these applications
reduces to \texttt{False}.

\ToDo{Using \texttt{(==)} and checking arguments sequentially is
probably too restrictive. Provide a more general solution by defining
and using a rigid variant of \texttt{(=/=)}.}

<<disequal.c>>=
static
FUNCTION(diseq_papp_args)
{
    Node *arglist;
 ENTRY_LABEL(static, diseq_papp_args)
    if ( regs.r[0] != CONST(__Prelude__True) )
	RETURN(Success, 1);

    arglist = regs.sp[0];
    if ( arglist == nil )
	FAIL(NO_SOLUTION);
    regs.sp[0] = arglist->c.args[2];
    CALL2(___61__61_, diseq_papp_args, arglist->c.args[0], arglist->c.args[1]);
}

@
The function [[check_diseq]] is used to check that a value is compatible
with a given constraint.

<<disequal.c>>=
static
FUNCTION(check_diseq)
{
 ENTRY_LABEL(static, check_diseq)
    EXEC2(___61__47__61_, regs.r[0], ((Disequality *)regs.r[1])->node);
}
