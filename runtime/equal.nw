% -*- noweb-code-mode: c-mode -*-
% $Id: equal.nw 2853 2009-05-29 11:55:01Z wlux $
%
% Copyright (c) 2001-2008, Wolfgang Lux
% See ../LICENSE for the full license.
%
\subsection{Strict Equality}
The primitive function [[(==)]] implements strict equality for ground
terms. It returns [[True]], if both arguments evaluate to equal terms,
and [[False]] otherwise. Both arguments are evaluated only as far as
necessary in order to determine (in)equality. This primitive operation
is used only for evaluating equality and disequality constraints
between data terms with existentially quantified types.

\ToDo{Get rid of this primitive.}

In addition, this file contains the implementation of the function
[[primEqAddr]], which checks whether its arguments are equal by
comparing their addresses. This primitive can be used to implement
\texttt{Eq} instances for abstract types.

<<equal.h>>=
DECLARE_LABEL(extern, ___61__61_);
extern Node *primEqAddr(Node *, Node *);

@ 
<<equal.c>>=
#include "config.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "debug.h"
#include "run.h"
#include "regs.h"
#include "heap.h"
#include "stack.h"
#include "eval.h"
#include "threads.h"
#include "equal.h"
#include "unify.h"
#include "cam.h"
#include "trace.h"

#define pair_cons_node_size closure_node_size(3)
static DEFINE_DATA(pair_cons, ",:", CONS_TAG, 3);

DECLARE_LABEL(static, ___61__61__1);
DECLARE_LABEL(static, ___61__61__2);
DECLARE_LABEL(static, ___61__61__3);

FUNCTION(___61__61_)
{
 ENTRY_LABEL(extern, ___61__61_)
    C_STACK_CHECK(___61__61_);
    TRACE_FUN("==", 2);
    SAVE_REGS(1);
    EVAL(___61__61__1);
}

static
FUNCTION(___61__61__1)
{
 ENTRY_LABEL(static, ___61__61__1)
    MATCH_RIGID(___61__61__1);
    SWAPn(0);
    EVAL(___61__61__2);
}

static
FUNCTION(___61__61__2)
{
    bool is_vect;
    int	 i, n;
    Node *arg1, *arg2;
    Node *next, *arglist;
    Node **argp1, **argp2;
 ENTRY_LABEL(static, ___61__61__2)
    MATCH_RIGID(___61__61__2);

    arg1 = regs.sp[0];
    arg2 = regs.r[0];
    n	 = eq_root(arg1, arg2);

    if ( n < 0 )
	RETURN(Prelude_False, 1);
    else if ( n == 0 )
	RETURN(Prelude_True, 1);
    else if ( n == 1 )
    {
	is_vect = is_vector_node(arg1);
	CALL_RET2(___61__61_, 1,
		  is_vect ? arg1->a.args[0] : arg1->c.args[0],
		  is_vect ? arg2->a.args[0] : arg2->c.args[0]);
    }

    arglist = nil;
    is_vect = is_vector_node(arg1);
    CHECK_HEAP(1, n * pair_cons_node_size);
    argp1 = is_vect ? regs.sp[0]->a.args : regs.sp[0]->c.args;
    argp2 = is_vect ? regs.r[0]->a.args : regs.r[0]->c.args;

    for ( i = n, argp1 += n, argp2 += n; i-- > 1; )
    {
	next		= (Node *)regs.hp;
	next->info	= INFO(pair_cons);
	next->c.args[0] = *--argp1;
	next->c.args[1] = *--argp2;
	next->c.args[2] = arglist;
	arglist		= next;
	regs.hp	       += pair_cons_node_size;
    }

    regs.sp[0] = arglist;
    CALL2(___61__61_, ___61__61__3, *--argp1, *--argp2);
}

static
FUNCTION(___61__61__3)
{
    Node *eq, *arg1, *arg2, *arglist;
 ENTRY_LABEL(static, ___61__61__3)
    eq = regs.r[0];
    if ( eq != Prelude_True )
	RETURN(eq, 1);

    ASSERT(regs.sp[0]->info == INFO(pair_cons));
    arglist = regs.sp[0];
    arg1    = arglist->c.args[0];
    arg2    = arglist->c.args[1];
    arglist = arglist->c.args[2];

    if ( arglist == nil )
	CALL_RET2(___61__61_, 1, arg1, arg2);

    regs.sp[0] = arglist;
    CALL2(___61__61_, ___61__61__3, arg1, arg2);
}

@ 
Abstract nodes are considered equal only to themselves, which is
formalized in the function [[primEqAddr]]. This function can also be
used to compare mutable references and mutable vectors.

<<equal.c>>=
Node *
primEqAddr(Node *x, Node *y)
{
    return x == y ? Prelude_True : Prelude_False;
}
