% -*- noweb-code-mode: c-mode -*-
% $Id: eval.nw 3008 2010-09-01 09:59:41Z wlux $
%
% Copyright (c) 2001-2010, Wolfgang Lux
% See ../LICENSE for the full license.
%
\subsection{Evaluation}\label{sec:eval}
Every node has an entry point, which is called when the program has to
evaluate a node. The common entry points are defined in this module,
entry points for functions and lazy applications nodes are generated
by the compiler. All entry points are called with the node to be
evaluated on the top of the stack.

<<eval.c>>=
#include "config.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "debug.h"
#include "run.h"
#include "regs.h"
#include "heap.h"
#include "stack.h"
#include "trail.h"
#include "threads.h"
#include "spaces.h"
#include "search.h"
#include "trace.h"
#include "eval.h"
#include "cam.h"

@
Some nodes, e.g. thread nodes, do not represent values and cannot be
evaluated at all. The entry point [[no_eval]] aborts the program if
such a node is ever entered.

<<eval.h>>=
DECLARE_LABEL(extern, no_eval);

@
<<eval.c>>=
FUNCTION(no_eval)
{
 ENTRY_LABEL(extern, no_eval)
    curry_panic("internal error: no_eval entered\n");
}

@ 
Numbers, data constructor applications, and partial applications are
already in weak head normal form.  Their evaluation code,
[[eval_whnf]], simply returns the node to the caller.

<<eval.h>>=
DECLARE_LABEL(extern, eval_whnf);

@
<<eval.c>>=
FUNCTION(eval_whnf)
{
 ENTRY_LABEL(extern, eval_whnf)
    RET(regs.r[0]);
}

@
An indirection node is evaluated by dereferencing the node and calling
the evaluation method of the referenced node. In order to speed up the
evaluation of indirection chains, we use a loop that follows such
chains until finding a node which is not an indirection node. If the
referenced node is a tagged integer, we return to the caller
immediately.

<<eval.h>>=
DECLARE_LABEL(extern, eval_indir);

@
<<eval.c>>=
FUNCTION(eval_indir)
{
    Node *node;
 ENTRY_LABEL(extern, eval_indir)
    node = regs.r[0];
    assert(is_tagged_ptr(node) && is_indir_node(node));

    /* dereference the indirection */
    do
        node = node->n.node;
    while ( is_tagged_ptr(node) && is_indir_node(node) );

    /* enter the node */
    if ( is_tagged_ptr(node) )
	ENT(node);
    RET(node);
}

@
The [[eval_queueMe]] code is used when the node on the top of the
stack is a queue-me node. In this case, the current thread is
suspended until the evaluation of the corresponding application is
finished and the queue-me node is overwritten with the result.

When this code is invoked with an update frame on the top of the
stack, the queue-me node recorded in the update frame is overwritten
with an indirection to the queue-me node just entered and the update
frame is removed from the stack.

As a minor optimization, if the current thread would return to
[[stop_thread]] after the queue-me node being entered is overwritten
with its result, the current thread is terminated immediately.

<<eval.h>>=
DECLARE_LABEL(extern, eval_queueMe);

@
<<eval.c>>=
FUNCTION(eval_queueMe)
{
    Node	*susp, *susp2;
    ThreadQueue wq;
 ENTRY_LABEL(extern, eval_queueMe)
    susp = regs.r[0];
    if ( regs.ret == update )
    {
	susp2 = regs.sp[0];
	assert(is_queueMe_node(susp2));
	wq = susp2->q.wq;
#if !COPY_SEARCH_SPACE
	SAVE(susp2, n.node);
	susp2->info++;
#else
	susp2->info   = &indir_info;
#endif
	susp2->n.node = susp;

	if ( wq )
	{
	    wq = join_queues(susp->q.wq, wq);
	    if ( wq != susp->q.wq )
		SET_FIELD(susp, q.wq, wq);
	}

	regs.ret = (Label)regs.sp[1];
	regs.sp += 2;
	if ( regs.ret == stop_thread )
	    GOTO(stop_thread);
    }
    else if ( regs.ret == stop_thread )
	GOTO(stop_thread);

    SAVE_RET1(regs.r[0]);
    regs.ret = resume;
    GOTO(suspend_thread);
}

@ 
When a thread is continued, which has been suspended because of
entering a queue-me node, the node on the top of the stack has to be
dereferenced and evaluated before actually returning. The [[resume]]
code performs this task. In general, the node on the top of the stack
is in head normal form when [[resume]] is entered. However, pattern
binding updates may result in a thread being woken when this is not
the case. See [[pbUpdate]] below for a more detailed discussion.

<<eval.h>>=
DECLARE_LABEL(extern, resume);

@ 
<<eval.c>>=
FUNCTION(resume)
{
    Node *result;
 ENTRY_LABEL(extern, resume)
    result = regs.sp[0];
    for (;;)
    {
	if ( is_tagged_ptr(result) )
	    switch ( node_tag(result) )
	    {
	    case INDIR_TAG:
		result = result->n.node;
		continue;
	    case EVAL_TAG:
		ENTER(result, 1);
	    }
	break;
    }
    RETURN(result, 1);
}

@
The [[update]] code is responsible for updating a lazy application
node with the result of the application. All threads that were delayed
because they also tried to evaluate the application are woken, but the
current thread is not interrupted.

<<eval.h>>=
DECLARE_LABEL(extern, update);

@
<<eval.c>>=
FUNCTION(update)
{
    Node	*result, *susp;
    ThreadQueue wq;
 ENTRY_LABEL(extern, update)
    result = regs.r[0];
    susp   = regs.sp[0];
    assert(is_queueMe_node(susp));

    /* update the suspended application */
    TRACE(("%I %N = %N\n", susp, result));
    wq = susp->q.wq;
#if !COPY_SEARCH_SPACE
    SAVE(susp, q.wq);
    susp->info++;
#else
    susp->info	 = &indir_info;
#endif
    susp->n.node = result;

    /* wake all threads on the wait-queue of the application */
    if ( wq )
	wake_threads(wq);

    /* return to the caller */
    RETURN(regs.r[0], 1);
}

@ 
The implementation of pattern binding updates\footnote{See
  Sect.~\ref{sec:pattern-bindings}.} is based on two primitives. The
first, [[pbUpdate]], is a variant of [[update]] that expects two
arguments, a lazy application node that returns a component of the
pattern and the value of that component. Like [[update]], [[pbUpdate]]
overwrites the lazy application node with its result. However, it
returns [[Success]] and not the value of the component.

As the raison d'\^etre for the pattern binding update strategy is to %'
fix a space leak by updating all components of a pattern immediately
when one component is evaluated, [[pbUpdate]] must be prepared to
update queue-me nodes as well as unevaluated lazy application nodes.
Note that a queue-me node might be referenced via an indirection chain
due to the optimization that avoids stacking update frames (cf.\ 
[[eval_queueMe]] above).

Another difference with respect to normal updates is that pattern
variables may be bound to a value that is not in head normal form.
E.g., given the declaration
\begin{verbatim}
  (xs,ys) = splitAt 5 (replicate 10 'a')
\end{verbatim}
the pattern variable \texttt{ys} is bound to the unevaluated
application \texttt{replicate 5 'a'} when \texttt{xs} or \texttt{ys}
is evaluated. For more complicated examples where other threads can
attempt to evaluate one of the pattern variables concurrently while
the right hand side of the pattern binding is evaluated, we may
overwrite a queue-me node with (an indirection to) an unevaluated
application. We would like to avoid waking any threads blocked by the
queue-me node in that case, but, unfortunately, this is not possible
since there is no place to save the list of blocked threads.
Therefore, the [[resume]] code must be prepared to handle being woken
with a non-head normal form on the top of the stack. We can avoid
waking threads prematurely, though, when the pattern variable is bound
to a queue-me node, i.e., an expression that is already being
evaluated by some thread. In this case, it is sufficient to merge the
wait queues of both queue-me nodes. Note that it is important to
change the queue-me node belonging to the evaluation of the pattern
variable into an indirection to the other queue-me node and not vice
versa so that the thread which evaluates the other expression returns
into a valid update frame.

<<eval.h>>=
DECLARE_LABEL(extern, __pbUpdate);

@
<<eval.c>>=
FUNCTION(__pbUpdate)
{
    Node	*susp, *result;
    ThreadQueue wq;
 ENTRY_LABEL(extern, __pbUpdate)
    susp   = regs.r[0];
    result = regs.r[1];

    TRACE(("%I %N = %N\n", susp, result));
    switch ( node_kind(susp) )
    {
    case SUSPEND_KIND:
#if !COPY_SEARCH_SPACE
	if ( (word *)susp < regs.hlim )
	{
	    DO_SAVE(susp, n.node);
	    susp->info += 2;
	}
	else
#endif
	    susp->info = &indir_info;
	susp->n.node   = result;
	break;

    case INDIR_KIND:
	do
	    susp = susp->n.node;
	while ( is_indir_node(susp) );
	assert(is_queueMe_node(susp));
	/* FALL THROUGH!!! */
    case QUEUEME_KIND:
	wq = susp->q.wq;
#if !COPY_SEARCH_SPACE
	SAVE(susp, q.wq);
	susp->info++;
#else
	susp->info   = &indir_info;
#endif
	susp->n.node = result;

	/* eventually wake the suspended threads */
	if ( wq )
	{
	    if ( is_tagged_ptr(result) && is_queueMe_node(result) )
		SET_FIELD(result, q.wq, join_queues(wq, result->q.wq));
	    else
		wake_threads(wq);
	}
	break;

    default:
	invalid_arg("pbUpdate", node_kind(susp));
    }
    RET(Success);
}

@ 
The other primitive for the implementation of pattern binding updates
is [[pbReturn]]. This primitive also has two arguments. The first is
assumed to be an expression that evaluates the pattern's value, binds %'
all of its components via [[pbUpdate]], and then returns [[Success]].
The second argument is a reference to the component of the pattern
being returned. When a lazy application of [[pbReturn]] is evaluated
it expects to find an update frame for its second argument on the
stack. Because that node is supposed to be updated already during
evaluation of the first argument, the update frame is discarded and
[[pbReturn]] arranges to evaluate the extracted component to head
normal form by returning through the [[resume]] code.

\ToDo{Apparently, [[pbReturn]]'s second argument is redundant. Change
  [[pbReturn]] into a unary function.} %'

<<eval.h>>=
DECLARE_LABEL(extern, __pbReturn);

@ 
<<eval.c>>=
FUNCTION(__pbReturn)
{
 ENTRY_LABEL(extern, __pbReturn)
    if ( do_trace && regs.ret != update )
    {
	/* FIXME This is a dirty hack that swaps the low-level tracer's
	 *       return frame and the update frame. We assume here that
	 *       the tracer does not save any local state.
	 */
	Label ret_ip = regs.ret;
	regs.ret     = (Label)regs.sp[0];
	regs.sp[0]   = regs.sp[1];
	regs.sp[1]   = (Node *)ret_ip;
    }

    /* make sure this function is called from the correct update frame */
    assert(regs.ret == update);
#ifndef NDEBUG
    while ( regs.sp[0] != regs.r[1] )
    {
	assert(is_tagged_ptr(regs.r[1]) && is_indir_node(regs.r[1]));
	regs.r[1] = regs.r[1]->n.node;
    }
#endif

    /* start evaluation of the pattern */
    EVAL_NODE(resume);
}

@ 
When an unbound variable is matched in a rigid switch and when a
non-local variable is matched in a flexible switch, the running thread
is suspended until the variable is instantiated. This is handled by
the runtime system code [[sync_var]], which also ensures that the
bound variable node will be dereferenced after the thread is resumed.

<<eval.h>>=
DECLARE_LABEL(extern, sync_var);

@ 
<<eval.c>>=
FUNCTION(sync_var)
{
 ENTRY_LABEL(extern, sync_var)
    if ( is_global_var_node(regs.r[0]) )
	GOTO(sync_global);

    SAVE_RET1(regs.r[0]);
    regs.ret = resume;
    GOTO(delay_thread);
}

@ 
Unless stability is disabled, the current thread suspends before it
instantiates an unbound variable non-deterministically. After the
thread is resumed, it must check whether the variable was bound in the
meantime. In this case, execution returns to the beginning of the
switch, otherwise the variable is instantiated non-deterministically.
This check is implemented in the [[flex_yield_resume]] code, which
expects an array with the continuations that instantiate the variable,
the variable node, and the entry point of the switch in that order on
the stack.

<<eval.h>>=
#if !NO_STABILITY
DECLARE_LABEL(extern, flex_yield_resume);
#endif

@ 
<<eval.c>>=
#if !NO_STABILITY
FUNCTION(flex_yield_resume)
{
    Node *node;
 ENTRY_LABEL(extern, flex_yield_resume)
    node = regs.sp[1];
    for (;;)
    {
	if ( is_tagged_ptr(node) )
	    switch ( node->info->tag )
	    {
	    case INDIR_TAG:
		node = node->n.node;
		continue;
	    case LVAR_TAG:
		regs.sp[1] = node;
		GOTO(regs.handlers->choices);
	    }
	break;
    }
    RETURN(node, 2);
}
#endif

@ 
The unsafe primitive function \texttt{isVar} returns \texttt{True} if
its argument evaluates to an unbound variable. This function is
implemented only for compatibility with PAKCS.

<<eval.c>>=
DECLARE_LABEL(extern, __isVar);
DECLARE_LABEL(static, __isVar_1);

FUNCTION(__isVar)
{
 ENTRY_LABEL(extern, __isVar)
    SAVE_REGS(0);
    EVAL(__isVar_1);
}

static
FUNCTION(__isVar_1)
{
    Node *node, *r;
 ENTRY_LABEL(static, __isVar_1)
    node = regs.r[0];
    while ( is_tagged_ptr(node) && is_indir_node(node) )
	node = node->n.node;
    if ( is_tagged_ptr(node) && is_variable_node(node) )
	r = CONST(__Prelude__True);
    else
	r = CONST(__Prelude__False);
    RETURN(r, 0);
}

@ 
The polymorphic function \texttt{ensureGround} ensures that the normal
form of its argument is a ground data term. This is done lazily so
that \texttt{ensureGround} is semantically equivalent to
\texttt{Prelude.id} otherwise.

<<eval.c>>=
DECLARE_LABEL(extern, __ensureGround);
DECLARE_LABEL(static, __ensureGround_1);

DECLARE_LABEL(static, eval_lazy_1);

static
FUNCTION(eval_lazy_1)
{
    Node  *susp;
    Label entry;
 ENTRY_LABEL(static, eval_lazy_1)
    /* get the argument */
    susp      = regs.r[0];
    entry     = susp->info->entry;
    regs.r[0] = susp->c.args[0];

    /* create an indirection if there is an update frame immediately above */
    if ( regs.ret == update )
    {
#if !COPY_SEARCH_SPACE
	if ( (word *)susp < regs.hlim )
	{
	    DO_SAVE(susp, n.node);
	    susp->info += 2;
	}
	else
#endif
	    susp->info = &indir_info;
	assert(is_queueMe_node(regs.sp[0]));
	susp->n.node = regs.sp[0];
    }

    /* otherwise, lock the application node and create an update frame */
    else
    {
	SAVE_RET1(susp);
	regs.ret = update;

#if !COPY_SEARCH_SPACE
	if ( (word *)susp < regs.hlim )
	{
	    DO_SAVE(susp, q.wq);
	    susp->info++;
	}
	else
#endif
	    susp->info = queueMe_info_table;
	susp->q.wq = 0;
    }

    /* enter the callee */
    EXEC1(entry, regs.r[0]);
}

FUNCTION(__ensureGround)
{
 ENTRY_LABEL(extern, __ensureGround)
    C_STACK_CHECK(__ensureGround);
    TRACE_FUN("ensureGround", 1);
    SAVE_REGS(0);
    EVAL(__ensureGround_1);
}

static
FUNCTION(__ensureGround_1)
{
    bool	    is_vect;
    unsigned int    n, sz;
    Node	    *node, **argp, *susp;
    static NodeInfo ensureGround_lazy_info_table[] =
	LAZYINFO("ensureGround", __ensureGround, 1);
 ENTRY_LABEL(static, __ensureGround_1)
    MATCH_RIGID(__ensureGround_1);
    node = regs.r[0];
    if ( is_tagged_ptr(node) )
    {
	switch ( node_kind(node) )
	{
	case VECTOR_KIND:
	    is_vect = true;
	    n	    = vector_argc(node);
	    sz	    = node->a.length;
	    break;
	case CAPP_KIND:
	case EAPP_KIND:
	case PAPP_KIND:
	    is_vect = false;
	    n	    = closure_argc(node);
	    sz	    = node->info->length;
	    break;
	default:
	    is_vect = false;
	    n	    = 0;
	    sz	    = 0;
	    break;
	}

	if ( n > 0 )
	{
	    CHECK_HEAP(1, sz + n * suspend_node_size(1));

	    node = (Node *)(regs.hp + n * suspend_node_size(1));
	    memcpy(node, regs.r[0], sz * word_size);

	    for ( argp = is_vect ? node->a.args : node->c.args;
		  n > 0;
		  argp++, n-- )
	    {
		susp		= (Node *)regs.hp;
		susp->info	= ensureGround_lazy_info_table;
		susp->c.args[0]	= *argp;
		regs.hp	       += suspend_node_size(1);

		*argp = susp;
	    }

	    assert((Node *)regs.hp == node);
	    regs.hp += sz;
	}
    }

    RETURN(node, 0);
}
