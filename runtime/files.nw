% -*- noweb-code-mode: c-mode -*-
% $Id: files.nw 2351 2007-06-23 11:07:54Z wlux $
%
% Copyright (c) 2001-2007, Wolfgang Lux
% See ../LICENSE for the full license.
%
\subsection{Files}
The functions in this file implement the primitive monadic actions
that read from and write to files and streams. This module has an
initialization function that initializes the standard channels and
optionally changes the buffer mode for standard input and standard
output. Pass [[-1]] as first argument to [[init_files]] in order to
use the default buffer mode.

<<files.h>>=
extern void init_files(int, long);

@ 
<<files.c>>=
#include "config.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>
#include <errno.h>
#include <unistd.h>
#if HAVE_VFORK_H
# include <vfork.h>
#endif
#include <netdb.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/wait.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include "debug.h"
#include "run.h"
#include "regs.h"
#include "heap.h"
#include "stack.h"
#include "threads.h"
#include "spaces.h"
#include "search.h"
#include "trail.h"
#include "eval.h"
#include "data.h"
#include "cstring.h"
#include "cam.h"
#include "io_monad.h"
#include "files.h"
#include "trace.h"

#if !HAVE_WORKING_VFORK
# define vfork fork
#endif

@ 
Files are implemented as finalized objects so that a file is
closed automatically when it becomes garbage. A file node comprises
its (C) file pointer, a set of flags, and an optional buffer. At
present, two flag bits are used which are set when the file is
readable and writable, respectively. When a file is closed, both bits
are cleared and the file pointer is set to [[0]]. The file is in a
semi-closed state when the readable and writable bits are cleared, but
the file pointer is not [[0]]. This is used for file handles to which
[[hGetContents]] has been applied.

When a file handle that is connected to a process is finalized, the
runtime system tries to read its termination status in order to not
leave zombie processes around. Since the garbage collection should not
be blocked until the process really terminates, [[finalize_process]]
calls [[waitpid]] with the [[WNOHANG]] flag. For the same reason, we
do not call [[pclose]] for the file handle in [[finalize_process]]
if the process handle was opened with [[popen]].

<<files.c>>=
enum file_flags { readable, writable };
#define mask(flag) (1<<(flag))

enum { FILE_TAG, PROCESS_TAG };

#define file_node_size wordsof(Handle)
typedef struct file_node {
    NodeInfo *info;
    FILE     *fp;
    short    flags;
    short    bmode;
    long     bsize;
    char     *buffer;
} Handle;

#define process_node_size wordsof(ProcessHandle)
typedef struct process_node {
    NodeInfo *info;
    FILE     *fp;
    short    flags;
    short    bmode;
    long     bsize;
    char     *buffer;
#if HAVE_WORKING_FORK || HAVE_WORKING_VFORK
    pid_t    pid;
#endif
    int	     status;
} ProcessHandle;

#define is_open(file)	  ((file)->flags & (mask(readable) | mask(writable)))
#define is_readable(file) ((file)->flags & mask(readable))
#define is_writable(file) ((file)->flags & mask(writable))

static void close_handle(Handle *file);
static void finalize_file(Node *node);
#if HAVE_WORKING_FORK || HAVE_WORKING_VFORK
static void finalize_process(Node *node);
#else
# define finalize_process finalize_file
#endif

static NodeInfo file_info = {
    ABSTRACT_KIND, FILE_TAG, file_node_size, ot_binary, "<Handle>",
    eval_whnf, 0, 0, finalize_file
};

static NodeInfo process_info = {
    ABSTRACT_KIND, PROCESS_TAG, process_node_size, ot_binary, "<ProcessHandle>",
    eval_whnf, 0, 0, finalize_process
};

static void
close_handle(Handle *file)
{
    if ( file->fp )
    {
	fclose(file->fp);
	file->fp    = NULL;
	file->flags = 0;
	if ( file->buffer )
	    free(file->buffer);
    }
}

static void
finalize_file(Node *file)
{
    close_handle((Handle *)file);
}

#ifndef finalize_process
static void
finalize_process(Node *node)
{
    ProcessHandle *proc = (ProcessHandle *)node;

    finalize_file(node);
    if ( proc->pid )
	waitpid(proc->pid, &proc->status, WNOHANG);
}
#endif

@ 
Two file \verb|Handle|s are considered equal, if they are physically
the same.

<<files.h>>=
extern Node *primEqHandle(Node *, Node *);

@ 
<<files.c>>=
DECLARE_CONST(__Prelude__False);
DECLARE_CONST(__Prelude__True);

#define Prelude_False CONST(__Prelude__False)
#define Prelude_True  CONST(__Prelude__True)

Node *
primEqHandle(Node *x, Node *y)
{
    return x == y ? Prelude_True : Prelude_False;
}

@ 
The functions [[primStdin]], [[primStdout]], and [[primStderr]] return
predefined handles for the standard file channels. The nodes are
allocated statically in the runtime system. However, the file pointers
of these nodes cannot be initialized statically because under Linux --
in contrast to most other operating systems -- the standard file
pointers are not declared as pointers into a static array of file
descriptors, but as global variables.

Note that we assume that the standard error channel is always
unbuffered, whereas the setting of the standard input and output
channels is not known -- unless it is changed in [[init_files]].

<<files.h>>=
extern Node *primStdin(void);
extern Node *primStdout(void);
extern Node *primStderr(void);

@ 
<<files.c>>=
static Handle stdin_node = {
    &file_info, NULL, mask(readable), -1, 0, NULL
};
static Handle stdout_node = {
    &file_info, NULL, mask(writable), -1, 0, NULL
};
static Handle stderr_node = {
    &file_info, NULL, mask(writable), _IONBF, 0, NULL
};

Node *
primStdin()
{
    return (Node *)&stdin_node;
}

Node *
primStdout()
{
    return (Node *)&stdout_node;
}

Node *
primStderr()
{
    return (Node *)&stderr_node;
}

@
The function [[primOpenFile]] opens a file with the specified file
name and access mode. Files can be opened for reading, writing, and
with read-write access, respectively. The file access mode is
specified using a constant from the type \texttt{IOMode} that is
declared as follows in library module \texttt{IO}.
\begin{verbatim}
  data IOMode = ReadMode | WriteMode | AppendMode | ReadWriteMode
\end{verbatim}

\ToDo{\texttt{openFile} should implement the
single-writer/multiple-reader locking semantics mandated by the
Haskell library report.}

<<files.h>>=
extern Node *primOpenFile(Node *, Node *);

@ 
<<files.c>>=
enum {
    ReadMode_tag,
    WriteMode_tag,
    AppendMode_tag,
    ReadWriteMode_tag
};

static const char *
decodeIOMode(Node *ioMode, short *p_flags)
{
    switch ( node_tag(ioMode) )
    {
    case ReadMode_tag:
	*p_flags = mask(readable);
	return "r";
    case WriteMode_tag:
	*p_flags = mask(writable);
	return "w";
    case AppendMode_tag:
	*p_flags = mask(writable);
	return "a";
    case ReadWriteMode_tag:
	*p_flags = mask(readable) | mask(writable);
	return "r+";
    default:
	unexpected_tag("decodeIOMode", node_tag(ioMode));
    }
}

Node *
primOpenFile(Node *fileName, Node *ioMode)
{
    const char *fn, *mode;
    short      flags;
    FILE       *fp;
    Handle     *file;

    /* open the file */
    mode = decodeIOMode(ioMode, &flags);
    fn	 = to_string(fileName);
    fp	 = fopen(fn, mode);
    free((char *)fn);
    if ( fp == NULL )
	/* FIXME: Should include the file name in the error message.
	 *        However, passing fn to ioError_withErrno is not possible
	 *        since ioError_withErrno does not return and thus fn would
	 *        leak. Might use a static buffer and only include a prefix
	 *        of the full file name in the error message though.
	 */
	ioError_withErrno("openFile");

    /* create the file node */
    CHECK_HEAP(0, file_node_size);
    file	 = (Handle *)regs.hp;
    file->info	 = &file_info;
    file->fp	 = fp;
    file->flags  = flags;
    file->bmode  = -1;
    file->bsize  = 0;
    file->buffer = NULL;
    regs.hp	+= file_node_size;
    register_final((Node *)file);

    /* return the file */
    return (Node *)file;
}

@ 
The function [[primOpenFd]] is a variant of [[primOpenFile]] that
creates a new file node for a file descriptor.

<<files.h>>=
extern Node *primOpenFd(Node *, Node *);

@ 
<<files.c>>=
Node *
primOpenFd(Node *fd, Node *ioMode)
{
    const char *mode;
    short      flags;
    FILE       *fp;
    Handle     *file;

    /* open the file */
    mode = decodeIOMode(ioMode, &flags);
    fp	 = fdopen(long_val(fd), mode);
    if ( fp == NULL )
	ioError_withErrno("openFd");

    /* create the file node */
    CHECK_HEAP(0, file_node_size);
    file	 = (Handle *)regs.hp;
    file->info	 = &file_info;
    file->fp	 = fp;
    file->flags  = flags;
    file->bmode  = -1;
    file->bsize  = 0;
    file->buffer = NULL;
    regs.hp	+= file_node_size;
    register_final((Node *)file);

    /* return the file */
    return (Node *)file;
}

@
The function [[primHClose]] closes a file handle. Calling
[[primHClose]] for a closed file handle has no effect.

<<files.h>>=
extern void primHClose(Node *);

@ 
<<files.c>>=
void
primHClose(Node *hdl)
{
    close_handle((Handle *)hdl);
}

@
The predicates [[primHIsOpen]] and [[primHIsClosed]] test whether a
file handle is open and closed, respectively. Note that for a
semi-closed handle neither of these predicates returns [[True]]. The
predicates [[primHIsReadable]], [[primHIsWritable]], and
[[primHIsSeekable]] test whether the handle is readable, writable, and
seekable, respectively.

<<files.h>>=
extern Node *primHIsOpen(Node *);
extern Node *primHIsClosed(Node *);
extern Node *primHIsReadable(Node *);
extern Node *primHIsWritable(Node *);
extern Node *primHIsSeekable(Node *);

@ 
<<files.c>>=
Node *
primHIsOpen(Node *hdl)
{
    return is_open((Handle *)hdl) ? Prelude_True : Prelude_False;
}

Node *
primHIsClosed(Node *hdl)
{
    return ((Handle *)hdl)->fp == NULL ? Prelude_True : Prelude_False;
}

Node *
primHIsReadable(Node *hdl)
{
    return is_readable((Handle *)hdl) ? Prelude_True : Prelude_False;
}

Node *
primHIsWritable(Node *hdl)
{
    return is_writable((Handle *)hdl) ? Prelude_True : Prelude_False;
}

Node *
primHIsSeekable(Node *hdl)
{
    Handle *file = (Handle *)hdl;

    if ( is_open(file) )
    {
	if ( ftell(file->fp) != - 1 )
	    return Prelude_True;
	clearerr(file->fp);
    }
    return Prelude_False;
}

@
The predicate [[primHIsEOF]] returns whether all of the specified file
has been read, i.e., whether the next call to [[primHGetChar]] for the
handle will raise an end-of-file exception.

Note that the semantics of [[primHIsEOF]] is different from the C
semantics. Whereas [[primHIsEOF]] returns [[True]] after the last
character of the file has been read, the C library sets the
end-of-file condition only after reading the end-of-file character.
Therefore, our implementation reads the next character from the file
and puts it back with [[ungetc]]. Unfortunately, this may block the
program until the next character is available.

<<files.h>>=
extern Node *primHIsEOF(Node *);

@ 
<<files.c>>=
Node *
primHIsEOF(Node *hdl)
{
    int	   c;
    Handle *file = (Handle *)hdl;

    if ( !is_readable(file) )
	ioError("hIsEOF", "Handle not readable");

    assert(file->fp != NULL);
    c = getc(file->fp);
    if ( c == EOF && ferror(file->fp) )
	ioError_withErrno("hIsEOF");
    ungetc(c, file->fp);

    return c == EOF ? Prelude_True : Prelude_False;
}

@ 
The function [[primHGetChar]] reads a single character from the
specified input handle. The function raises an end-of-file exception
when reading beyond the last character of the input. An access
exception is reported when the handle is not open for reading. Note
that this also happens when the handle is in a semi-closed state after
[[primHGetContents]] has been applied to it.

<<files.h>>=
extern Node *primHGetChar(Node *);

@ 
<<files.c>>=
Node *
primHGetChar(Node *hdl)
{
    int	   c;
    Handle *file = (Handle *)hdl;

    if ( !is_readable(file) )
	ioError("hGetChar", "Handle not readable");

    assert(file->fp != NULL);
    c = getc(file->fp);
    if ( c == EOF )
    {
	if ( feof(file->fp) )
	    ioError("hGetChar", "End of file");
	else
	    ioError_withErrno("hGetChar");
    }

#if NO_POINTER_TAGS
    return (Node *)(char_table + (c & 0xff));
#else
    return tag_char(c & 0xff);
#endif
}

@
The function [[primHLookAhead]] returns the next character from the
input file without removing it from the input stream.

<<files.h>>=
extern Node *primHLookAhead(Node *);

@ 
<<files.c>>=
Node *
primHLookAhead(Node *hdl)
{
    int	   c;
    Handle *file = (Handle *)hdl;

    if ( !is_readable(file) )
	ioError("hLookAhead", "Handle not readable");

    assert(file->fp != NULL);
    c = getc(file->fp);
    if ( c == EOF )
    {
	if ( feof(file->fp) )
	    ioError("hLookAhead", "End of file");
	else
	    ioError_withErrno("hLookAhead");
    }
    ungetc(c, file->fp);

#if NO_POINTER_TAGS
    return (Node *)(char_table + (c & 0xff));
#else
    return tag_char(c & 0xff);
#endif
}

@
The function [[primHGetLine]] reads a single line from the specified
handle. We implement this function in the runtime system instead of
defining it in terms of [[primHIsEOF]] and [[primHGetChar]] because
this allows for a more efficient implementation using the [[fgets]]
function. Note that [[fgets]] retains a newline character in the input
buffer; we have to remove it before converting the string. If no
newline has been read, we continue to read more characters from the
standard input until reaching either the end of the file or reading a
newline character.

Concatenation of the line segments is a little bit tricky. We do not
use the \texttt{(++)} operator from the prelude in order to avoid the
quadratic complexity introduced by it when constructing the string
from left to right. Instead we use an indirection node at the end of
each segment and set its pointer after reading the next segment. Note
that this destructive update does not have to be trailed because
[[primHGetLine]] is an atomic action with respect to the Curry runtime
system.

<<files.h>>=
extern Node *primHGetLine(Node *);

@ 
<<files.c>>=
Node *
primHGetLine(Node *hdl)
{
    char buf[256], *cp;
    Node *start, *line, *tail, *cont;
    FILE *fp;

    if ( !is_readable((Handle *)hdl) )
	ioError("hGetLine", "Handle not readable");

    fp = ((Handle *)hdl)->fp;
    assert(fp != NULL);
    if ( !fgets(buf, sizeof(buf), fp) )
    {
	if ( feof(fp) )
	    ioError("hGetLine", "End of file");
	else
	    ioError_withErrno("hGetLine");
    }

    /* NB the file handle node is not used in the loop below; nevertheless,
     *    it is made a local root so that the file is not closed by the
     *    garbage collector while we are reading from it.
     */
    BEGIN_LOCAL_ROOTS4(hdl, start, tail, cont)
    start = nil;
    tail  = cont = 0;
    do
    {
	for ( cp = buf; *cp != '\n' && *cp != '\0'; cp++ )
	    ;

	if ( *cp == '\n' )
	{
	    *cp  = '\0';
	    cont = nil;
	}
	else
	{
	    CHECK_HEAP(0, indir_node_size);
	    cont	 = (Node *)regs.hp;
	    cont->info	 = &indir_info;
#if !COPY_SEARCH_SPACE
	    cont->n.spc	 = regs.ss;
#endif
	    cont->n.node = nil;
	    regs.hp	+= indir_node_size;
	}

	line = prefix_string(0, buf, cont);
	if ( start == nil )
	    start = line;
	else
	    tail->n.node = line;
	tail = cont;
    } while ( tail != nil && fgets(buf, sizeof(buf), fp) );
    END_LOCAL_ROOTS

    return start;
}

@ 
The function [[primHGetContents]] returns the contents of the
specified file as a lazy stream. The handle is put into a semi-closed
state by setting the flags to [[0]]. The character stream is
constructed on demand with the help of the [[lazyRead]] function.

An alert reader might be surprised that [[primHGetContents]] returns a
suspended application node. However, recall that this node should be
considered the first component of a pair composed of a result and the
state of the world. From these, only the result is really returned
because the representation of the world would be a simple constant
(cf. p.~\pageref{eq:monadic-io} in Sect.~\ref{sec:io-monad}).

<<files.h>>=
extern Node *primHGetContents(Node *);

@ 
<<files.c>>=
DECLARE_LABEL(static, eval_lazy_1);
DECLARE_LABEL(static, lazyRead);

static NodeInfo lazyRead_lazy_info_table[] = LAZYINFO("lazyRead", lazyRead, 1);

static
FUNCTION(eval_lazy_1)
{
    Node  *susp, *x;
    Label entry;
 ENTRY_LABEL(static, eval_lazy_1)
    /* suspend the search if the node is not local */
    if ( !is_local_space(regs.r[0]->s.spc) )
	suspend_search(1, regs.r[0]->s.spc);

    /* get the argument */
    susp  = regs.r[0];
    entry = susp->info->entry;
    x	  = susp->s.args[0];

    /* create an indirection if there is an update frame immediately above */
    if ( regs.ret == update )
    {
#if !COPY_SEARCH_SPACE
	if ( (word *)susp < regs.hlim )
	{
	    DO_SAVE(susp, n.node);
	    susp->info += 2;
	}
	else
#endif
	    susp->info = &indir_info;
	assert(is_queueMe_node(regs.sp[0]));
	susp->n.node = regs.sp[0];
    }

    /* otherwise, lock the application node and create an update frame */
    else
    {
	SAVE_RET1(susp);
	regs.ret = update;

#if !COPY_SEARCH_SPACE
	if ( (word *)susp < regs.hlim )
	{
	    DO_SAVE(susp, q.wq);
	    susp->info++;
	}
	else
#endif
	    susp->info = queueMe_info_table;
	susp->q.wq = 0;
    }

    /* enter the callee */
    EXEC1(entry, x);
}

static
FUNCTION(lazyRead)
{
    int	   c;
    Node   *list, *tail;
    Handle *file;
 ENTRY_LABEL(static, lazyRead)
    TRACE_FUN("lazyRead", 1);

    file = (Handle *)regs.r[0];
    if ( file->fp == NULL )
	list = nil;
    else
    {
	c = fgetc(file->fp);
	if ( c == EOF )
	{
	    close_handle(file);
	    list = nil;
	}
	else
	{
	    CHECK_HEAP(1, suspend_node_size(1) + cons_node_size);

	    tail	    = (Node *)regs.hp;
	    tail->info	    = lazyRead_lazy_info_table;
	    tail->s.spc	    = regs.ss;
	    tail->s.args[0] = regs.r[0];
	    regs.hp	   += suspend_node_size(1);

	    list	    = (Node *)regs.hp;
	    list->info	    = &cons_info;
#if NO_POINTER_TAGS
	    list->c.args[0] = (Node *)(char_table + (c & 0xff));
#else
	    list->c.args[0] = tag_char(c & 0xff);
#endif
	    list->c.args[1] = tail;
	    regs.hp	   += cons_node_size;
	}
    }

    RET(list);
}

Node *
primHGetContents(Node *hdl)
{
    Node   *susp;
    Handle *file = (Handle *)hdl;

    /* put the file into a semi-closed state */
    if ( !is_readable(file) )
	ioError("hGetContents", "Handle not readable");
    file->flags = 0;

    /* construct the (lazy) input stream */
    BEGIN_LOCAL_ROOTS1(hdl)
    CHECK_HEAP(0, suspend_node_size(1));
    susp	    = (Node *)regs.hp;
    susp->info	    = lazyRead_lazy_info_table;
    susp->s.spc	    = regs.ss;
    susp->s.args[0] = hdl;
    regs.hp	   += suspend_node_size(1);
    END_LOCAL_ROOTS

    return susp;
}

@
The function [[primHPutChar]] writes a single character to the
specified handle.

<<files.h>>=
extern void primHPutChar(Node *, Node *);

@ 
<<files.c>>=
void
primHPutChar(Node *hdl, Node *chr)
{
    Handle *file = (Handle *)hdl;

    if ( !is_writable(file) )
	ioError("hPutChar", "Handle not writable");

    assert(file->fp != NULL);
    if ( putc(char_val(chr), file->fp) == EOF )
	ioError_withErrno("hPutChar");
}

@
The function [[primHFileSize]] returns the size of a file in bytes,
provided that the file is seekable.

<<files.h>>=
extern Node *primHFileSize(Node *);

@ 
<<files.c>>=
Node *
primHFileSize(Node *hdl)
{
    long   curpos, endpos;
    Node   *r;
    Handle *file = (Handle *)hdl;

    if ( !is_open(file) )
	ioError("hFileSize", "Handle not open");

    assert(file->fp != NULL);
    curpos = ftell(file->fp);
    if ( curpos == -1 || fseek(file->fp, 0, SEEK_END) == -1 )
	ioError_withErrno("hFileSize");

    endpos = ftell(file->fp);
    if ( endpos == -1 || fseek(file->fp, curpos, SEEK_SET) == -1 )
	ioError_withErrno("hFileSize");

#if !NO_POINTER_TAGS
    if ( !is_large_int(endpos) )
	r = tag_int(endpos);
    else
#endif
    {
	CHECK_HEAP(0, int_node_size);
	r	 = (Node *)regs.hp;
	r->info	 = &int_info;
	r->i.i	 = endpos;
	regs.hp	+= int_node_size;
    }

    return r;
}

@
The function [[primHIsTerminalDevice]] returns [[True]] if the
specified handle is connected to a terminal and [[False]] otherwise.
We use the [[isatty]] function for testing this property.

<<files.h>>=
extern Node *primHIsTerminalDevice(Node *);

@ 
<<files.c>>=
Node *
primHIsTerminalDevice(Node *hdl)
{
    Handle *file = (Handle *)hdl;

    if ( !is_open(file) )
	ioError("hIsTerminalDevice", "Handle not open");

    assert(file->fp != NULL);
    return isatty(fileno(file->fp)) ? Prelude_True : Prelude_False;
}

@
The function [[primHGetBuffering]] returns the buffering mode used for
the given file handle. Unfortunately, there is no portable way to
determine the buffering mode used for a file handle. Therefore, the
mode is saved in the file structure when [[primHSetBuffering]] is
called (see below). The initial buffering mode is determined by
checking whether the file is connected to a terminal or to a file. In
the former case we assume that line buffering is used, otherwise block
buffering is assumed.

The buffer mode is returned as an instance of the type
\texttt{BufferMode} declared in module \texttt{IO} as follows.
\begin{verbatim}
  data BufferMode = NoBuffering | LineBuffering | BlockBuffering (Maybe Int)
\end{verbatim}

<<files.h>>=
extern Node *primHGetBuffering(Node *);

@ 
<<files.c>>=
enum { Nothing_tag, Just_tag };
DECLARE_CONST(__Prelude__Nothing);
DECLARE_DATA(__Prelude__Just);

enum { NoBuffering_tag, LineBuffering_tag, BlockBuffering_tag };
DECLARE_CONST(__IO__NoBuffering);
DECLARE_CONST(__IO__LineBuffering);
DECLARE_DATA(__IO__BlockBuffering);

Node *
primHGetBuffering(Node *hdl)
{
    short  bmode;
    long   bsize;
    Node   *size, *r;
    Handle *file = (Handle *)hdl;

    if ( !is_open(file) )
	ioError("hGetBuffering", "Handle not open");

    assert(file->fp != NULL);
    for (;;)
    {
	bmode = file->bmode;
	bsize = file->bsize;
	switch ( bmode )
	{
	case -1:
	    file->bmode = isatty(fileno(file->fp)) ? _IOLBF : _IOFBF;
	    continue;
	case _IONBF:
	    r = CONST(__IO__NoBuffering);
	    break;
	case _IOLBF:
	    r = CONST(__IO__LineBuffering);
	    break;
	case _IOFBF:
	    CHECK_HEAP(0, int_node_size + 2 * closure_node_size(1));
	    if ( bsize )
	    {
#if !NO_POINTER_TAGS
		if ( !is_large_int(bsize) )
		    r = tag_int(bsize);
		else
#endif
		{
		    r	     = (Node *)regs.hp;
		    r->info  = &int_info;
		    r->i.i   = bsize;
		    regs.hp += int_node_size;
		}

		size		= (Node *)regs.hp;
		size->info	= INFO(__Prelude__Just);
		size->c.args[0] = r;
		regs.hp	       += closure_node_size(1);
	    }
	    else
		size = CONST(__Prelude__Nothing);

	    r		 = (Node *)regs.hp;
	    r->info	 = INFO(__IO__BlockBuffering);
	    r->c.args[0] = size;
	    regs.hp	+= closure_node_size(1);
	    break;
	default:
	    curry_panic("hGetBuffering: invalid buffer mode %d\n", bmode);
	}
	break;
    }

    return r;
}

@
The function [[primHSetBuffering]] changes the current buffering mode
of a file handle.

<<files.h>>=
extern void primHSetBuffering(Node *, Node *);

@ 
<<files.c>>=
void
primHSetBuffering(Node *hdl, Node *bufferMode)
{
    short  bmode;
    long   bsize   = 0;
    char   *buffer = NULL;
    Handle *file   = (Handle *)hdl;

    if ( !is_open(file) )
	ioError("hSetBuffering", "Handle not open");

    switch ( node_tag(bufferMode) )
    {
    case NoBuffering_tag:
	bmode = _IONBF;
	break;
    case LineBuffering_tag:
	bmode = _IOLBF;
	break;
    case BlockBuffering_tag:
	bmode	   = _IOFBF;
	bufferMode = bufferMode->c.args[0];
	while ( is_indir_node(bufferMode) )
	    bufferMode = bufferMode->n.node;
	switch ( node_tag(bufferMode) )
	{
	case Nothing_tag:
	    break;
	case Just_tag:
	    bufferMode = bufferMode->c.args[0];
	    while ( is_tagged_ptr(bufferMode) && is_indir_node(bufferMode) )
		bufferMode = bufferMode->n.node;
	    bsize = long_val(bufferMode);
	    if ( bsize > 0 )
	    {
		buffer = (char *)malloc(bsize);
		if ( buffer == NULL )
		    sys_error("hSetBuffering");
	    }
	    break;
	default:
	    unexpected_tag("hSetBuffering (mode)", node_tag(bufferMode));
	}
	break;
    default:
	unexpected_tag("hSetBuffering", node_tag(bufferMode));
    }

    assert(file->fp != NULL);
    if ( setvbuf(file->fp, buffer, bmode, bsize) == -1 )
    {
	int e = errno;
	free(buffer);
	errno = e;
	ioError_withErrno("hSetBuffering");
    }
    file->bmode = bmode;
    file->bsize = bsize;
    if ( file->buffer )
	free(file->buffer);
    file->buffer = buffer;
}

@
The function [[primHFlush]] flushes the output buffer associated with
the specified handle.

<<files.h>>=
extern void primHFlush(Node *);

@ 
<<files.c>>=
void
primHFlush(Node *hdl)
{
    Handle *file = (Handle *)hdl;

    if ( !is_writable(file) )
	ioError("hFlush", "Handle not writable");
    assert(file->fp != NULL);
    if ( fflush(file->fp) == -1 )
	ioError_withErrno("hFlush");
}

@
The function [[primHTell]] returns the current I/O position of the
file associated with the specified handle.

<<files.h>>=
extern Node *primHTell(Node *);

@ 
<<files.c>>=
Node *
primHTell(Node *hdl)
{
    long   curpos;
    Node   *r;
    Handle *file = (Handle *)hdl;

    if ( !is_open(file) )
	ioError("hTell", "Handle not open");
    assert(file->fp != NULL);
    curpos = ftell(file->fp);
    if ( curpos == -1 )
	ioError_withErrno("hTell");

#if !NO_POINTER_TAGS
    if ( !is_large_int(curpos) )
	r = tag_int(curpos);
    else
#endif
    {
	CHECK_HEAP(0, int_node_size);
	r	 = (Node *)regs.hp;
	r->info	 = &int_info;
	r->i.i	 = curpos;
	regs.hp += int_node_size;
    }

    return r;
}

@
The function [[primHSeek]] sets the I/O position of the specified
handle to a new position. The second argument determines how the
offset (the third argument) is interpreted. It must be a constant from
the type \texttt{SeekMode} defined in the module \texttt{IO} as
follows.
\begin{verbatim}
  data SeekMode = AbsoluteSeek | RelativeSeek | SeekFromEnd
\end{verbatim}

<<files.h>>=
extern void primHSeek(Node *, Node *, Node *);

@ 
<<files.c>>=
enum { AbsoluteSeek_tag, RelativeSeek_tag, SeekFromEnd_tag };

void
primHSeek(Node *hdl, Node *seekMode, Node *offset)
{
    int	   smode;
    Handle *file = (Handle *)hdl;

    if ( !is_open(file) )
	ioError("hSeek", "Handle not open");

    switch ( node_tag(seekMode) )
    {
    case AbsoluteSeek_tag:
	smode = SEEK_SET;
	break;
    case RelativeSeek_tag:
	smode = SEEK_CUR;
	break;
    case SeekFromEnd_tag:
	smode = SEEK_END;
	break;
    default:
	unexpected_tag("hSeek (mode)", node_tag(seekMode));
    }

    assert(file->fp != NULL);
    if ( fseek(file->fp, long_val(offset), smode) == -1 )
	ioError_withErrno("hSeek");
}

@ 
The function [[primOpenProcess]] executes a shell command and returns
a file descriptor connected to the standard input and output of the
subprocess. We try to avoid using [[popen]] as opening a process for
both reading and writing is a non-portable extension.

<<files.h>>=
extern Node *primOpenProcess(Node *, Node *);

@ 
<<files.c>>=
Node *
primOpenProcess(Node *cmdString, Node *ioMode)
{
    short	  flags;
    const char	  *cmd, *mode;
    FILE	  *fp;
    ProcessHandle *proc;
#if HAVE_WORKING_FORK || HAVE_WORKING_VFORK
    int		  r, fds[2];
    pid_t	  pid;
#endif

    /* determine the command and access mode */
    cmd	 = to_string(cmdString);
    mode = decodeIOMode(ioMode, &flags);

#if HAVE_WORKING_FORK || HAVE_WORKING_VFORK
    /* depending on the access mode create either a pipe or a socket pair */
    if ( flags == (mask(readable) | mask(writable)) )
	r = socketpair(AF_UNIX, SOCK_STREAM, 0, fds);
    else
	r = pipe(fds);
    if ( r == -1 )
	ioError_withErrno("openProcess");

    /* start a new process for the command */
    pid = vfork();
    switch ( pid )
    {
    case 0:
	/* set up appropriate connections in the child process */
	/* NB when a pipe is used (i.e., read-only or write-only
	 *    connection), the appropriate end of the pipe is used;
	 *    otherwise (i.e., read-write connection), we arbitrarily
	 *    choose the second descriptor of the socket pair. */
	if ( flags == mask(readable) )
	    dup2(fds[1], 1);
	else if ( flags == mask(writable) )
	    dup2(fds[0], 0);
	else
	{
	    dup2(fds[1], 0);
	    dup2(fds[1], 1);
	}

	/* close the pipe/socketpair handles */
	close(fds[0]);
	close(fds[1]);

	/* start the child process */
	execl("/bin/sh", "sh", "-c", cmd, (char *)0);
	_exit(1);
    case -1:
    {
	int e = errno;
	close(fds[0]);
	close(fds[1]);
	errno = e;
	ioError_withErrno("openProcess");
    }
    default:
	free((char *)cmd);
	break;
    }

    /* close the unused descriptor */
    if ( flags == mask(writable) )
    {
	close(fds[0]);
	fds[0] = fds[1];
    }
    else
	close(fds[1]);

    /* create a file for the pipe/socketpair */
    fp = fdopen(fds[0], mode);
    if ( fp == NULL )
    {
	int e = errno;
	close(fds[0]);
	errno = e;
	ioError_withErrno("openProcess");
    }
#elif HAVE_POPEN
    /* start a new process for the command */
    fp = popen(cmd, mode);
    if ( fp == NULL )
	ioError_withErrno("openProcess");
#else
    /* report an error */
    fp = NULL;
    ioError("openProcess", "not supported");
#endif

    /* create the process node */
    CHECK_HEAP(0, process_node_size);
    proc	 = (ProcessHandle *)regs.hp;
    proc->info	 = &process_info;
    proc->fp	 = fp;
    proc->flags  = flags;
    proc->bmode  = _IOFBF;
    proc->bsize	 = 0;
    proc->buffer = NULL;
#if HAVE_WORKING_FORK || HAVE_WORKING_VFORK
    proc->pid	 = pid;
#endif
    proc->status = 0;
    regs.hp	+= process_node_size;
    register_final((Node *)proc);

    /* return the process node */
    return (Node *)proc;
}

@ 
The function [[primPClose]] closes the connection to a process and
returns its termination status. This function raises an IO error when
it is applied to a handle that is not connected to a process. However,
it is safe to call [[primPClose]] more than once for a handle that was
created by [[primOpenProcess]].

<<files.h>>=
extern Node *primPClose(Node *);

@ 
<<files.c>>=
Node *
primPClose(Node *hdl)
{
    int		  res;
    Node	  *r;
    ProcessHandle *proc = (ProcessHandle *)hdl;

    if ( proc->info != &process_info )
	ioError("pClose", "Handle not connected to a process");

    if ( proc->fp )
    {
#if !HAVE_WORKING_FORK && !HAVE_WORKING_VFORK && HAVE_POPEN
	proc->status = pclose(proc->fp);
#else
	fclose(proc->fp);
#endif
	proc->fp    = NULL;
	proc->flags = 0;
	if ( proc->buffer )
	    free(proc->buffer);
    }
#if HAVE_WORKING_FORK || HAVE_WORKING_VFORK
    if ( proc->pid )
    {
	waitpid(proc->pid, &proc->status, 0);
	proc->pid = 0;
    }
#endif

    if ( WIFSIGNALED(proc->status) )
	res = -WTERMSIG(proc->status);
    else
    {
	assert(WIFEXITED(proc->status));
	res = WEXITSTATUS(proc->status);
    }

#if !NO_POINTER_TAGS
    if ( !is_large_int(res) )
	r = tag_int((long)res);
    else
#endif
    {
	CHECK_HEAP(0, int_node_size);
	r	 = (Node *)regs.hp;
	r->info	 = &int_info;
	r->i.i	 = res;
	regs.hp += int_node_size;
    }

    return r;
}

@ 
The function [[primConnectTcpSocket]] creates a socket that is
connected to a specified port at a given host.

<<files.h>>=
extern Node *primConnectTcpSocket(Node *, Node *, Node *);

@ 
<<files.c>>=
Node *
primConnectTcpSocket(Node *hostString, Node *port, Node *ioMode)
{
    int		       fd;
    short	       flags;
    const char	       *host, *mode;
    FILE	       *fp;
    Handle	       *sock;
    struct hostent     *hostent;
    struct sockaddr_in addr;

    /* determine the access mode */
    mode = decodeIOMode(ioMode, &flags);

    /* setup the socket address structure */
    host	    = to_string(hostString);
    hostent	    = gethostbyname(host);
    addr.sin_family = AF_INET;
    addr.sin_port   = htons(long_val(port));
    if ( hostent )
	addr.sin_addr.s_addr = *(unsigned long *)hostent->h_addr_list[0];
    else if ( (addr.sin_addr.s_addr = inet_addr(host)) == (in_addr_t)~0 )
    {
	free((char *)host);
	ioError("connectTcpSocket", "Unknown host");
    }
    free((char *)host);

    /* create a new socket */
    fd = socket(AF_INET, SOCK_STREAM, 0);
    if ( fd < 0 )
	ioError_withErrno("connectTcpSocket");

    /* connect the socket to the specified port */
    if ( connect(fd, (struct sockaddr *)&addr, sizeof(struct sockaddr_in)) < 0 )
    {
	int e = errno;
	close(fd);
	errno = e;
	ioError_withErrno("connectTcpSocket");
    }

    /* create a file for the scoket */
    fp = fdopen(fd, mode);
    if ( fp == NULL )
    {
	int e = errno;
	close(fd);
	errno = e;
	ioError_withErrno("connectTcpSocket");
    }

    /* create the file node */
    CHECK_HEAP(0, file_node_size);
    sock	 = (Handle *)regs.hp;
    sock->info	 = &file_info;
    sock->fp	 = fp;
    sock->flags  = flags;
    sock->bmode  = _IOFBF;
    sock->bsize	 = 0;
    sock->buffer = NULL;
    regs.hp	+= file_node_size;
    register_final((Node *)sock);

    /* return the socket */
    return (Node *)sock;
}

@
The function [[init_files]] initializes the standard channels and
optionally changes the buffer mode for standard input and output.

<<files.c>>=
void
init_files(int bmode, long bsize)
{
    char *buffer;

    /* set up the standard file pointers */
    stdin_node.fp = stdin;
    stdout_node.fp = stdout;
    stderr_node.fp = stderr;

    /* eventually change buffer modes for standard input and output */
    if ( bmode != -1 )
    {
	/* don't allocate buffers if the file is not fully buffered */
	if ( bmode != _IOFBF )
	    bsize = 0;

	/* change the buffer mode for the standard input channel */
	if ( bsize )
	{
	    buffer = (char *)malloc(bsize);
	    if ( buffer == NULL )
		sys_error("init_files (input buffer)");
	}
	else
	    buffer = NULL;
	if ( setvbuf(stdin, buffer, bmode, bsize) == -1 )
	    sys_error("setvbuf (stdin)");
	stdin_node.bmode  = bmode;
	stdin_node.bsize  = bsize;
	stdin_node.buffer = buffer;

	/* change the buffer mode for the standard input channel */
	if ( bsize )
	{
	    buffer = (char *)malloc(bsize);
	    if ( buffer == NULL )
		sys_error("init_files (output buffer)");
	}
	else
	    buffer = NULL;
	if ( setvbuf(stdout, buffer, bmode, bsize) == -1 )
	    sys_error("setvbuf (stdout)");
	stdout_node.bmode  = bmode;
	stdout_node.bsize  = bsize;
	stdout_node.buffer = buffer;
    }
}
