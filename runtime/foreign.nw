% -*- noweb-code-mode: c-mode -*-
% $Id: foreign.nw 2300 2007-06-20 07:10:49Z wlux $
%
% Copyright (c) 2005-2007, Wolfgang Lux
% See ../LICENSE for the full license.
%
\subsection{Finalized Foreign Pointers}\label{sec:foreign}
The \texttt{ForeignPtr} type allows adding finalization functions to a
foreign pointer so that the associated memory can be released and
other cleanup actions be performed when the foreign pointer node is
garbage collected.

<<foreign.c>>=
#include "config.h"
#include <stdio.h>
#include <stdlib.h>
#include "debug.h"
#include "run.h"
#include "regs.h"
#include "heap.h"
#include "spaces.h"
#include "eval.h"
#include "io_monad.h"
#include "foreign.h"

static void finalize_foreign_ptr(Node *);

static const int ot_foreign_ptr[] = {
    2,
    word_offsetof(struct foreign_ptr_node, spc),
    word_offsetof(struct foreign_ptr_node, fptr)
};
static NodeInfo foreign_ptr_info = {
    FOREIGN_PTR_KIND, 0, foreign_ptr_node_size, ot_foreign_ptr, "ForeignPtr",
    eval_whnf, 0, 0, finalize_foreign_ptr
};


@ 
Two kinds of finalization functions are supported. Functions with type
\texttt{FinalizerPtr} have one argument, viz. the pointer to be
finalized, and functions with type \texttt{FinalizerEnvPtr} have two
arguments. The first is an environment pointer supplied when the
function is associated with a foreign pointer, and the second is the
pointer itself.

<<foreign.c>>=
enum { FINALIZER_TAG, FINALIZER_ENV_TAG };

struct finalizer_node {
    NodeInfo		 *info;
    union finalizer_list *next;
    void		 (*finalize)(void *);
};
struct finalizer_env_node {
    NodeInfo		 *info;
    union finalizer_list *next;
    void		 (*finalize)(void *, void *);
    void		 *env;
};
union finalizer_list {
    NodeInfo		      *info;
    struct finalizer_node     f;
    struct finalizer_env_node fe;
};

#define finalizer_node_size	wordsof(struct finalizer_node)
#define finalizer_env_node_size	wordsof(struct finalizer_env_node)

static const int ot_finalizer[] = {
    1, word_offsetof(struct finalizer_node, next)
};
static const int ot_finalizer_env[] = {
    1, word_offsetof(struct finalizer_env_node, next)
};

NodeInfo finalizer_info = {
    CAPP_KIND, FINALIZER_TAG, finalizer_node_size, ot_finalizer,
    0, no_eval, 0, 0, 0
};
NodeInfo finalizer_env_info = {
    CAPP_KIND, FINALIZER_ENV_TAG, finalizer_env_node_size, ot_finalizer_env,
    0, no_eval, 0, 0, 0
};

@ 
When a finalized foreign pointer node has become garbage,
[[finalize_foreign_ptr]] will execute all finalization functions
added to the node.

<<foreign.c>>=
static void
finalize_foreign_ptr(Node *node)
{
    union finalizer_list *fptr = node->fp.fptr;

    while ( fptr )
	switch ( node_tag(fptr) )
	{
	case FINALIZER_TAG:
	    fptr->f.finalize(node->fp.ptr);
	    fptr = fptr->f.next;
	    break;
	case FINALIZER_ENV_TAG:
	    fptr->fe.finalize(fptr->fe.env, node->fp.ptr);
	    fptr = fptr->fe.next;
	    break;
	default:
	    unexpected_tag("finalize_foreign_ptr", node_tag(fptr));
	}
}

@ 
The function [[primNewForeignPtr]] allocates a new foreign pointer
node for the given pointer. No finalization function is associated
with the pointer initially. Nevertheless, the node is already
registered as a finalized object at the garbage collector. Note that
this function implements \texttt{newForeignPtr\_} from module
\texttt{ForeignPtr} and not \texttt{newForeignPtr}.

\ToDo{Register foreign pointer nodes at the garbage collector when the
  first finalization function is added to the node?}

<<foreign.h>>=
extern Node *primNewForeignPtr(void *ptr);

@ 
<<foreign.c>>=
Node *
primNewForeignPtr(void *ptr)
{
    Node *fp;

    CHECK_HEAP(0, foreign_ptr_node_size);
    fp		= (Node *)regs.hp;
    fp->info	= &foreign_ptr_info;
    fp->fp.spc	= regs.ss;
    fp->fp.ptr	= ptr;
    fp->fp.fptr	= 0;
    regs.hp    += foreign_ptr_node_size;

    register_final(fp);
    return fp;
}

@ 
The functions [[primAddForeignPtrFinalizer]] and
[[primAddForeignPtrFinalizerEnv]] add a finalization function to a
finalized foreign pointer node. [[PrimAddForeignPtrFinalizerEnv]]
also records an environment pointer for the finalization function. In
order to ensure a deterministic semantics of finalizers in conjunction
with [[unsafePerformIO]], these functions must be executed in the same
search space where the finalized foreign pointer node was created.

<<foreign.h>>=
extern void primAddForeignPtrFinalizer(void *, Node *);
extern void primAddForeignPtrFinalizerEnv(void *, void *, Node *);

@ 
<<foreign.c>>=
void
primAddForeignPtrFinalizer(void *finalize, Node *fp)
{
    union finalizer_list *fptr;

    if ( fp->fp.spc != regs.ss )
	abort_with("addForeignPtrFinalizer: non-local pointer");

    BEGIN_LOCAL_ROOTS1(fp)
    CHECK_HEAP(0, finalizer_node_size);
    fptr	     = (union finalizer_list *)regs.hp;
    fptr->info	     = &finalizer_info;
    fptr->f.next     = fp->fp.fptr;
    fptr->f.finalize = (void (*)(void *))finalize;
    regs.hp	    += finalizer_node_size;

    fp->fp.fptr = fptr;
    END_LOCAL_ROOTS
}

void
primAddForeignPtrFinalizerEnv(void *finalize, void *env, Node *fp)
{
    union finalizer_list *fptr;

    if ( fp->fp.spc != regs.ss )
	abort_with("addForeignPtrFinalizerEnv: non-local pointer");

    BEGIN_LOCAL_ROOTS1(fp)
    CHECK_HEAP(0, finalizer_env_node_size);
    fptr	      = (union finalizer_list *)regs.hp;
    fptr->info	      = &finalizer_env_info;
    fptr->fe.next     = fp->fp.fptr;
    fptr->fe.finalize = (void (*)(void *, void *))finalize;
    fptr->fe.env      = env;
    regs.hp	     += finalizer_env_node_size;

    fp->fp.fptr = fptr;
    END_LOCAL_ROOTS
}

@ 
The macro [[primUnsafeForeignPtrToPtr]] returns the pointer value of
a foreign pointer node. It is unsafe because the pointer may be
finalized and therefore become invalid when the program retains no
reference to the foreign pointer node itself.

<<foreign.h>>=
#define primUnsafeForeignPtrToPtr(node)	((node)->fp.ptr)

@ 
The only purpose of function [[primTouchForeignPtr]] is to retain a
reference to its argument and thus prevent premature garbage
collection of the foreign pointer node.

<<foreign.h>>=
extern void primTouchForeignPtr(Node *);

@ 
<<foreign.c>>=
void
primTouchForeignPtr(Node *fp)
{
    /* deliberately empty */
}
