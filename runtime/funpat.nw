% -*- noweb-code-mode: c-mode -*-
% $Id: funpat.nw 3274 2016-07-14 19:39:55Z wlux $
%
% Copyright (c) 2009-2016, Wolfgang Lux
% See ../LICENSE for the full license.
%
\subsection{Function Patterns}
The constraint operator \texttt{(=:<=)} is a lazy variant of the
equality constraint operator \texttt{(=:=)} and is used for the
implementation of function patterns. The essential difference between
\texttt{$e_1$ =:<= $e_2$} and \texttt{$e_1$ =:= $e_2$} is that if
$e_1$ evaluates to an unbound variable $x$, \texttt{(=:<=)} simply
binds $x$ to $e_2$ without evaluating it further, whereas
\texttt{(=:=)} evaluates $e_2$ to normal form. Note that this means
that \texttt{(=:<=)} is not symmetrical with respect to its arguments.
The left argument of \texttt{(=:<=)} is always evaluated to normal
form, but the right one may not be evaluated at all. For instance, the
constraint \texttt{let x free in x =:<= failed} succeeds, whereas the
constraint \texttt{let x free in failed =:<= x} fails. This means that
the use of \texttt{(=:<=)} is unsafe in general.

If the left hand side argument of \texttt{(=:<=)} describes a
non-linear pattern, i.e., some variables occur more than once in its
normal form, we must ensure that for each variable that occurs more
than once all its bindings are equal to the same (finite) data term.
To detect multiple bindings and check that they are equal, the
implementation of \texttt{(=:<=)} just collects all variable bindings
while matching the two arguments without performing any of those
bindings. Only when matching is complete the variables in the left
hand side are actually bound and equality constraints are used to
compare multiple bindings of the same variable.

To collect the variable bindings, we use a flat list of variable
binding pairs and append new pairs to the end of the list. Note that
we always start the list with an empty pair containing two null
pointers.

We also provide a rigid variant of the constraint operator,
\texttt{(==<=)}, which is used for matching function patterns in
(rigid) case expressions. It differs from \texttt{(=:<=)} in that free
variables in the right argument are never instantiated. Instead
evaluation is suspended until those variables are instantiated by some
other computation. Free variables in the left argument continue to be
bound to the corresponding term in the right argument without further
evaluation.

<<funpat.h>>=
DECLARE_LABEL(extern, ___61__58__60__61_);
DECLARE_LABEL(extern, ___61__61__60__61_);

@ 
<<funpat.c>>=
#include "config.h"
#include "debug.h"
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "run.h"
#include "regs.h"
#include "heap.h"
#include "stack.h"
#include "eval.h"
#include "threads.h"
#include "spaces.h"
#include "search.h"
#include "trail.h"
#include "equal.h"
#include "funpat.h"
#include "unify.h"
#include "cam.h"
#include "trace.h"

DECLARE_LABEL(static, funpat_match);
DECLARE_LABEL(static, funpat_match_1);
DECLARE_LABEL(static, funpat_match_2);
DECLARE_LABEL(static, funpat_args);
DECLARE_LABEL(static, funpat_args_1);
DECLARE_LABEL(static, funpat_args_2);
DECLARE_LABEL(static, funpat_papp_args);
DECLARE_LABEL(static, funpat_bindVars);
DECLARE_LABEL(static, funpat_bindVars_1);
DECLARE_LABEL(static, funpat_bindVars_2);
DECLARE_LABEL(static, funpat_bindVars_3);
DECLARE_LABEL(static, funpat_bindVarsRigid);
DECLARE_LABEL(static, funpat_bindVarsRigid_1);

#define pair_cons_node_size closure_node_size(3)
static DEFINE_DATA(flex_pair_cons, ",:", CONS_TAG, 3);
static DEFINE_DATA(rigid_pair_cons, ",:", CONS_TAG, 3);

#define NO_SOLUTION "(=:<=): no solution"

FUNCTION(___61__58__60__61_)
{
    Node *binds;
 ENTRY_LABEL(extern, ___61__58__60__61_)
    C_STACK_CHECK(___61__58__60__61_);
    TRACE_FUN("=:<=", 2);
    CHECK_STACK(2);
    CHECK_HEAP(2, pair_cons_node_size);

    /* create the bindings list */
    regs.r[2] = binds = (Node *)regs.hp;
    binds->info	      = &flex_pair_cons_info;
    binds->c.args[0]  = 0;
    binds->c.args[1]  = 0;
    binds->c.args[2]  = 0;
    regs.hp	     += pair_cons_node_size;

    /* prepare to perform the bindings */
    regs.sp   -= 2;
    regs.sp[0] = binds;
    regs.sp[1] = (Node *)regs.ret;
    regs.ret   = funpat_bindVars;

    /* now match both arguments */
    GOTO(funpat_match);
}

FUNCTION(___61__61__60__61_)
{
    Node *binds;
 ENTRY_LABEL(extern, ___61__61__60__61_)
    C_STACK_CHECK(___61__61__60__61_);
    TRACE_FUN("==<=", 2);
    CHECK_STACK(2);
    CHECK_HEAP(2, pair_cons_node_size);

    /* create the bindings list */
    regs.r[2] = binds = (Node *)regs.hp;
    binds->info	      = &rigid_pair_cons_info;
    binds->c.args[0]  = 0;
    binds->c.args[1]  = 0;
    binds->c.args[2]  = 0;
    regs.hp	     += pair_cons_node_size;

    /* prepare to perform the bindings */
    regs.sp   -= 2;
    regs.sp[0] = binds;
    regs.sp[1] = (Node *)regs.ret;
    regs.ret   = funpat_bindVarsRigid;

    /* now match both arguments */
    GOTO(funpat_match);
}

static FUNCTION(funpat_match)
{
 ENTRY_LABEL(static, funpat_match)
    C_STACK_CHECK(funpat_match);
    TRACE_FUN("funpat_match", 3);
    SAVE_REGS(2);
    EVAL(funpat_match_1);
}

static
FUNCTION(funpat_match_1)
{
    Node *arg1, *arg2, *binds, *tail;
 ENTRY_LABEL(static, funpat_match_1)
    arg1 = regs.r[0];
    while ( is_tagged_ptr(arg1) && is_indir_node(arg1) )
	arg1 = arg1->n.node;

    /* if the left argument is a variable just record its binding ... */
    if ( is_tagged_ptr(arg1) )
    {
	if ( is_variable_node(arg1) )
	{
	    regs.r[0] = arg1;
	    CHECK_HEAP(1, pair_cons_node_size);
	    arg1 = regs.r[0];
	    arg2 = regs.sp[0];
	    while ( is_tagged_ptr(arg2) && is_indir_node(arg2) )
		arg2 = arg2->n.node;

	    binds = regs.sp[1];
	    assert(binds != 0);
	    while ( binds->c.args[2] != 0 )
		binds = binds->c.args[2];

	    tail	    = (Node *)regs.hp;
	    tail->info	    = binds->info;
	    tail->c.args[0] = arg1;
	    tail->c.args[1] = arg2;
	    tail->c.args[2] = 0;
	    regs.hp	   += pair_cons_node_size;

#if !COPY_SEARCH_SPACE
	    if ( (word *)binds < regs.hlim )
		DO_SAVE(binds, c.args[2]);
#endif
	    binds->c.args[2] = tail;
	    
	    RETURN(Prelude_True, 2);
	}
	else if ( is_global_var_node(arg1) )
	{
	    regs.r[0] = arg1;
	    GOTO(sync_global);
	}
    }

    /* ... otherwise evaluate the right argument, too */
    regs.r[0]  = regs.sp[0];
    regs.sp[0] = arg1;
    EVAL(funpat_match_2);
}

static
FUNCTION(funpat_match_2)
{
    Node *arg1, *arg2;
 ENTRY_LABEL(static, funpat_match_2)
    arg1 = regs.sp[0];
    arg2 = regs.r[0];

    while ( is_tagged_ptr(arg1) && is_indir_node(arg1) )
        arg1 = arg1->n.node;
    while ( is_tagged_ptr(arg2) && is_indir_node(arg2) )
        arg2 = arg2->n.node;
    assert(!is_tagged_ptr(arg1) ||
	   (!is_variable_node(arg1) && !is_global_var_node(arg1)));
    if ( is_tagged_ptr(arg2) &&
	 (is_variable_node(arg2) || is_global_var_node(arg2)) )
    {
	if ( regs.sp[1]->info == &flex_pair_cons_info )
	    CALL_RET2(___61__58__61_, 2, arg1, arg2);
	else if ( is_variable_node(arg2) )
	{
	    regs.sp[0] = arg1;
	    CALL1(sync_var, funpat_match_2, arg2);
	}
	else
	{
	    regs.sp[0] = arg1;
	    CALL1(sync_global, funpat_match_2, arg2);
	}
    }
    else
    {
	int n = eq_root(arg1, arg2);

	if ( n < 0 )
	    FAIL(NO_SOLUTION);
	else if ( n > 0 )
	{
	    bool exist_type;
	    Node *arglist;

	    /* NB assign exist_type before calling eq_args because a
	     *    garbage collection in eq_args will invalidate arg1 */
	    exist_type = is_eapp_node(arg1) || is_papp_node(arg1);
	    arglist    = eq_args(0, arg1, arg2, n);
	    if ( !arglist )
		FAIL(NO_SOLUTION);

	    if ( arglist != nil )
	    {
		regs.sp[0] = arglist;
		if ( exist_type )
		{
		    regs.r[0] = Prelude_True;
		    GOTO(funpat_papp_args);
		}
		else
		    GOTO(funpat_args);
	    }
	}
    }

    RETURN(Prelude_True, 2);
}

@
The unification of the arguments of data terms proceeds
concurrently. Instead of calling the code for the predefined operator
[[(&)]], we handle concurrent evaluation ourselves. Thus, we can
make use of the fact that the unification always returns the value
[[True]] and can never return an unbound variable.

<<funpat.c>>=
static
FUNCTION(funpat_args)
{
    Node *susp, *arglist, *binds;
 ENTRY_LABEL(static, funpat_args)
    arglist = regs.sp[0];
    binds   = regs.sp[1];
    if ( arglist->c.args[2] == nil )
	CALL_RET3(funpat_match, 2,
		  arglist->c.args[0], arglist->c.args[1], binds);

    CHECK_HEAP(0, queueMe_node_size);
    susp	= (Node *)regs.hp;
    susp->info	= queueMe_info_table;
    susp->q.wq	= 0;
    regs.hp    += queueMe_node_size;

    arglist = regs.sp[0];
    CHECK_STACK1();
    regs.sp   -= 1;
    regs.sp[0] = regs.r[3] = susp;
    regs.sp[1] = arglist->c.args[2];
    regs.r[0]  = arglist->c.args[0];
    regs.r[1]  = arglist->c.args[1];
    regs.r[2]  = regs.sp[2];
    start_thread(4, funpat_args_1);

    SAVE_RET1(regs.r[3]);
    CALL3(funpat_match, update, regs.r[0], regs.r[1], regs.r[2]);
}

static
FUNCTION(funpat_args_1)
{
    Node *r, *binds;
 ENTRY_LABEL(static, funpat_args_1)
    binds = regs.sp[2];
    if ( binds->c.args[2] != 0 )
    {
	do
	{
	    binds = binds->c.args[2];
	}
	while (binds->c.args[2] != 0);
	regs.sp[2] = binds;
    }

    for ( r = regs.sp[0]; node_kind(r) == INDIR_KIND; r = r->n.node )
	;

    if ( r == Prelude_True )
    {
	regs.sp += 1;
	GOTO(funpat_args);
    }

    assert(node_kind(r) == QUEUEME_KIND);
    CHECK_STACK1();
    regs.sp   -= 1;
    regs.sp[0] = regs.sp[2];
    regs.sp[1] = regs.sp[3];
    regs.sp[2] = (Node *)funpat_args_2;
    regs.sp[3] = r;
    GOTO(funpat_args);
}

static
FUNCTION(funpat_args_2)
{
    Node *r;
 ENTRY_LABEL(static, funpat_args_2)
    assert(regs.r[0] == Prelude_True);
    for ( r = regs.sp[0]; node_kind(r) == INDIR_KIND; r = r->n.node )
	;
    if ( r == Prelude_True )
	RETURN(r, 1);
    assert(node_kind(r) == QUEUEME_KIND);
    ENTER(r, 1);
}

@ 
As explained on p.~\pageref{unsafe-equality} in
Sect.~\ref{unsafe-equality}, computing the equality of two partial
applications and of two data constructors with existentially
quantified types, respectively, is not type safe. In order to prevent
ill-typed nodes from escaping the scope of an equality constraint,
e.g., by using a function \texttt{cast x | flip const x =:<= flip
  const y = y where y free} with type \texttt{a -> b}, we restrict
equality constraints between partial applications and between
existentially quantified data constructors to ground terms. This is
implemented by applying the \texttt{(==)} primitive to each pair of
arguments and checking that all of these applications reduce to
\texttt{True}.

<<funpat.c>>=
static
FUNCTION(funpat_papp_args)
{
    Node *arglist;
 ENTRY_LABEL(static, funpat_papp_args)
    if ( regs.r[0] != Prelude_True )
	FAIL(NO_SOLUTION);

    arglist = regs.sp[0];
    if ( arglist == nil )
	RETURN(Prelude_True, 2);

    regs.sp[0] = arglist->c.args[2];
    CALL2(___61__61_, funpat_papp_args, arglist->c.args[0], arglist->c.args[1]);
}

@
After matching the arguments of \texttt{(=:<=)} succeeds, we actually
bind all variables in the left argument to the corresponding
expressions in the right argument. When a variable is bound more than
once, we ensure that all bindings are equal using a normal equality
constraint. We also use an equality constraint to bind variables that
have constraints or blocked threads.

The bindings list is processed by function [[funpat_bindVars]]. Recall
that our bindings list always starts with an empty pair, so the first
element of the list must be skipped.

<<funpat.c>>=
static
FUNCTION(funpat_bindVars)
{
    Node *binds;
 ENTRY_LABEL(static, funpat_bindVars)
    binds = regs.sp[0];
    assert(binds != 0 && binds->info == &flex_pair_cons_info);
    assert(binds->c.args[0] == 0 && binds->c.args[1] == 0);
    binds = binds->c.args[2];
    if ( binds != 0 )
    {
	regs.sp[0] = binds;
	GOTO(funpat_bindVars_1);
    }
    RETURN(Prelude_True, 1);
}

static
FUNCTION(funpat_bindVars_1)
{
    Node *var, *arg, *binds, *susp;
 ENTRY_LABEL(static, funpat_bindVars_1)
    binds = regs.sp[0];
    assert(binds != 0 && binds->info == &flex_pair_cons_info);
    assert(binds->c.args[0] != 0 && binds->c.args[1] != 0);
    var   = binds->c.args[0];
    arg   = binds->c.args[1];
    binds = binds->c.args[2];

    /* Do not dereference the variable; an indirection indicates that the
     * variable is used more than once.
     */
    assert(is_tagged_ptr(var));
    while ( is_tagged_ptr(arg) && is_indir_node(arg) )
	arg = arg->n.node;
    if ( var->info != variable_info_table || var->v.wq || var->v.cstrs )
    {
	if ( binds == 0 )
	    CALL_RET2(___61__58__61_, 1, var, arg);

	regs.sp[0] = binds;
	regs.r[0]  = var;
	regs.r[1]  = arg;

	CHECK_HEAP(2, queueMe_node_size);
	susp	   = (Node *)regs.hp;
	susp->info = queueMe_info_table;
	susp->q.wq = 0;
	regs.hp	  += queueMe_node_size;

	CHECK_STACK1();
	regs.sp	 -= 1;
	regs.r[2] = regs.sp[0] = susp;
	start_thread(3, funpat_bindVars_2);

	SAVE_RET1(regs.r[2]);
	CALL2(___61__58__61_, update, regs.r[0], regs.r[1]);
    }

    /* Bind the variable; note that we do not need to call bind_var, since we
     * know that the variable does not have any constraints or blocked threads.
     */
    if ( var != arg )
    {
# if !COPY_SEARCH_SPACE
	if ( (word *)var < regs.hlim )
	{
	    DO_SAVE(var, n.node);
	    var->info++;
	}
	else
# endif
	    var->info = &indir_info;
	var->n.node = arg;
    }

    if ( binds != 0 )
    {
	regs.sp[0] = binds;
	GOTO(funpat_bindVars_1);
    }
    RETURN(Prelude_True, 1);
}

static
FUNCTION(funpat_bindVars_2)
{
    Node *r;
 ENTRY_LABEL(static, funpat_bindVars_2)
    for ( r = regs.sp[0]; node_kind(r) == INDIR_KIND; r = r->n.node )
	;
    if ( node_kind(r) == CAPP_KIND )
    {
	regs.sp += 1;
	GOTO(funpat_bindVars_1);
    }

    ASSERT(node_kind(r) == QUEUEME_KIND);
    CHECK_STACK1();
    regs.sp   -= 1;
    regs.sp[0] = regs.sp[2];
    regs.sp[1] = (Node *)funpat_bindVars_3;
    regs.sp[2] = r;
    GOTO(funpat_bindVars_1);
}

static
FUNCTION(funpat_bindVars_3)
{
    Node *r;
 ENTRY_LABEL(static, funpat_bindVars_3)
    ASSERT(node_kind(regs.r[0]) == CAPP_KIND);
    for ( r = regs.sp[0]; node_kind(r) == INDIR_KIND; r = r->n.node )
	;
    if ( node_kind(r) == QUEUEME_KIND )
	ENTER(r, 1);
    ASSERT(node_kind(r) == CAPP_KIND);
    RETURN(r, 1);
}

@ 
Similarly, after matching the arguments of \texttt{(==<=)} succeeds,
we bind all variables in the left argument to the corresponding
expressions in the right argument. However, when a variable is bound
more than once or has constraints or a wait-queue, we use the equality
operator \texttt{(==)} to ensure that equal terms are used for all
occurrences of the same variable.

<<funpat.c>>=
static
FUNCTION(funpat_bindVarsRigid)
{
    Node *binds;
 ENTRY_LABEL(static, funpat_bindVarsRigid)
    binds = regs.sp[0];
    assert(binds != 0 && binds->info == &rigid_pair_cons_info);
    assert(binds->c.args[0] == 0 && binds->c.args[1] == 0);
    regs.r[0]  = Prelude_True;
    regs.sp[0] = binds->c.args[2];
    GOTO(funpat_bindVarsRigid_1);
}

static
FUNCTION(funpat_bindVarsRigid_1)
{
    Node *var, *arg, *binds;
 ENTRY_LABEL(static, funpat_bindVarsRigid_1)
    if ( regs.r[0] != Prelude_True )
	FAIL(NO_SOLUTION);

    binds = regs.sp[0];
    if ( binds == 0 )
	RETURN(Prelude_True, 1);

    assert(binds->info == &rigid_pair_cons_info);
    assert(binds->c.args[0] != 0 && binds->c.args[1] != 0);
    var   = binds->c.args[0];
    arg   = binds->c.args[1];
    binds = binds->c.args[2];

    /* Do not dereference the variable; an indirection indicates that the
     * variable is used more than once.
     */
    assert(is_tagged_ptr(var));
    while ( is_tagged_ptr(arg) && is_indir_node(arg) )
	arg = arg->n.node;
    if ( var->info != variable_info_table || var->v.wq || var->v.cstrs )
    {
	regs.sp[0] = binds;
	CALL2(___61__61_, funpat_bindVarsRigid_1, var, arg);
    }

    /* Bind the variable; note that we do not need to call bind_var, since we
     * know that the variable does not have any constraints or blocked threads.
     */
    if ( var != arg )
    {
# if !COPY_SEARCH_SPACE
	if ( (word *)var < regs.hlim )
	{
	    DO_SAVE(var, n.node);
	    var->info++;
	}
	else
# endif
	    var->info = &indir_info;
	var->n.node = arg;
    }

    /* NB The following assignment is redundant because evaluation would
     * have failed if regs.r[0] did not point to Prelude.True. */
    /*regs.r[0]  = Prelude_True;*/
    regs.sp[0] = binds;
    GOTO(funpat_bindVarsRigid_1);
}
