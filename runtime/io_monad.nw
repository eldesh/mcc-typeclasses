% -*- noweb-code-mode: c-mode -*-
% $Id: io_monad.nw 2335 2007-06-23 09:37:26Z wlux $
%
% Copyright (c) 2001-2007, Wolfgang Lux
% See ../LICENSE for the full license.
%
\subsection{Monadic Code}\label{sec:io-monad}
The monadic driver is implemented in the file [[io_monad.c]]. The main
entry point into this module is the function [[curry_exec]], which
executes a monadic goal.

The function [[curry_exit]] stops the execution of the program with
the given return code, which will be returned from [[curry_exec]].

The function [[abort_with]] prints an error message and stops
execution with return code 1. It is effectively equivalent to calling
\texttt{Prelude.error} with the formatted error message.

The function [[fail_with]] is equivalent to [[abort_with]] when it is
called in an I/O context. However, in global and encapsulated search,
this function simply jumps to the current non-deterministic failure
handler and ignores the supplied error message.

The functions [[ioError]] and [[ioError_withErrno]] can be used to
raise an exception from C code. The exception message is composed of a
location where the exception is raised and an optional reason string,
which is appended to the error message if present. The function
[[ioError_withErrno]] is just a shorthand for
[[ioError(loc, strerror(errno))]].

The functions [[curry_argc]] and [[curry_argv]] return the arguments
that were passed to [[curry_exec]].

<<io_monad.h>>=
extern int  curry_exec(Node *main, int argc, char **argv);
extern void curry_exit(int rc) __attribute__((noreturn));

extern void abort_with(const char *format, ...)
    __attribute__((noreturn, format(printf, 1, 2)));
extern void fail_with(const char *format, ...)
    __attribute__((noreturn, format(printf, 1, 2)));

extern void ioError(const char *loc, const char *reason)
    __attribute__((noreturn));
extern void ioError_withErrno(const char *loc) __attribute__((noreturn));

extern int  curry_argc(void);
extern char **curry_argv(void);

DECLARE_LABEL(extern, __ioError);

@ 
<<io_monad.c>>=
#include "config.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include "debug.h"
#include "run.h"
#include "regs.h"
#include "heap.h"
#include "stack.h"
#include "threads.h"
#include "eval.h"
#include "data.h"
#include "io_monad.h"
#include "cstring.h"
#include "trace.h"
#include "cam.h"

DECLARE_LABEL(static, start_io);
DECLARE_LABEL(static, stop_io);
DECLARE_LABEL(static, choices_io);
DECLARE_LABEL(static, deadlock_io);
DECLARE_LABEL(static, fail_io);

@ 
In this file we also provide the handler functions for
non-deterministic instructions, suspensions, and failures.
Non-deterministic code will raise an error in monadic code, deadlocks
and failures will terminate the program with an appropriate (error)
message.

<<io_monad.c>>=
static const struct nondet_handlers io_handlers = {
    choices_io, deadlock_io, fail_io
};

static
FUNCTION(choices_io)
{
 ENTRY_LABEL(static, choices_io)
    abort_with("cannot duplicate the world");
}

static
FUNCTION(deadlock_io)
{
 ENTRY_LABEL(static, deadlock_io)
    abort_with("deadlock");
}

static
FUNCTION(fail_io)
{
 ENTRY_LABEL(static, fail_io)
    abort_with("%s", (const char *)regs.r[0]);
}

@
The global entry point [[start_io]] prepares the abstract machine for
evaluating the monadic goal on the top of the stack. The IO monad is
based on the type \texttt{IO}, which can be defined as
\begin{equation}
  \mbox{\texttt{type IO a = World -> (a,World)}}\label{eq:monadic-io}
\end{equation}
where the type \texttt{World} represents the state of the external
world. The state of the file system, etc. are managed implicitly in
the runtime system. Therefore, we can simply use the constant
\texttt{()} as representation of the world. Since the representation
is constant, we can use a simpler reader monad instead of a state
monad to implement the \texttt{IO} type. Therefore, the runtime system
really uses
\begin{equation}
  \mbox{\texttt{type IO a = () -> a}}\label{eq:our-io}
\end{equation}
Note that the IO monad is lazy, i.e., the result of a monadic action
is computed only when it is used by the program. Thus, the program
\verb|return undefined >> putStrLn "Hello world"| will print the
string \verb|Hello world| on the standard output. While this is
straight forward to implement using
representation~(\ref{eq:monadic-io}), we must be careful not to
evaluate the returned node in our representation~(\ref{eq:our-io}).

The program used for executing a monadic goal evaluates the goal to
head-normal form, but does not compute nor print the result of the
monadic action itself.

<<io_monad.c>>=
static int  io_argc;
static char **io_argv;
static int  curry_rc = 0;

int
curry_exec(Node *main, int argc, char **argv)
{
    io_argc = argc;
    io_argv = argv;

    if ( main->info->kind == LAZY_KIND )
	assert(main->info->tag == NOUPD_TAG &&
	       main->info->length == closure_node_size(0));
    else if ( main->info->kind == PAPP_KIND )
	assert(main->info->tag == 1 &&
	       main->info->length == closure_node_size(0));
    else
	invalid_arg("curry_exec", main->info->kind);

    regs.r[0] = main;
    run(start_io);
    regs.hlim = heap_base;
    release_mem();
    return curry_rc;
}

void
curry_exit(int rc)
{
    curry_rc = rc;
    halt();
}
int
curry_argc()
{
    return io_argc;
}

char **
curry_argv()
{
    return io_argv;
}

DECLARE_LABEL(static, start_io_1);

static
FUNCTION(start_io)
{
 ENTRY_LABEL(static, start_io)
    regs.handlers = &io_handlers;
    TRACE(("start program\n"));
    start_thread(1, 0);
    /* Hack: Change the return address of the main thread */
    regs.ret = stop_io;
    SAVE_RET1(unit);
    EVAL_NODE(start_io_1);
}

static
FUNCTION(start_io_1)
{
 ENTRY_LABEL(static, start_io_1)
    MATCH_RIGID_PAPP(start_io_1);
    assert(regs.r[0]->info->tag == 1);
    GOTO(regs.r[0]->info->apply);
}

static
FUNCTION(stop_io)
{
 ENTRY_LABEL(static, stop_io)
    curry_exit(0);
}

static void
print_error(const char *format, va_list args)
{
    fprintf(stderr, "Error: ");
    vfprintf(stderr, format, args);
    fprintf(stderr, "\n");
}

void
abort_with(const char *format, ...)
{
    va_list args;

    va_start(args, format);
    print_error(format, args);
    va_end(args);

    curry_exit(1);
}

void
fail_with(const char *format, ...)
{
    va_list args;

    if ( regs.handlers == &io_handlers )
    {
	va_start(args, format);
	print_error(format, args);
	va_end(args);
	curry_exit(1);
    }

    regs.r[0] = (Node *)format;
    jump(regs.handlers->fail);
}

@
The function [[catch]] lets the user catch I/O exceptions in monadic
code. The function is passed a monadic action and an exception
handler. It creates a new exception frame on the stack and saves the
handler and the previous exception frame in the new frame, and then
executes the monadic action in the new context. When the action
returns normally, the frame is removed from the stack and the result
is returned to the caller.

<<io_monad.c>>=
DECLARE_LABEL(extern, __catch);
DECLARE_LABEL(static, __catch_1);
DECLARE_LABEL(static, __catch_2);

FUNCTION(__catch)
{
    unsigned int   frm_sz;
    ExceptionFrame *prevFrame;
 ENTRY_LABEL(extern, __catch)
    frm_sz = wordsof(ExceptionFrame);
    CHECK_STACK(frm_sz + 3);

    /* create and initialize the new exception frame */
    prevFrame	      = regs.efp;
    regs.sp	     -= frm_sz + 3;
    regs.efp	      = (ExceptionFrame *)(regs.sp + 2);
    regs.efp->handler = regs.r[1];
    regs.efp->frame   = prevFrame;
    regs.sp[frm_sz+2] = (Node *)regs.ret;

    /* invoke the action */
    regs.sp[0] = regs.r[2];
    regs.sp[1] = (Node *)__catch_2;
    EVAL_NODE(__catch_1);
}

static
FUNCTION(__catch_1)
{
 ENTRY_LABEL(static, __catch_1)
    MATCH_RIGID_PAPP(__catch_1);
    assert(regs.r[0]->info->tag == 1);
    GOTO(regs.r[0]->info->apply);
}

static
FUNCTION(__catch_2)
{
 ENTRY_LABEL(static, __catch_2)
    assert((Node **)regs.efp == regs.sp);
    regs.efp = regs.efp->frame;
    RETURN(regs.r[0], wordsof(ExceptionFrame));
}

@
The I/O action [[ioError]] raises a user exception. It removes the
stack up to and including the current exception frame and applies the
exception handler from that frame to the exception value. If no
exception handler is available -- as may happen when
[[unsafePerformIO]] is used -- the program is aborted using the
[[error]] function from the prelude.

<<io_monad.c>>=
DECLARE_LABEL(extern, __Prelude__error);
DECLARE_LABEL(static, __ioError_1);
DECLARE_LABEL(static, __ioError_2);

FUNCTION(__ioError)
{
    Node	   *exc, *handler;
    ExceptionFrame *curFrame;
 ENTRY_LABEL(extern, __ioError)
    exc = regs.r[0];
    TRACE(("%I throw %N\n", exc));

    if ( regs.efp == 0 )
	EXEC1(__Prelude__error,
	      prefix_string(0, "Uncaught I/O exception:\n", exc));

    curFrame = regs.efp;
    handler  = regs.efp->handler;
    regs.efp = regs.efp->frame;

    regs.sp    = (Node **)curFrame + wordsof(ExceptionFrame) - 2;
    regs.r[0]  = handler;
    regs.sp[0] = exc;
    regs.sp[1] = regs.r[1];
    EVAL_NODE(__ioError_1);
}

static
FUNCTION(__ioError_1)
{
 ENTRY_LABEL(static, __ioError_1)
    MATCH_RIGID_PAPP(__ioError_1);
    switch ( regs.r[0]->info->tag )
    {
    case 1:
	CHECK_STACK1();
	regs.sp	  -= 1;
	regs.sp[0] = regs.sp[1];
	regs.sp[1] = (Node *)__ioError_2;
	break;
    case 2:
	break;
    default:
	curry_panic("ioError: invalid handler (arity %d)\n",
		    regs.r[0]->info->tag);
    }
    GOTO(regs.r[0]->info->apply);
}

static
FUNCTION(__ioError_2)
{
 ENTRY_LABEL(static, __ioError_2)
    assert(regs.r[0]->info->kind == PAPP_KIND && regs.r[0]->info->tag == 1);
    GOTO(regs.r[0]->info->apply);
}

@ 
The functions [[ioError]] and [[ioError_withErrno]] allow raising an
exception from C functions. This is achieved by setting up the
arguments for the [[ioError]] action and then restarting the abstract
machine at the entry point of the [[ioError]] action.

<<io_monad.c>>=
void
ioError(const char *loc, const char *reason)
{
    if ( reason && *reason )
    {
	regs.r[0] = from_string(0, reason);
	regs.r[0] = prefix_string(0, ": ", regs.r[0]);
    }
    else
	regs.r[0] = nil;
    regs.r[0] = prefix_string(0, loc, regs.r[0]);
    regs.r[1] = unit; /* FIXME: have lost track of the IO monad's state here */
    jump(__ioError);
}

void
ioError_withErrno(const char *loc)
{
    ioError(loc, strerror(errno));
}
