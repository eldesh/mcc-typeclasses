% -*- noweb-code-mode: c-mode -*-
% $Id: main.nw 2699 2008-05-14 16:14:13Z wlux $
%
% Copyright (c) 2001-2008, Wolfgang Lux
% See ../LICENSE for the full license.
%
@
\subsection{Runtime System Initialization}
The [[main]] function of a Curry program must initialize the runtime
system by calling the function [[curry_init]]. This function parses
the command line options and initializes the runtime system
accordingly. At the end, the program should call [[curry_terminate]]
in order to display the statistics gathered during the run.

The main program can provide its own default sizes for the heap, the
stack, and the trail. To this end, it can set the global variables
[[heapsize]], [[stacksize]], and [[trailsize]] before initializing the
runtime system with [[curry_init]]. The actual sizes still can be
changed at runtime with the runtime system options \texttt{-h},
\texttt{-k}, and \texttt{-t}, respectively. In a similar way, the main
program can also request tracing, printing statistics, and printing
failures by default, by setting the global variables [[do_trace]],
[[show_stats]], and [[print_failures]], respectively.

The sizes and base addresses of the heap, the stack, and the trail are
rounded to the next page boundary. For the purpose of rounding, the
global variable [[pagemask]] is set to 1 less than the operating
system's page size. If the page size cannot be determined
from the operating system, a default of 4k is used. %'

<<main.h>>=
extern unsigned long heapsize;
extern unsigned int  stacksize;
extern unsigned int  trailsize;

extern int do_trace;
extern int show_stats;
extern int print_fail;

extern unsigned long pagemask;

extern void curry_init(int *argc, char *argv[]);
extern void curry_terminate(void);

@ 
The function [[curry_init]] extracts the runtime system options from
the command line and initializes the runtime system using these
options. Options to the runtime system must be enclosed with
\texttt{+RTS} and \texttt{-RTS} delimiters. The latter may be omitted
if no further arguments follow on the command line. When
[[curry_init]] returns, all runtime system options have been removed
from the argument vector.

<<main.c>>=
#include "config.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <limits.h>
#include "run.h"
#include "regs.h"
#include "heap.h"
#include "stack.h"
#include "trail.h"
#include "files.h"
#include "trace.h"
#include "main.h"
#include "stats.h"

static void	     bad_option(void) __attribute__((noreturn));
static unsigned long parse_size(long max, const char *, const char *);

#define k 1024
#define M k*k

#ifndef DEFAULT_HEAPSIZE
# define DEFAULT_HEAPSIZE 2*M * word_size
#endif

#ifndef DEFAULT_STACKSIZE
# define DEFAULT_STACKSIZE 128*k * word_size
#endif
#ifndef DEFAULT_TRAILSIZE
# define DEFAULT_TRAILSIZE 128*k * word_size
#endif

#define DEFAULT_PAGESIZE 4*k

unsigned long heapsize  = DEFAULT_HEAPSIZE;
unsigned int  stacksize = DEFAULT_STACKSIZE;
unsigned int  trailsize = DEFAULT_TRAILSIZE;

int do_trace   = 0;
int show_stats = 0;
int print_fail = 0;

unsigned long pagemask;

static void
bad_option()
{
    fprintf(stderr, "Valid runtime system options:\n");
    fprintf(stderr, " -b MODE  set buffer mode for standard input/output\n");
    fprintf(stderr, "          valid MODEs: n  unbuffered\n");
    fprintf(stderr, "                       l  line buffered\n");
    fprintf(stderr, "                       f  fully buffered\n");
    fprintf(stderr, " -d       trace program execution\n");
    fprintf(stderr, " -f       print failures during goal evaluation\n");
    fprintf(stderr, " -h SIZE  set heap size to SIZE bytes (default: %lu)\n",
	    heapsize);
    fprintf(stderr, " -p       print statistics at end of run\n");
    fprintf(stderr, " -k SIZE  set stack size to SIZE bytes (default: %u)\n",
	    stacksize);
#if !COPY_SEARCH_SPACE
    fprintf(stderr, " -t SIZE  set trail size to SIZE bytes (default: %u)\n",
	    trailsize);
#endif
    exit(1);
}

void
curry_init(int *p_argc, char *argv[])
{
    bool rts;
    char *cp, *arg;
    int	 i, j, argc;
    int  pagesize, bufmode = -1, bufsize = 0;

    /* get system page size */
    pagesize = getpagesize();
    if ( pagesize == -1 )
	pagesize = DEFAULT_PAGESIZE;
    pagemask = pagesize - 1;

    /* process rts options */
    argc = *p_argc;
    rts	 = false;
    for ( i = j = 1; i < argc; i++ )
    {
	cp = argv[i];
	if ( !rts )
	    if ( strcmp(cp, "+RTS") == 0 )
		rts = true;
	    else
		argv[j++] = cp;
	else if ( strcmp(cp, "-RTS") == 0 )
	    rts = false;
	else
	{
	    if ( *cp == '-' )
		for ( cp++; *cp != '\0'; cp++ )
		    switch ( *cp )
		    {
		    case 'd':
			do_trace++;
			break;
		    case 'f':
			print_fail++;
			break;
		    case 'p':
			show_stats++;
			break;
		    case 'b':
		    case 'h':
		    case 'k':
#if !COPY_SEARCH_SPACE
		    case 't':
#endif
			if ( cp[1] != '\0' )
			    arg = cp + 1;
			else if ( ++i < argc )
			    arg = argv[i];
			else
			{
			    fprintf(stderr, "%s: missing argument after -%c\n",
				    argv[0], *cp);
			    bad_option();
			}
			switch ( *cp )
			{
			case 'b':
			    if ( strcmp(arg, "n") == 0 )
				bufmode = _IONBF;
			    else if ( strcmp(arg, "l") == 0 )
				bufmode = _IOLBF;
			    else if ( strcmp(arg, "f") == 0 )
				bufmode = _IOFBF;
			    else if ( *arg == 'f' )
			    {
				bufmode = _IOFBF;
				bufsize = (int)
				    parse_size(INT_MAX, "buffer size", arg + 1);
			    }
			    else
			    {
				fprintf(stderr,
					"%s: invalid file buffer mode %s\n",
					argv[0], arg);
				bad_option();
			    }
			    break;
			case 'h':
			    heapsize = parse_size(LONG_MAX, "heap size", arg);
			    break;
			case 'k':
			    stacksize = (unsigned int)
				parse_size(INT_MAX, "stack size", arg);
			    break;
#if !COPY_SEARCH_SPACE
			case 't':
			    trailsize = (unsigned int)
				parse_size(INT_MAX, "trail size", arg);
			    break;
#endif
			}
			cp = "\0";
			break;
		    default:
			fprintf(stderr,
				"%s: unknown runtime system option %c\n",
				argv[0], *cp);
			bad_option();
		    }
	    else
	    {
		fprintf(stderr, "%s: unknown runtime system argument %s\n",
			argv[0], cp);
		bad_option();
	    }
	}
    }
    argv[j] = NULL;
    *p_argc = j;

    /* initialize runtime system */
    init_chars();
    init_bigint();
    init_stack(stacksize);
#if !COPY_SEARCH_SPACE
    init_trail(trailsize);
#endif
    init_heap(heapsize);
    init_files(bufmode, bufsize);
    init_regs();
    stats_init(show_stats);
}

@ 
The function [[curry_terminate]] performs some clean up after the
program has finished. At present, this function only prints the
current statistics.

<<main.c>>=
void
curry_terminate()
{
    stats_terminate();
}

@ 
As a handy abbreviation, the function [[parse_size]] recognizes the
suffixes [[k]] and [[K]] for specifying sizes in kBytes and the
suffixes [[m]] and [[M]] for specifying a size in MBytes.

<<main.c>>=
static unsigned long
parse_size(long max, const char *what, const char *arg)
{
    long size;
    char *end;

    size = strtol(arg, &end, 0);
    if ( *end != '\0' )
    {
	if ( strcmp(end, "m") == 0 || strcmp(end, "M") == 0 )
	    size = size > max / M ? max : size * M;
	else if ( strcmp(end, "k") == 0 || strcmp(end, "K") == 0 )
	    size = size > max / k ? max : size * k;
	else
	    size = -1;
    }

    if ( size <= 0 )
    {
	fprintf(stderr, "invalid %s: %s\n", what, arg);
	exit(1);
    }

    return size > max ? max : size;
}
