% -*- noweb-code-mode: c-mode -*-
% $Id: print.nw 3065 2012-03-11 22:12:09Z wlux $
%
% Copyright (c) 2001-2012, Wolfgang Lux
% See ../LICENSE for the full license.
%
\subsection{Printing the Result}
When the computation is finished, the normal form of the goal and the
bindings of its free variables can be printed with function
[[print_result]]. The first $n$ elements of the [[var_names]] and
[[vars]] arrays are assumed to contain the names and the bindings of
the goal's free variables, respectively, and the $(n+1)$th element of
[[vars]] contains the normal form of the goal. %'

<<print.h>>=
extern void print_result(const char *var_names[], Node *vars[]);

@ 
<<print.c>>=
#include "config.h"
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "debug.h"
#include "run.h"
#include "regs.h"
#include "heap.h"
#include "stack.h"
#include "trail.h"
#include "disequal.h"
#include "vars.h"
#include "cstring.h"
#include "print.h"

static void print_node(unsigned int, Node *);
static void print_app(unsigned int, Node *, unsigned int, Node **);
static void print_list(unsigned int, Node *);
static void print_string(Node *);
static void print_closed_list(Node *);
static void print_open_list(unsigned int, Node *);
static void print_tuple(unsigned int, Node **);
static void print_constraints(Node *);
static void print_app_constraints(unsigned int, Node **);
static void print_constrained_var(Node *);

@ 
The function [[print_result]] prints the computed result of a goal and
the bindings of its free variables. Only those variables are actually
printed which have been bound by the program. In order to assign names
to the unbound variables, a dictionary is used (see below). This
dictionary is initialized with the names of the goal's free variables %'
when the initial goal application is allocated (see
Sect.~\ref{sec:global-search}).

The global variable [[hasAnswer]] is set to [[true]] when a constraint
for a variable is printed. In that case, also the redundant value
\texttt{success} is not shown in the result of a constraint goal.

<<print.c>>=
static bool hasAnswer;

void
print_result(const char **var_names, Node **vars)
{
    unsigned int     i, n;
    struct dict_node *tail;
    Node	     *result;

    tail      = names_tail;
    hasAnswer = false;
    for ( n = 0; var_names[n]; n++ )
	if ( !is_tagged_ptr(vars[n]) || !is_variable_node(vars[n]) )
	{
	    if ( !hasAnswer )
	    {
		printf("{%s = ", var_names[n]);
		hasAnswer = true;
	    }
	    else
		printf(", %s = ", var_names[n]);
	    print_node(0, vars[n]);
	}

    result = vars[n];
    print_constraints(result);
    for ( i = 0; i < n; i++ )
	print_constraints(vars[i]);

    if ( !hasAnswer )
	print_node(0, result);
    else
    {
	while ( is_tagged_ptr(result) && is_indir_node(result) )
	    result = result->n.node;
	if ( !is_tagged_ptr(result)
	     || result->info != CONST(__Prelude__Success)->info )
	{
	    printf("} ");
	    print_node(0, result);
	}
	else
	    printf("}");
    }

    release_names(tail);
}

@
In general, when a node is printed we will use the closure name
found in the node descriptor. However, some kinds of nodes are
handled differently. In particular, for each unbound variable a name
is generated and this name is shown by the printer. Special functions
are used for printing lists and tuples. The [[prec]] parameter is used
to determine when to enclose a term with parentheses. At present, we
distinguish three different levels: [[0]] is used for terms at the
top-level and arguments of a list or tuple, [[1]] is used for
arguments within an infix application, and [[2]] is used for arguments
in a regular application.

<<print.c>>=
static void
print_node(unsigned int prec, Node *node)
{
    char	 buf[32];
    unsigned int argc;
    double	 d;
    const char	 *name;

    for (;;)
    {
#if !NO_POINTER_TAGS
	if ( is_tagged_char(node) )
	    printf("'%s'", lit_char(buf, '\0', untag_char(node), '\''));
	else if ( is_tagged_int(node) )
	    printf(prec > 0 && untag_int(node) < 0 ? "(%ld)" : "%ld",
		   untag_int(node));
	else
#endif
	    switch ( node_kind(node) )
	    {
	    case CAPP_KIND:
		if ( node->info == &cons_info )
		    print_list(prec, node);
		else if ( is_tuple(node->info) )
		    print_tuple(closure_argc(node), node->c.args);
		else
		    print_app(prec, node, closure_argc(node), node->c.args);
		break;
	    case EAPP_KIND:
	    case PAPP_KIND:
	    case FAPP_KIND:
		print_app(prec, node, closure_argc(node), node->c.args);
		break;
	    case LVAR_KIND:
		printf("%s", lookup_name(node));
		break;
	    case SUSPEND_KIND:
		argc = closure_argc(node);
		if ( argc == 1 && node->c.args[0] == 0 )
		    argc = 0;
		print_app(prec, node, argc, node->c.args);
		break;
	    case QUEUEME_KIND:
		printf("Suspended");
		break;
	    case GAPP_KIND:
	    case GVAR_KIND:
		curry_panic("print_node: stray global reference!?\n");
	    case INDIR_KIND:
		node = node->n.node;
		continue;
	    case VECTOR_KIND:
		if ( is_tuple(node->info) )
		    print_tuple(vector_argc(node), node->a.args);
		else
		    print_app(prec, node, vector_argc(node), node->a.args);
		break;
	    case CHAR_KIND:
#if NO_POINTER_TAGS
		printf("'%s'", lit_char(buf, '\0', node->ch.ch, '\''));
		break;
#else
		curry_panic("impossible: print_node: CHAR_KIND\n");
#endif
	    case INT_KIND:
		printf(prec > 0 && node->i.i < 0 ? "(%ld)" : "%ld", node->i.i);
		break;
	    case BIGINT_KIND:
		if (prec > 0 && mpz_sgn(node->bi.mpz) < 0)
		{
		    printf("(");
		    mpz_out_str(stdout, 10, node->bi.mpz);
		    printf(")");
		}
		else
		    mpz_out_str(stdout, 10, node->bi.mpz);
		break;
	    case FLOAT_KIND:
		get_double_val(d, node);
		lit_double(buf, d);
		printf(prec > 0 && buf[0] == '-' ? "(%s)" : "%s", buf);
		break;
	    case PTR_KIND:
		printf(prec > 1 ? "(%s %p)" : "%s %p",
		       node->info->cname, node->p.ptr);
		break;
	    case FOREIGN_PTR_KIND:
		printf(prec > 1 ? "(%s %p)" : "%s %p",
		       node->info->cname, node->fp.ptr);
		break;
	    case MUTABLE_KIND:
	    case ABSTRACT_KIND:
	    case SEARCH_CONT_KIND:
		name = node->info->cname;
		if ( name == 0 )
		    name = "<abstract>";
		printf("%s", name);
		break;
	    default:
		invalid_arg("print_node", node_kind(node));
	    }
	break;
    }
}

static void
print_app(unsigned int prec, Node *node, unsigned int argc, Node **argv)
{
    unsigned int i;
    bool	 isop   = is_operator(node->info) && !is_tuple(node->info);
    bool	 infix  = isop && argc == 2;
    bool	 parens = infix ? prec > 0 : prec > 1 && argc != 0;

    if ( parens )
	putchar('(');

    if ( infix )
    {
	print_node(1, argv[0]);
	printf(" %s ", node->info->cname);
	print_node(1, argv[1]);
    }
    else
    {
	printf(isop ? "(%s)" : "%s", node->info->cname);

	for ( i = 0; i < argc ; i++ )
	{
	    putchar(' ');
	    print_node(2, argv[i]);
	}
    }

    if ( parens )
	putchar(')');
}

@
The list printer distinguishes three different cases. Closed lists,
i.e., lists that end with \texttt{[]}, whose elements all are
characters are displayed as strings. Other closed lists are displayed
using standard list notation. Open lists are displayed as sequences of
applications of the infix list constructor. Unfortunately, the list
printer needs to traverse the whole list to distinguish these three
cases. But at least we know that the printing code is applied to
finite data terms only, so the traversal is known to terminate.

<<print.c>>=
enum list_kind { is_open, is_closed, is_string };

static bool
is_char(Node *node)
{
    while ( is_tagged_ptr(node) && node->info->kind == INDIR_KIND )
	node = node->n.node;
#if NO_POINTER_TAGS
    return node->info->kind == CHAR_KIND;
#else
    return is_tagged_char(node);
#endif
}

static enum list_kind
list_kind(Node *list)
{
    enum list_kind kind = is_string;

    for (;;)
    {
	switch ( list->info->tag )
	{
	case INDIR_TAG:
	    list = list->n.node;
	    continue;
	case NIL_TAG:
	    break;
	case CONS_TAG:
	    if ( kind == is_string && !is_char(list->c.args[0]) )
		kind = is_closed;
	    list = list->c.args[1];
	    continue;
	default:
	    kind = is_open;
	    break;
	}
	break;
    }
    return kind;
}

static void
print_list(unsigned int prec, Node *list)
{
    switch ( list_kind(list) )
    {
    case is_open:
	print_open_list(prec, list);
	break;
    case is_closed:
	print_closed_list(list);
	break;
    case is_string:
	print_string(list);
	break;
    }
}

static void
print_string(Node *list)
{
    char buf[10];
    int	 c0, c;
    Node *head;

    c0 = '\0';
    putchar('"');
    for (;;)
    {
	switch ( list->info->tag )
	{
	case INDIR_TAG:
	    list = list->n.node;
	    continue;
	case NIL_TAG:
	    break;
	case CONS_TAG:
	    head = list->c.args[0];
	    while ( is_tagged_ptr(head) && head->info->tag == INDIR_TAG )
		head = head->n.node;
#if NO_POINTER_TAGS
	    ASSERT(head->info->kind == CHAR_KIND);
#else
	    ASSERT(is_tagged_char(head));
#endif
	    c = char_val(head);
	    printf("%s", lit_char(buf, c0, c, '"'));
	    c0	 = c;
	    list = list->c.args[1];
	    continue;
	default:
	    unexpected_tag("print_string", list->info->tag);
	}
	break;
    }
    putchar('"');
}

static void
print_closed_list(Node *list)
{
    putchar('[');

    print_node(0, list->c.args[0]);
    list = list->c.args[1];

    for (;;)
    {
	switch ( list->info->tag )
	{
	case INDIR_TAG:
	    list = list->n.node;
	    continue;
	case NIL_TAG:
	    break;
	case CONS_TAG:
	    putchar(',');
	    print_node(0, list->c.args[0]);
	    list = list->c.args[1];
	    continue;
	default:
	    unexpected_tag("print_list", list->info->tag);
	}
	break;
    }

    putchar(']');
}

static void
print_open_list(unsigned int prec, Node *cons)
{
    if (prec > 0)
	putchar('(');

    print_node(1, cons->c.args[0]);
    cons = cons->c.args[1];

    for (;;)
    {
	switch ( cons->info->tag )
	{
	case INDIR_TAG:
	    cons = cons->n.node;
	    continue;
	case NIL_TAG:
	    break;
	case CONS_TAG:
	    putchar(':');
	    print_node(1, cons->c.args[0]);
	    cons = cons->c.args[1];
	    continue;
	default:
	    putchar(':');
	    print_node(1, cons);
	    break;
	}
	break;
    }

    if (prec > 0)
	putchar(')');
}

static void
print_tuple(unsigned int argc, Node **argv)
{
    unsigned int i;
    bool	 first = true;

    putchar('(');

    for ( i = 0; i < argc; i++ )
    {
	if ( first )
	    first = false;
	else
	    putchar(',');
	print_node(0, argv[i]);
    }

    putchar(')');
}

@
The printer traverses the result and all free variables and outputs
all constraints it encounters. In order to print the constraints for a
variable only once, the constraint field of the variable node is reset
before the constraint is printed. The constraint list itself is saved
on the trail so that it is restored when the runtime system backtracks
to the next solution.

<<print.c>>=
static void
print_constraints(Node *node)
{
    unsigned int argc;

    for (;;)
    {
	if ( is_tagged_ptr(node) )
	    switch ( node_kind(node) )
	    {
	    case CAPP_KIND:
	    case EAPP_KIND:
	    case PAPP_KIND:
	    case FAPP_KIND:
		print_app_constraints(closure_argc(node), node->c.args);
		break;
	    case LVAR_KIND:
		if ( node->v.cstrs )
		    print_constrained_var(node);
		break;
	    case SUSPEND_KIND:
		argc = closure_argc(node);
		if ( argc > 1 || node->c.args[0] )
		    print_app_constraints(argc, node->c.args);
		break;
	    case GAPP_KIND:
	    case GVAR_KIND:
		curry_panic("print_constraints: stray global reference!?\n");
	    case INDIR_KIND:
		node = node->n.node;
		continue;
	    case VECTOR_KIND:
		print_app_constraints(vector_argc(node), node->a.args);
		break;
	    }
	break;
    }
}

static void
print_app_constraints(unsigned int argc, Node **argv)
{
    unsigned int i;

    for ( i = 0; i < argc; i++ )
	print_constraints(argv[i]);
}

static void
print_constrained_var(Node *var)
{
    Constraint *cstrs;

    ASSERT(is_variable_node(var) && var->v.cstrs != 0);

    cstrs = var->v.cstrs;
    SET_FIELD(var, v.cstrs, 0);

    for ( ; cstrs; cstrs = cstrs->cstrs )
    {
	if ( !hasAnswer )
	{
	    printf("{");
	    hasAnswer = true;
	}
	else
	    printf(", ");
	print_node(0, var);
	printf(" /= ");
	print_node(0, ((Disequality *)cstrs)->node);

	print_constraints(((Disequality *)cstrs)->node);
    }
}
