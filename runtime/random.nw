% -*- noweb-code-mode: c-mode -*-
% $Id: random.nw 2310 2007-06-20 11:56:29Z wlux $
%
% Copyright (c) 2004-2007, Wolfgang Lux
% See ../LICENSE for the full license.
%
\subsection{Random Numbers}
The functions in this file implement the primitives for the
\texttt{Random} module. The implementation is based on the
[[random]] function from the standard C library.

<<random.c>>=
#include "config.h"
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <sys/time.h>
#include "debug.h"
#include "run.h"
#include "regs.h"
#include "heap.h"
#include "eval.h"
#include "io_monad.h"
#include "random.h"

@
We use state arrays with a size of 128 bytes. While larger state
arrays of 256 bytes are possible, it turns out that the first random
number is always an even number for them.

<<random.c>>=
#define STATESIZE 128

@ 
In order to support multiple independent random number generators,
each generator uses its own state array, which is saved in the
corresponding [[StdGen]] node. The state arrays are allocated outside
of the heap in order to avoid problems with the garbage collection
moving nodes around, and are released when their [[StdGen]] nodes
becomes garbage.

<<random.c>>=
#define stdgen_node_size	wordsof(StdGen)

static void finalize_stdgen(Node *);

typedef struct stdgen_node {
    NodeInfo *info;
    int	     random;		/* buffer for random bits */
    int      valid;		/* number of valid bits in the buffer */
    char     *state;
} StdGen;

static NodeInfo stdgen_info = {
    ABSTRACT_KIND, 0, stdgen_node_size, ot_binary, "@<<Random.StdGen>>",
    eval_whnf, 0, 0, finalize_stdgen
};

static void
finalize_stdgen(Node *node)
{
    StdGen *rng = (StdGen *)node;

    free(rng->state);
}

@ 
The function [[primMkStdGen]] creates a new random number generator
that is initialized with the specified seed. Note that the code
carefully maintains the state of the default random number generator
so as to not disrupt its operation.

<<random.h>>=
extern Node *primMkStdGen(Node *);

@ 
<<random.c>>=
Node *
primMkStdGen(Node *seed)
{
    char   *state;
    StdGen *rng;

    state = (char *)malloc(STATESIZE);
    if ( !state )
	sys_error("mkStdGen");
    setstate(initstate(long_val(seed), state, STATESIZE));

    CHECK_HEAP(0, stdgen_node_size);
    rng		= (StdGen *)regs.hp;
    rng->info   = &stdgen_info;
    rng->state  = state;
    rng->valid  = 0;
    rng->random = 0;
    regs.hp    += stdgen_node_size;
    register_final((Node *)rng);

    return (Node *)rng;
}

@ 
The function [[primNextRStdGen]] returns the next random number in the
range $[l,h]$ for the specified random number generator. The function
carefully restores the state of the global random number generator
after computing the number.

In order to ensure an equal distribution of random numbers between the
two bounds $l$ and $h$, we interpret the random numbers returned by
[[random]] as a bit stream and take $n$ bits from that stream at every
call, where $n$ is the smallest number such that $2^n \geq h-l+1$. In
addition, we discard values outside the range $[0,h-l+1]$ in that
stream. A little analysis reveals that on average we take
$\frac{2^n}{h-l+1}$ values from the input stream. Thus, even in the
worst case, when we have $h-l+1 = 2^{n-1} + 1$ and
$\frac{2^n}{h-l+1} = \frac{2^n}{2^{n-1}+1} \approx 2$, we take at most
two values from the stream on average. Note that [[random]] returns
a number in the range $[0,2^{31}-1]$. Therefore, the [[while]] loop
may be executed more than once if a 32-bit or larger result is
requested.

<<random.h>>=
extern Node *primNextRStdGen(Node *, Node *, Node *);

@ 
<<random.c>>=
Node *
primNextRStdGen(Node *lowBound, Node *highBound, Node *node)
{
    char	  *o;
    int		  bits;
    long	  lo, hi, r;
    unsigned long diff, mask;
    Node	  *i;
    StdGen	  *rng;

    assert(node->info == &stdgen_info);
    lo	= long_val(lowBound);
    hi	= long_val(highBound);
    rng	= (StdGen *)node;

    /* determine the number of bits required */
    assert(hi >= lo);
    diff = hi - lo;
    mask = 1;
    for ( bits = 1; diff & ~mask; bits++ )
	mask = (mask << 1) + 1;

    /* get the next random number in range */
    o = setstate(rng->state);
repeat:
    r = 0;
    while ( rng->valid < bits )
    {
    	bits	   -= rng->valid;
     	mask	  >>= rng->valid;
   	r	   |= rng->random << bits;
    	rng->random = random();
	rng->valid  = 31;
    }
    r		 |= rng->random & mask;
    rng->valid   -= bits;
    rng->random >>= bits;
    r		 += lo;
    if ( r > hi )
	goto repeat;
    setstate(o);

#if !NO_POINTER_TAGS
    if ( !is_large_int(r) )
	i = tag_int(r);
    else
#endif
    {
	CHECK_HEAP(0, int_node_size);
	i	 = (Node *)regs.hp;
	i->info	 = &int_info;
	i->i.i	 = r;
	regs.hp += int_node_size;
    }

    return i;
}

@ 
The functions [[primGetStdGen]] and [[primSetStdGen]] manage a global
variable that maintains the default random number generator of the
\texttt{IO} monad. If the global variable has not been set,
[[primGetSetGen]] creates a new random number generator and seeds this
generator with the current time.

There is a fundamental problem with updating global variables like
[[stdGen]] in non-deterministic code. In our implementation, this
could leave a dangling pointer in [[stdGen]] when the
non-deterministic computation fails. While this could be avoided by
recording the update on the trail, things do not work out straight
when a search continuation is copied whose code did update [[stdGen]].
In this case, the global variable cannot be copied and therefore the
copy would start using wrong values for [[stdGen]]. For that reason,
we simply abort the program with an error message when
[[primSetStdGen]] is called in non-deterministic code. Note that this
can happen only when this function is used in an [[unsafePerformIO]]
context.

<<random.h>>=
extern void primSetStdGen(Node *);
extern Node *primGetStdGen(void);

@ 
<<random.c>>=
static Node *stdGen;

#define DET_CHECK(what) do {					\
	if ( regs.bp ) abort_with("cannot duplicate " what);	\
    } while ( 0 )

void
primSetStdGen(Node *rng)
{
    assert(rng->info == &stdgen_info);

    DET_CHECK("Random.stdGen");
    if ( !stdGen )
	add_global_root(&stdGen);
    stdGen = rng;
}

Node *
primGetStdGen()
{
    if ( !stdGen )
    {
	long		seed;
	Node		*s;
	struct timeval	tv;
	struct int_node	seed_node;

	gettimeofday(&tv, NULL);
	srandom(tv.tv_sec ^ tv.tv_usec);
	seed = random();

#if !NO_POINTER_TAGS
	if ( !is_large_int(seed) )
	    s = tag_int(seed);
	else
#endif
	{
	    seed_node.info = &int_info;
	    seed_node.i	   = seed;
	    s		   = (Node *)&seed_node;
	}
	primSetStdGen(primMkStdGen(s));
    }

    return stdGen;
}
