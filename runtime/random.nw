% -*- noweb-code-mode: c-mode -*-
% $Id: random.nw 2252 2007-06-15 17:45:09Z wlux $
%
% Copyright (c) 2004-2005, Wolfgang Lux
% See ../LICENSE for the full license.
%
\subsection{Random Numbers}
The functions in this file implement the primitives for the
\texttt{Random} module. The implementation is based on the
[[random]] function from the standard C library.

<<random.c>>=
#include "config.h"
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <sys/time.h>
#include "debug.h"
#include "run.h"
#include "heap.h"
#include "stack.h"
#include "threads.h"
#include "eval.h"
#include "data.h"
#include "io_monad.h"
#include "cam.h"

#define pair_node_size	 closure_node_size(2)
#define pair_info	 ___40__44__41__info

static DEFINE_DATA(___40__44__41_, "(,)", 0, 2);

@
We use state arrays with a size of 128 bytes. While larger state
arrays of 256 bytes are possible, it turns out that the first random
number is always an even number for them.

<<random.c>>=
#define STATESIZE 128

@ 
In order to support multiple independent random number generators,
each generator uses its own state array, which is saved in the
corresponding [[StdGen]] node. The state arrays are allocated outside
of the heap in order to avoid problems with the garbage collection
moving nodes around, and are released when their [[StdGen]] nodes
becomes garbage.

<<random.c>>=
#define EVAL_RIGID_STDGEN(l)	EVAL_RIGID_ABSTRACT(l)
#define stdgen_node_size	wordsof(StdGen)

static void finalize_stdgen(Node *);

typedef struct stdgen_node {
    NodeInfo *info;
    int	     random;		/* buffer for random bits */
    int      valid;		/* number of valid bits in the buffer */
    char     *state;
} StdGen;

static NodeInfo stdgen_info = {
    ABSTRACT_KIND, 0, stdgen_node_size, ot_binary, "@<<Random.StdGen>>",
    eval_whnf, 0, finalize_stdgen
};

static void
finalize_stdgen(Node *node)
{
    StdGen *rng = (StdGen *)node;

    free(rng->state);
}

@ 
The function [[mkStdGen :: Int -> StdGen]] creates a new random number
generator that is initialized with the seed passed to [[mkStdGen]].
Note that the code carefully maintains the state of the default random
number generator so as to not disrupt its operation.

<<random.c>>=
DECLARE_LABEL(extern, __mkStdGen);

FUNCTION(__mkStdGen)
{
    unsigned long seed;
    StdGen	  *rng;
 ENTRY_LABEL(extern, __mkStdGen)
    EVAL_RIGID_INT(__mkStdGen);

    seed = long_val(sp[0]);
    sp	+= 1;

    CHECK_HEAP(stdgen_node_size);
    rng		= (StdGen *)hp;
    rng->info   = &stdgen_info;
    rng->state  = (char *)malloc(STATESIZE);
    rng->valid  = 0;
    rng->random = 0;
    hp	       += stdgen_node_size;
    register_final((Node *)rng);

    if ( rng->state == NULL )
	sys_error("mkStdGen");
    setstate(initstate(seed, rng->state, STATESIZE));
    RETURN((Node *)rng);
}

@ 
The function [[nextRStdGen :: Int -> Int -> StdGen -> (Int,StdGen)]]
returns the next random number in the specified range for a particular
random number generator. The function [[nextStdGen]] is a partial
application of [[nextRStdGen]] using the minimum and maximum [[Int]]
values as lower and upper bounds, respectively. Both functions
carefully restore the state of the global random number generator
after computing the number.

In order to ensure an equal distribution of random numbers between the
two bounds $l$ and $h$, we interpret the random numbers returned by
[[random]] as a bit stream and take $n$ bits from that stream at every
call, where $n$ is the smallest number such that $2^n \geq h-l+1$. In
addition, we discard values outside the range $(0,h-l+1)$ in that
stream. A little analysis reveals that on average we take
$\frac{2^n}{h-l+1}$ values from the input stream. Thus, even in the
worst case, when we have $h-l+1 = 2^{n-1} + 1$ and
$\frac{2^n}{h-l+1} = \frac{2^n}{2^{n-1}+1} \approx 2$, we take at most
two values from the stream on average. Note that [[random]] returns
a number in the range $(0,2^{31}-1)$. Therefore, the [[while]] loop
may be executed more than once if a 32-bit or larger result is
requested.

<<random.c>>=
DECLARE_LABEL(extern, __nextStdGen);
DECLARE_LABEL(extern, __nextRStdGen);
DECLARE_LABEL(static, __nextRStdGen_1);
DECLARE_LABEL(static, __nextRStdGen_2);

static const struct int_node minInt_node = { &int_info, LONG_MIN };
static const struct int_node maxInt_node = { &int_info, LONG_MAX };

#define minInt (Node *)&minInt_node
#define maxInt (Node *)&maxInt_node

FUNCTION(__nextStdGen)
{
 ENTRY_LABEL(extern, __nextStdGen)
    CHECK_STACK(2);
    sp	 -= 2;
    sp[0] = sp[2];
    sp[1] = minInt;
    sp[2] = maxInt;
    GOTO(__nextRStdGen_2);
}

FUNCTION(__nextRStdGen)
{
    Node *lo, *hi;
 ENTRY_LABEL(extern, __nextRStdGen)
    EVAL_RIGID_INT(__nextRStdGen);
    lo	  = sp[0];
    hi	  = sp[1];
    sp[0] = hi;
    sp[1] = lo;
    GOTO(__nextRStdGen_1);
}

static
FUNCTION(__nextRStdGen_1)
{
    Node *rng, *hi;
 ENTRY_LABEL(static, __nextRStdGen_1)
    EVAL_RIGID_INT(__nextRStdGen_1);
    hi	  = sp[0];
    rng	  = sp[2];
    sp[0] = rng;
    sp[2] = hi;
    GOTO(__nextRStdGen_2);
}

static
FUNCTION(__nextRStdGen_2)
{
    char   *o;
    int    bits;
    long   lo, hi, r;
    unsigned long diff, mask;
    StdGen *rng;
    Node   *p, *i;

 ENTRY_LABEL(static, __nextRStdGen_2)
    EVAL_RIGID_STDGEN(__nextRStdGen_2);

    CHECK_HEAP(pair_node_size + int_node_size);

    rng	= (StdGen *)sp[0];
    lo	= long_val(sp[1]);
    hi	= long_val(sp[2]);
    sp += 3;

    /* determine the number of bits required */
    if ( hi >= lo )
    {
	diff = hi - lo;
	mask = 1;
	for ( bits = 1; diff & ~mask; bits++ )
	    mask = (mask << 1) + 1;
    }
    else
	FAIL();

    o = setstate(rng->state);
repeat:
    r = 0;
    while ( rng->valid < bits )
    {
    	bits	   -= rng->valid;
     	mask	  >>= rng->valid;
   	r	   |= rng->random << bits;
    	rng->random = random();
	rng->valid  = 31;
    }
    r		 |= rng->random & mask;
    rng->valid   -= bits;
    rng->random >>= bits;
    r		 += lo;
    if ( r > hi )
	goto repeat;
    setstate(o);

#if !ONLY_BOXED_OBJECTS
    if ( !is_large_int(r) )
	i = mk_unboxed(r);
    else
#endif
    {
	i	= (Node *)hp;
	i->info = &int_info;
	i->i.i  = r;
	hp     += int_node_size;
    }

    p		 = (Node *)hp;
    p->info	 = &pair_info;
    p->c.args[0] = i;
    p->c.args[1] = (Node *)rng;
    hp		+= pair_node_size;

    RETURN(p);
}

@ 
The function [[genRange :: StdGen -> (Int,Int)]] yields the range of
values returned by the generator.

<<random.c>>=
FUNCTION(__genRange)
{
    Node *r;
 ENTRY_LABEL(extern, __genRange)
    sp		+= 1;

    CHECK_HEAP(pair_node_size);
    r		 = (Node *)hp;
    r->info	 = &pair_info;
    r->c.args[0] = minInt;
    r->c.args[1] = maxInt;
    hp		+= pair_node_size;

    RETURN(r);
}

@ 
The functions [[getStdGen :: IO StdGen]] and [[setStdGen :: StdGen -> IO ()]]
manage a global variable that maintains the default random number
generator. If the global variable has not been set, [[getSetGen]]
creates a new random number generator and initializes this generator
from the current time.

There is a fundamental problem with updating global variables like
[[stdGen]] in non-deterministic code. In our implementation, this
could leave a dangling pointer in [[stdGen]] when the
non-deterministic computation fails. While this could be avoided by
recording the update on the trail, things do not work out straight
when a search continuation whose code did update [[stdGen]] is copied.
In this case, the global variable cannot be copied and therefore the
copy would start using wrong values for [[stdGen]]. For that reason,
we simply abort the program with an error message when [[setStdGen]]
or [[getStdGen]] is called in non-deterministic code. Note that this
can happen only when these functions are used in an
[[unsafePerformIO]] context.

<<random.c>>=
static StdGen *stdGen;

#define DET_CHECK(what) do { \
    if ( bp ) fail_with("cannot duplicate " what); \
} while (0)

DECLARE_LABEL(extern, __setStdGen);

FUNCTION(__setStdGen)
{
 ENTRY_LABEL(extern, __setStdGen)
    EVAL_RIGID_STDGEN(__setStdGen);
    if ( stdGen == 0 )
	add_global_root((Node **)&stdGen);
    DET_CHECK("Random.stdGen");
    stdGen = (StdGen *)sp[0];
    sp	  += 2;
    RETURN(unit);
}

DECLARE_LABEL(extern, __getStdGen);
DECLARE_LABEL(static, __getStdGen_1);

FUNCTION(__getStdGen)
{
    long	   seed;
    struct timeval tv;
    static struct int_node seed_node = { &int_info, 0 };
 ENTRY_LABEL(extern, __getStdGen)
    if ( stdGen )
    {
	sp += 1;
	RETURN((Node *)stdGen);
    }

    gettimeofday(&tv, NULL);
    srandom(tv.tv_sec ^ tv.tv_usec);
    seed = random();

    CHECK_STACK1();
    sp -= 1;
#if !ONLY_BOXED_OBJECTS
    if ( !is_large_int(seed) )
	sp[0] = mk_unboxed(seed);
    else
#endif
    {
	seed_node.i = seed;
	sp[0]	    = (Node *)&seed_node;
    }
    sp[1] = (Node *)__getStdGen_1;
    GOTO(__mkStdGen);
}

static
FUNCTION(__getStdGen_1)
{
    Node *rng;
 ENTRY_LABEL(static, __getStdGen_1)
    rng = *sp++;
    add_global_root((Node **)&stdGen);
    DET_CHECK("Random.stdGen");
    stdGen = (StdGen *)rng;
    RETURN(rng);
}
