% -*- noweb-code-mode: c-mode -*-
% $Id: refs.nw 2856 2009-05-29 12:47:35Z wlux $
%
% Copyright (c) 2004-2009, Wolfgang Lux
% See ../LICENSE for the full license.
%
\subsection{Mutable References}
The \texttt{IOExts} library implements mutable references in the
\texttt{IO} monad. The implementation is based on three primitives,
which are defined in this file.

<<refs.c>>=
#include "config.h"
#include <stdio.h>
#include <stdlib.h>
#include "debug.h"
#include "run.h"
#include "regs.h"
#include "heap.h"
#include "stack.h"
#include "trail.h"
#include "spaces.h"
#include "search.h"
#include "eval.h"
#include "cam.h"

#define ioref_node_size global_ref_node_size

static NodeInfo ioref_info = {
    MUTABLE_KIND, 0, ioref_node_size, 0, "<IORef>", eval_whnf, 0, 0, 0
};

@ 
The function [[newIORef]] creates a new mutable reference and
initializes it with the specified value.

<<refs.c>>=
DECLARE_LABEL(extern, __newIORef);

FUNCTION(__newIORef)
{
    Node *ref;
 ENTRY_LABEL(extern, __newIORef)
    CHECK_HEAP(1, ioref_node_size);
    ref		= (Node *)regs.hp;
    ref->info	= &ioref_info;
    ref->g.node	= regs.r[0];
    ref->g.spc	= regs.ss;
    regs.hp    += ioref_node_size;
    RET(ref);
}

@ 
The function [[readIORef]] returns the value that is currently saved
in a mutable reference. Note that the value is \emph{not} evaluated to
head normal form because the \texttt{IO} monad is lazy.

<<refs.c>>=
DECLARE_LABEL(extern, __readIORef);
DECLARE_LABEL(static, __readIORef_1);

FUNCTION(__readIORef)
{
 ENTRY_LABEL(extern, __readIORef)
    SAVE_REGS(0);
    EVAL_NODE(__readIORef_1);
}

static
FUNCTION(__readIORef_1)
{
    Node *node;
 ENTRY_LABEL(static, __readIORef_1)
    MATCH_RIGID_MUTABLE(__readIORef_1);
    assert(regs.r[0]->info == &ioref_info);
    node = regs.r[0]->g.node;
    if ( !is_local_space(regs.r[0]->g.spc) )
	node = copy_global(0, node, regs.r[0]->g.spc);
    RETURN(node, 0);
}

@ 
The function [[writeIORef]] updates the value saved in a mutable
reference. The old value is saved on the trail even though the
\texttt{IO} monad is expected to run only deterministic code. However,
trailing prevents program crashes when this function is used inside
[[unsafePerformIO]]. Note that this makes it impossible to use mutable
references for generating globally unique indices that are different
even across different branches of a non-deterministic search. On the
other hand it is possible to write to a mutable reference defined in
an enclosing search space, but we must be careful to \emph{copy} the
assigned node into the search space of the mutable reference in order
to prevent local nodes from escaping their scope.

\ToDo{We would like to use the [[SET_FIELD]] macro for updating the
  mutable reference node. However, the macro is based on an assumption
  that does not hold for mutable references, namely that only fresh
  nodes are assigned to the updated field.}

<<refs.c>>=
DECLARE_LABEL(extern, __writeIORef);
DECLARE_LABEL(static, __writeIORef_1);

FUNCTION(__writeIORef)
{
 ENTRY_LABEL(extern, __writeIORef)
    SAVE_REGS(1);
    EVAL_NODE(__writeIORef_1);
}

static
FUNCTION(__writeIORef_1)
{
 ENTRY_LABEL(static, __writeIORef_1)
    MATCH_RIGID_MUTABLE(__writeIORef_1);
    assert(regs.r[0]->info == &ioref_info);
    if ( !is_local_space(regs.r[0]->g.spc) )
    {
	SearchSpace *spc;

	regs.r[1] = regs.sp[0];
	regs.ret  = (Label)regs.sp[1];
	regs.sp	 += 2;
	BEGIN_LOCAL_ROOTS1(spc)
	do
	{
	    assert(regs.bp);
	    spc = regs.ss;
	    suspend_search(2, regs.bp->btSpc);
	    regs.r[1] = copy_graph(2, regs.r[1], spc);
	}
	while ( !is_local_space(regs.r[0]->g.spc) );
	END_LOCAL_ROOTS
#if !COPY_SEARCH_SPACE
	if ( (word *)regs.r[0] < regs.hlim )
	    DO_SAVE(regs.r[0], g.node);
#endif
	regs.r[0]->g.node = regs.r[1];
	RET(unit);
    }
#if !COPY_SEARCH_SPACE
    if ( (word *)regs.r[0] < regs.hlim )
	DO_SAVE(regs.r[0], g.node);
#endif
    regs.r[0]->g.node = regs.sp[0];
    RETURN(unit, 1);
}
