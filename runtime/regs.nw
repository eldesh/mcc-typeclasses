% -*- noweb-code-mode: c-mode -*-
% $Id: regs.nw 2671 2008-04-21 06:55:42Z wlux $
%
% Copyright (c) 2006-2008, Wolfgang Lux
% See ../LICENSE for the full license.
%
\subsection{The Abstract Machine Registers}\label{sec:registers}
The abstract machine's state is kept in a few registers, which are %'
available as fields of the global [[regs]] structure.
\begin{itemize}
\item The register [[cid]] contains the id of the current thread.
  Setting [[cid]] to [[0]] denotes that no thread is running.
\item The stack pointer [[sp]] points to the node on top of the stack.
\item The register [[ds_base]] points to the base of the current
  thread's stack segment. %'
\item The register [[efp]] points to the current I/O exception handler
  frame. Note that each thread has its own exception handler.
\item If stability is enabled, the register [[thd]] points to the
  thread node of the current thread.
\item The state of threads which are ready to run but not active is
  maintained in the ready queue [[rq]].
\item The register [[hp]] maintains the allocation pointer into the
  heap.
\item The contents of the register [[hlim]] caches the value of [[hp]]
  at the time when the current choice point or search context was
  created. It is used in order to decide whether trailing is necessary
  when a variable or lazy application node is updated.
\item A pointer to the current search space is kept in register [[ss]].
\item The trail pointer [[tp]] points to the first free entry in the
  trail stack.
\item The register [[bp]] points to the current choice point or search
  context in the stack.
\item The register [[handlers]] contains a pointer to the current
  non-deterministic execution handlers. These functions determine how
  a non-determinstic computation step is processed in the current
  execution mode (I/O, global search, or encapsulated search) of the
  abstract machine.
\item The return address register [[ret]] is used for passing the
  return address to a function. Leaf procedures can return by jumping
  to that address. Non-leaf procedures must save the register to the
  stack before calling another function.
\item The argument registers \texttt{r[0]} to \texttt{r[N\_REGS-1]}
  are used for passing arguments to a function. The result of a
  function is returned in register \texttt{r[0]}.
\end{itemize}

<<regs.h>>=
#define N_REGS 128

typedef void *word;

extern struct regs {
    unsigned int		 cid;
    union node			 **sp;
    union node			 **ds_base;
    struct exception_frame	 *efp;
#if YIELD_NONDET
    struct thread		 *thd;
#endif
    union thread_node		 *rq;
    word			 *hp;
    word			 *hlim;
    struct search_space		 *ss;
#if !COPY_SEARCH_SPACE
    struct save_rec		 *tp;
#endif
    struct choicepoint		 *bp;
    const struct nondet_handlers *handlers;
    Label			 ret;
    union node			 *r[N_REGS];
} regs;

@ 
At startup, the abstract machine registers must be initialized by
calling the function [[init_regs]].

<<regs.h>>=
extern void init_regs(void);

@ 
<<regs.c>>=
#include "config.h"
#include "run.h"
#include "regs.h"
#include "heap.h"
#include "stack.h"
#include "trail.h"
#include "threads.h"
#include "spaces.h"

struct regs regs;

void
init_regs()
{
    regs.cid	  = 0;
    regs.sp	  = stack_end;
    regs.ds_base  = 0;
    regs.efp	  = 0;
#if YIELD_NONDET
    regs.thd	  = 0;
#endif
    regs.rq	  = 0;
    regs.hp	  = regs.hlim = heap_base;
    regs.ss	  = 0;
#if !COPY_SEARCH_SPACE
    regs.tp	  = trail_base;
#endif
    regs.bp	  = 0;
    regs.handlers = 0;
    regs.ret	  = 0;
}
