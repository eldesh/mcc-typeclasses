% -*- noweb-code-mode: c-mode -*-
% $Id: show.nw 3067 2012-03-11 22:15:50Z wlux $
%
% Copyright (c) 2001-2012, Wolfgang Lux
% See ../LICENSE for the full license.
%
\subsection{Show Function}
The function \verb|shows :: a -> String -> String| is used to convert
a value lazily into a string. This function uses the information
available in the node info structure in order to determine how its
argument should be displayed.

A minor variant of \verb|shows| is the impure function
\verb|dvals :: a -> String -> String|, which does not evaluate its
argument and also does not wait until unbound variables are
instantiated. The primary objective of this function is to support the
declarative debugger.

<<show.c>>=
#include "config.h"
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <locale.h>
#include <math.h>
#include "debug.h"
#include "run.h"
#include "regs.h"
#include "heap.h"
#include "stack.h"
#include "threads.h"
#include "spaces.h"
#include "search.h"
#include "trail.h"
#include "eval.h"
#include "vars.h"
#include "cstring.h"
#include "show.h"
#include "cam.h"
#include "trace.h"

DECLARE_LABEL(extern, __shows);
DECLARE_LABEL(extern, __dvals);
DECLARE_LABEL(static, showp);
DECLARE_LABEL(static, showp_1);
DECLARE_LABEL(static, showCat);
DECLARE_LABEL(static, showCat_1);
DECLARE_LABEL(static, showArgs);
DECLARE_LABEL(static, showInfix);
DECLARE_LABEL(static, showTuple);
DECLARE_LABEL(static, showTupleArgs);
DECLARE_LABEL(static, showList);
DECLARE_LABEL(static, showList_1);
DECLARE_LABEL(static, showTail);
DECLARE_LABEL(static, showTail_1);
DECLARE_LABEL(static, dvalCons);
DECLARE_LABEL(static, showString);
DECLARE_LABEL(static, showString_1);
DECLARE_LABEL(static, showStringTail);
DECLARE_LABEL(static, showStringTail_1);

#if NO_POINTER_TAGS
static const struct int_node zero_node = { &int_info, 0 };
static const struct int_node one_node  = { &int_info, 1 };
static const struct int_node two_node  = { &int_info, 2 };

# define zero CONST(zero)
# define one  CONST(one)
# define two  CONST(two)

# define asc_null (Node *)char_table
# define space	  (Node *)(char_table + ' ')
# define comma	  (Node *)(char_table + ',')
# define colon	  (Node *)(char_table + ':')
# define lparen	  (Node *)(char_table + '(')
# define rparen	  (Node *)(char_table + ')')
# define lbracket (Node *)(char_table + '[')
# define rbracket (Node *)(char_table + ']')
# define dblquote (Node *)(char_table + '\"')

#else

# define zero tag_int(0)
# define one  tag_int(1)
# define two  tag_int(2)

# define asc_null tag_char('\0')
# define space	  tag_char(' ')
# define comma	  tag_char(',')
# define colon	  tag_char(':')
# define lparen	  tag_char('(')
# define rparen	  tag_char(')')
# define lbracket tag_char('[')
# define rbracket tag_char(']')
# define dblquote tag_char('\"')

#endif


DECLARE_LABEL(static, eval_lazy_2);
DECLARE_LABEL(static, eval_lazy_3);
DECLARE_LABEL(static, eval_lazy_4);

static NodeInfo showp_lazy_info_table[] = LAZYINFO("showp", showp, 4);
static NodeInfo showCat_lazy_info_table[] = LAZYINFO("showCat", showCat, 2);
static NodeInfo showArgs_lazy_info_table[] = LAZYINFO("showArgs", showArgs, 3);
static NodeInfo showTupleArgs_lazy_info_table[] =
    LAZYINFO("showTupleArgs", showTupleArgs, 3);
static NodeInfo showTail_lazy_info_table[] = LAZYINFO("showTail", showTail, 3);
static NodeInfo dvalCons_lazy_info_table[] = LAZYINFO("dvalCons", dvalCons, 2);
static NodeInfo showString_lazy_info_table[] =
    LAZYINFO("showString", showString, 4);
static NodeInfo showStringTail_lazy_info_table[] =
    LAZYINFO("showStringTail", showStringTail, 3);

static
FUNCTION(eval_lazy_2)
{
    Node  *susp;
    Label entry;
 ENTRY_LABEL(static, eval_lazy_2)
    /* get the arguments */
    susp      = regs.r[0];
    entry     = susp->info->entry;
    regs.r[0] = susp->c.args[0];
    regs.r[1] = susp->c.args[1];

    /* create an indirection if there is an update frame immediately above */
    if ( regs.ret == update )
    {
#if !COPY_SEARCH_SPACE
	if ( (word *)susp < regs.hlim )
	{
	    DO_SAVE(susp, n.node);
	    susp->info += 2;
	}
	else
#endif
	    susp->info = &indir_info;
	assert(is_queueMe_node(regs.sp[0]));
	susp->n.node = regs.sp[0];
    }

    /* otherwise, lock the application node and create an update frame */
    else
    {
	SAVE_RET1(susp);
	regs.ret = update;

#if !COPY_SEARCH_SPACE
	if ( (word *)susp < regs.hlim )
	{
	    DO_SAVE(susp, q.wq);
	    susp->info++;
	}
	else
#endif
	    susp->info = queueMe_info_table;
	susp->q.wq = 0;
    }

    /* enter the callee */
    EXEC2(entry, regs.r[0], regs.r[1]);
}

static
FUNCTION(eval_lazy_3)
{
    Node  *susp;
    Label entry;
 ENTRY_LABEL(static, eval_lazy_3)
    /* get the arguments */
    susp      = regs.r[0];
    entry     = susp->info->entry;
    regs.r[0] = susp->c.args[0];
    regs.r[1] = susp->c.args[1];
    regs.r[2] = susp->c.args[2];

    /* create an indirection if there is an update frame immediately above */
    if ( regs.ret == update )
    {
#if !COPY_SEARCH_SPACE
	if ( (word *)susp < regs.hlim )
	{
	    DO_SAVE(susp, n.node);
	    susp->info += 2;
	}
	else
#endif
	    susp->info = &indir_info;
	assert(is_queueMe_node(regs.sp[0]));
	susp->n.node = regs.sp[0];
    }

    /* otherwise, lock the application node and create an update frame */
    else
    {
	SAVE_RET1(susp);
	regs.ret = update;

#if !COPY_SEARCH_SPACE
	if ( (word *)susp < regs.hlim )
	{
	    DO_SAVE(susp, q.wq);
	    susp->info++;
	}
	else
#endif
	    susp->info = queueMe_info_table;
	susp->q.wq = 0;
    }

    /* enter the callee */
    EXEC3(entry, regs.r[0], regs.r[1], regs.r[2]);
}

static
FUNCTION(eval_lazy_4)
{
    Node  *susp;
    Label entry;
 ENTRY_LABEL(static, eval_lazy_4)
    /* get the arguments */
    susp      = regs.r[0];
    entry     = susp->info->entry;
    regs.r[0] = susp->c.args[0];
    regs.r[1] = susp->c.args[1];
    regs.r[2] = susp->c.args[2];
    regs.r[3] = susp->c.args[3];

    /* create an indirection if there is an update frame immediately above */
    if ( regs.ret == update )
    {
#if !COPY_SEARCH_SPACE
	if ( (word *)susp < regs.hlim )
	{
	    DO_SAVE(susp, n.node);
	    susp->info += 2;
	}
	else
#endif
	    susp->info = &indir_info;
	assert(is_queueMe_node(regs.sp[0]));
	susp->n.node = regs.sp[0];
    }

    /* otherwise, lock the application node and create an update frame */
    else
    {
	SAVE_RET1(susp);
	regs.ret = update;

#if !COPY_SEARCH_SPACE
	if ( (word *)susp < regs.hlim )
	{
	    DO_SAVE(susp, q.wq);
	    susp->info++;
	}
	else
#endif
	    susp->info = queueMe_info_table;
	susp->q.wq = 0;
    }

    /* enter the callee */
    EXEC4(entry, regs.r[0], regs.r[1], regs.r[2], regs.r[3]);
}

@
The external entry points \texttt{shows} and \texttt{dvals} just call
the main worker function \texttt{showp}. This function is called with
two additional arguments. The first is an integer precedence level
that controls whether an application must be enclosed in parentheses
and the second is an integer flag, which is set to 1 if \texttt{showp}
is called from \texttt{shows} and 0 otherwise. Note that
\texttt{dvals} calls \texttt{showp} with precedence level two. Thus,
all arguments are printed as if they did occur in an argument
position, which is the way \texttt{dvals} is used by the debugger.

<<show.c>>=
FUNCTION(__shows)
{
    Node *tail;
 ENTRY_LABEL(extern, __shows)
    tail = regs.r[1];
    EXEC4(showp, regs.r[0], zero, one, tail);
}

FUNCTION(__dvals)
{
    Node *tail;
 ENTRY_LABEL(extern, __dvals)
    tail = regs.r[1];
    EXEC4(showp, regs.r[0], two, zero, tail);
}

@
When necessary, the \texttt{showp} function evaluates its argument to
weak head normal form and makes sure that it is not an unbound
variable. Then, it dispatches on the type of the node and delegates
processing to special purpose functions in order to handle data
structures with arguments.

<<show.c>>=
static
FUNCTION(showp)
{
 ENTRY_LABEL(static, showp)
    C_STACK_CHECK(showp);
    TRACE_FUN("showp", 4);
    SAVE_REGS(3);
    if ( regs.r[2] == zero )
	GOTO(showp_1);
    EVAL(showp_1);
}

static
FUNCTION(showp_1)
{
    bool	 isop, isneg;
    char	 buf[32], *mpz_str = 0;
    const char   *str;
    unsigned int i, argc;
    double	 d;
    Node	 *node, *susp, *cons, *tail, *arglist, **argp, *prec, *show;

 ENTRY_LABEL(static, showp_1)

    str	  = buf;
    argc  = 0;
    node  = regs.r[0];
    prec  = regs.sp[0];
    show  = regs.sp[1];
    tail  = regs.sp[2];
    isop  = false;
    isneg = false;

 again:
#if !NO_POINTER_TAGS
    if ( is_tagged_char(node) )
    {
	buf[0] = '\'';
	strcat(lit_char(buf + 1, '\0', untag_char(node), '\''), "'");
    }
    else if ( is_tagged_int(node) )
    {
	sprintf(buf, "%ld", untag_int(node));
	isneg = buf[0] == '-';
    }
    else
#endif
	switch ( node_kind(node) )
	{
	case INDIR_KIND:
	    node = node->n.node;
	    goto again;

	case SUSPEND_KIND:
	case FAPP_KIND:
	case QUEUEME_KIND:
	    str = "_";
	    break;

	case LVAR_KIND:
	    if ( show != zero )
		CALL1(sync_var, showp_1, node);
	    str = lookup_name(node);
	    break;

	case GVAR_KIND:
	    if ( show != zero )
		CALL1(sync_global, showp_1, node);
	case GAPP_KIND:
	    assert(show == zero);
	    assert(!is_local_space(node->g.spc));
	    regs.ret  = showCat_1;
	    regs.r[0] = node->g.node;
	    regs.r[1] = prec;
	    regs.r[2] = show;
	    regs.r[3] = nil;
	    regs.sp  += 2;
	    suspend_search(4, node->g.spc);
	    GOTO(showp);

	case CHAR_KIND:
#if NO_POINTER_TAGS
	    buf[0] = '\'';
	    strcat(lit_char(buf + 1, '\0', node->ch.ch, '\''), "'");
	    break;
#else
	    curry_panic("impossible: showp_1: CHAR_KIND\n");
#endif

	case INT_KIND:
	    sprintf(buf, "%ld", node->i.i);
	    isneg = buf[0] == '-';
	    break;

	case BIGINT_KIND:
	    isneg   = mpz_sgn(node->bi.mpz) < 0;
	    mpz_str = malloc(mpz_sizeinbase(node->bi.mpz, 10) + 2);
	    if ( !mpz_str )
		sys_error("showp: mpz_get_str");
	    str = mpz_get_str(mpz_str, 10, node->bi.mpz);
	    break;

	case FLOAT_KIND:
	    get_double_val(d, node);
	    lit_double(buf, d);
	    isneg = buf[0] == '-';
	    break;

	case PTR_KIND:
	    sprintf(buf, long_val(prec) > 1 ? "(%s %p)" : "%s %p",
		    node->info->cname, node->p.ptr);
	    break;

	case FOREIGN_PTR_KIND:
	    sprintf(buf, long_val(prec) > 1 ? "(%s %p)" : "%s %p",
		    node->info->cname, node->fp.ptr);
	    break;

	case VECTOR_KIND:
	    if ( is_tuple(node->info) )
		CALL_RET3(showTuple, 3, node, show, tail);
	    else
	    {
		str  = node->info->cname;
		argc = vector_argc(node);
	    }
	    break;

	case EAPP_KIND:
	    str  = node->info->cname;
	    isop = is_operator(node->info);
	    argc = closure_argc(node);
	    break;

	case PAPP_KIND:
	    str  = node->info->cname;
	    isop = is_operator(node->info) && !is_tuple(node->info);
	    argc = closure_argc(node);
	    // Special case for partial applications in code transformed for
	    // debugging. These end up as partial applications of an auxiliary
	    // function @n generated by the compiler. For clarity we omit those
	    // auxiliary functions in the output.
	    if ( argc == 1 && isop )
	    {
		const char *cp = str + strlen(str);
		while ( cp > str && isdigit(cp[-1]) )
		    cp--;
		if ( cp >= str + 2 && cp[-2] == '.' && cp[-1] == '@' )
		    CALL_RET4(showp, 3, node->c.args[0], prec, show, tail);
	    }
	    break;

	case MUTABLE_KIND:
	case SEARCH_CONT_KIND:
	case ABSTRACT_KIND:
	    str = node->info->cname;
	    if ( str == 0 )
		str = "<abstract>";
	    break;

	case CAPP_KIND:
	    if ( node->info == &cons_info )
		CALL_RET5(showList, 3, node->c.args[0], node->c.args[1],
			  prec, show, tail);
	    else if ( is_tuple(node->info) )
		CALL_RET3(showTuple, 3, node, show, tail);
	    else
	    {
		str  = node->info->cname;
		isop = is_operator(node->info);
		argc = closure_argc(node);
	    }
	    break;

	default:
	    invalid_arg("showp", node_kind(node));
	}

    if ( isop && argc == 2 )
	CALL_RET4(showInfix, 3, node, prec, show, tail);

    regs.r[0] = node;
    CHECK_HEAP(1, (argc + 2) * cons_node_size + suspend_node_size(3));
    node = regs.r[0];
    prec = regs.sp[0];
    show = regs.sp[1];
    tail = regs.sp[2];

    if ( argc > 0 )
    {
	argp	= is_vector_node(node) ? node->a.args : node->c.args;
	arglist = nil;
	for ( i = argc; i-- > 0; )
	{
	    cons	    = (Node *)regs.hp;
	    cons->info	    = &cons_info;
	    cons->c.args[0] = argp[i];
	    cons->c.args[1] = arglist;
	    arglist	    = cons;
	    regs.hp	   += cons_node_size;
	}

	if ( long_val(prec) > 1 )
	{
	    cons	    = (Node *)regs.hp;
	    cons->info	    = &cons_info;
	    cons->c.args[0] = rparen;
	    cons->c.args[1] = tail;
	    regs.hp	   += cons_node_size;

	    tail = cons;
	}

	susp		= (Node *)regs.hp;
	susp->info	= showArgs_lazy_info_table;
	susp->c.args[0] = arglist;
	susp->c.args[1] = show;
	susp->c.args[2] = tail;
	regs.hp	       += suspend_node_size(3);

	tail = susp;
    }

    if ( isop || (isneg && long_val(prec) > 0) )
    {
	cons		= (Node *)regs.hp;
	cons->info	= &cons_info;
	cons->c.args[0] = rparen;
	cons->c.args[1] = tail;
	regs.hp	       += cons_node_size;

	tail = cons;
    }

    regs.r[0] = prefix_string(0, str, tail);
    if ( mpz_str )
	free(mpz_str);

    CHECK_HEAP(1, 2*cons_node_size);
    cons = regs.r[0];
    prec = regs.sp[0];
    if ( isop || (isneg && long_val(prec) > 0) )
    {
	tail		= cons;
	cons		= (Node *)regs.hp;
	cons->info	= &cons_info;
	cons->c.args[0] = lparen;
	cons->c.args[1] = tail;
	regs.hp	       += cons_node_size;
    }
    if ( long_val(prec) > 1 && argc > 0 )
    {
	tail		= cons;
	cons		= (Node *)regs.hp;
	cons->info	= &cons_info;
	cons->c.args[0] = lparen;
	cons->c.args[1] = tail;
	regs.hp	       += cons_node_size;
    }

    RETURN(cons, 3);
}

@ 
The function \texttt{showCat} concatenates two strings. It is
effectively equivalent to the Prelude operator \texttt{(++)}.

<<show.c>>=
static
FUNCTION(showCat)
{
 ENTRY_LABEL(static, showCat)
    TRACE_FUN("showCat", 2);
    SAVE_REGS(1);
    EVAL(showCat_1);
}

static
FUNCTION(showCat_1)
{
    Node *susp, *list;
 ENTRY_LABEL(static, showCat_1)
    BEGIN_MATCH_RIGID_NODE(showCat_1)
    {
    case NIL_TAG:
	list = regs.sp[0];
	break;
    case CONS_TAG:
	CHECK_HEAP(1, suspend_node_size(2) + cons_node_size);
	susp		= (Node *)regs.hp;
	susp->info	= showCat_lazy_info_table;
	susp->c.args[0] = regs.r[0]->c.args[1];
	susp->c.args[1] = regs.sp[0];
	regs.hp	       += suspend_node_size(2);

	list		= (Node *)regs.hp;
	list->info	= &cons_info;
	list->c.args[0] = regs.r[0]->c.args[0];
	list->c.args[1] = susp;
	regs.hp	       += cons_node_size;
	break;
    default:
	unexpected_tag("showCat", node_tag(regs.r[0]));
    }
    END_MATCH_RIGID_NODE
    RETURN(list, 1);
}

@
The function \texttt{showArgs} displays the arguments of an
application. Each argument is preceded by a space and enclosed in
parentheses if necessary.

<<show.c>>=
static
FUNCTION(showArgs)
{
    Node *arglist, *susp, *cons, *tail, *show;
 ENTRY_LABEL(static, showArgs)
    C_STACK_CHECK(showArgs);
    TRACE_FUN("showArgs", 3);

    CHECK_HEAP(3, suspend_node_size(3) + suspend_node_size(4) + cons_node_size);
    arglist = regs.r[0];
    show    = regs.r[1];
    tail    = regs.r[2];

    assert(arglist->info == &cons_info);
    if ( arglist->c.args[1] != nil )
    {
	susp		= (Node *)regs.hp;
	susp->info	= showArgs_lazy_info_table;
	susp->c.args[0] = arglist->c.args[1];
	susp->c.args[1] = show;
	susp->c.args[2] = tail;
	regs.hp	       += suspend_node_size(3);

	tail = susp;
    }

    susp	    = (Node *)regs.hp;
    susp->info	    = showp_lazy_info_table;
    susp->c.args[0] = arglist->c.args[0];
    susp->c.args[1] = two;
    susp->c.args[2] = show;
    susp->c.args[3] = tail;
    regs.hp	   += suspend_node_size(4);

    cons	    = (Node *)regs.hp;
    cons->info	    = &cons_info;
    cons->c.args[0] = space;
    cons->c.args[1] = susp;
    regs.hp	   += cons_node_size;

    RET(cons);
}

@
The function \texttt{showInfix} is invoked when the node to be shown
is an application of an infix operator to exactly two arguments. Such
nodes are displayed in infix notation. As we do not have access to the
fixity of the operator, we will ensure that every nested infix
application is enclosed in parentheses.

<<show.c>>=
static
FUNCTION(showInfix)
{
    long prec;
    Node *node, *tail, *show, *cons, *susp;
 ENTRY_LABEL(static, showInfix)
    CHECK_HEAP(4, 2 * cons_node_size + suspend_node_size(4));
    node = regs.r[0];
    prec = long_val(regs.r[1]);
    show = regs.r[2];
    tail = regs.r[3];

    if ( prec > 0 )
    {
	cons		= (Node *)regs.hp;
	cons->info	= &cons_info;
	cons->c.args[0] = rparen;
	cons->c.args[1] = tail;
	regs.hp	       += cons_node_size;

	tail = cons;
    }

    susp	    = (Node *)regs.hp;
    susp->info	    = showp_lazy_info_table;
    susp->c.args[0] = node->c.args[1];
    susp->c.args[1] = one;
    susp->c.args[2] = show;
    susp->c.args[3] = tail;
    regs.hp	   += suspend_node_size(4);

    cons	    = (Node *)regs.hp;
    cons->info	    = &cons_info;
    cons->c.args[0] = space;
    cons->c.args[1] = susp;
    regs.hp	   += cons_node_size;

    regs.r[0] = node->c.args[0];
    regs.r[3] = prefix_string(3, node->info->cname, cons);

    CHECK_HEAP(4, 2 * cons_node_size + suspend_node_size(4));
    node = regs.r[0];
    show = regs.r[2];
    tail = regs.r[3];

    cons	    = (Node *)regs.hp;
    cons->info	    = &cons_info;
    cons->c.args[0] = space;
    cons->c.args[1] = tail;
    regs.hp	   += cons_node_size;

    if ( prec > 0 )
    {
	susp		= (Node *)regs.hp;
	susp->info	= showp_lazy_info_table;
	susp->c.args[0] = node;
	susp->c.args[1] = one;
	susp->c.args[2] = show;
	susp->c.args[3] = cons;
	regs.hp	       += suspend_node_size(4);

	cons		= (Node *)regs.hp;
	cons->info	= &cons_info;
	cons->c.args[0] = lparen;
	cons->c.args[1] = susp;
	regs.hp	       += cons_node_size;

	RET(cons);
    }

    EXEC4(showp, regs.r[0], one, regs.r[2], cons);
}

@
The code of \texttt{showp} jumps to the label \texttt{showTuple} in
order to display a tuple. In this case, the arguments are separated by
commas and not enclosed in parentheses. Instead, the whole tuple is
always enclosed in parentheses. Note that the function is prepared to
handle tuples as well as vectors, which are shown like a tuple.

<<show.c>>=
static
FUNCTION(showTuple)
{
    unsigned int i, argc;
    Node	 *tuple, *susp, *cons, *tail, *arglist, **argp, *show;
 ENTRY_LABEL(static, showTuple)
    argc = is_vector_node(regs.r[0]) ? vector_argc(regs.r[0])
				     : closure_argc(regs.r[0]);
    CHECK_HEAP(3, (argc + 1) * cons_node_size + suspend_node_size(3)
	           + suspend_node_size(4));
    tuple = regs.r[0];
    show  = regs.r[1];
    tail  = regs.r[2];

    argp    = is_vector_node(tuple) ? tuple->a.args : tuple->c.args;
    argp   += argc;
    arglist = nil;

    for ( i = argc; i-- > 1; )
    {
	cons		= (Node *)regs.hp;
	cons->info	= &cons_info;
	cons->c.args[0] = *--argp;
	cons->c.args[1] = arglist;
	arglist		= cons;
	regs.hp	       += cons_node_size;
    }

    cons	    = (Node *)regs.hp;
    cons->info	    = &cons_info;
    cons->c.args[0] = rparen;
    cons->c.args[1] = tail;
    regs.hp	   += cons_node_size;
    tail	    = cons;

    if ( argc )
    {
	if ( argc > 1 )
	{
	    susp	    = (Node *)regs.hp;
	    susp->info	    = showTupleArgs_lazy_info_table;
	    susp->c.args[0] = arglist;
	    susp->c.args[1] = show;
	    susp->c.args[2] = tail;
	    regs.hp	   += suspend_node_size(3);
	    tail	    = susp;
	}

	susp		= (Node *)regs.hp;
	susp->info	= showp_lazy_info_table;
	susp->c.args[0] = *--argp;
	susp->c.args[1] = zero;
	susp->c.args[2] = show;
	susp->c.args[3] = tail;
	regs.hp	       += suspend_node_size(4);
	tail		= susp;
    }

    cons	    = (Node *)regs.hp;
    cons->info	    = &cons_info;
    cons->c.args[0] = lparen;
    cons->c.args[1] = tail;
    regs.hp	   += cons_node_size;

    RET(cons);
}

static
FUNCTION(showTupleArgs)
{
    Node *arglist, *susp, *cons, *tail, *show;
 ENTRY_LABEL(static, showTupleArgs)
    C_STACK_CHECK(showTupleArgs);
    TRACE_FUN("showTupleArgs", 3);

    CHECK_HEAP(3, suspend_node_size(3) + suspend_node_size(4) + cons_node_size);
    arglist = regs.r[0];
    show    = regs.r[1];
    tail    = regs.r[2];

    assert(arglist->info == &cons_info);
    if ( arglist->c.args[1] != nil )
    {
	susp		= (Node *)regs.hp;
	susp->info	= showTupleArgs_lazy_info_table;
	susp->c.args[0] = arglist->c.args[1];
	susp->c.args[1] = show;
	susp->c.args[2] = tail;
	regs.hp	       += suspend_node_size(3);

	tail = susp;
    }

    susp	    = (Node *)regs.hp;
    susp->info	    = showp_lazy_info_table;
    susp->c.args[0] = arglist->c.args[0];
    susp->c.args[1] = zero;
    susp->c.args[2] = show;
    susp->c.args[3] = tail;
    regs.hp	   += suspend_node_size(4);

    cons	    = (Node *)regs.hp;
    cons->info	    = &cons_info;
    cons->c.args[0] = comma;
    cons->c.args[1] = susp;
    regs.hp	   += cons_node_size;

    RET(cons);
}

@
When lists are shown with the \texttt{show} function we use the
standard list notation, enclosing the whole list with square brackets
and separating elements with commas. As a special case we use string
notation if \texttt{showTail} detects that the first element of the
list is a character, assuming that the list is well typed.

When lists are shown with \texttt{dvals}, we must be prepared to
handle closed as well as open lists, i.e., lists with an
uninstantiated tail. If the list is closed we use the standard list
notation as well, but if the list is open we show the list as a
sequence of infix constructor applications. Furthermore, since
\texttt{dvals} does not evaluate the elements of the list to head
normal form it is not sufficient to check only the first element of
the list to make use of the string notation. Instead, we must check
that every element of the list is a character. To prevent entering an
infinite loop when applied to a cyclic list -- as can be created, for
instance, with the function \texttt{repeat x = xs where x:xs} -- we
impose an arbitrary limit (10000 elements) up to which the list is
checked and fall back to the open list notation if the list is longer.

<<show.c>>=
enum list_kind { is_open, is_closed, is_string };

static bool
is_char(Node *node)
{
    while ( is_tagged_ptr(node) && is_indir_node(node) )
	node = node->n.node;
#if NO_POINTER_TAGS
    return is_char_node(node);
#else
    return is_tagged_char(node);
#endif
}

static enum list_kind
list_kind(Node *head, Node *tail)
{
    unsigned int   n;
    enum list_kind kind;

    kind = is_char(head) ? is_string : is_closed;
    while ( is_tagged_ptr(tail) && is_indir_node(tail) )
	tail = tail->n.node;
    for ( n = 1; tail->info == &cons_info && n < 10000; n++ )
    {
	if ( kind == is_string && !is_char(tail->c.args[0]) )
	    kind = is_closed;
	tail = tail->c.args[1];
	while ( is_tagged_ptr(tail) && is_indir_node(tail) )
	    tail = tail->n.node;
    }
    return tail == nil ? kind : is_open;
}

static
FUNCTION(showList)
{
 ENTRY_LABEL(static, showList)
    SAVE_REGS(4);
    if ( regs.r[3] == zero )
	GOTO(showList_1);
    EVAL(showList_1);
}

static
FUNCTION(showList_1)
{
    enum list_kind kind;
    Node	   *hd, *tl, *susp, *susp2, *cons, *tail, *show, *prec;
 ENTRY_LABEL(static, showList_1)
    hd	 = regs.r[0];
    show = regs.sp[2];
    if ( show != zero )
    {
	for (;;)
	{
#if !NO_POINTER_TAGS
	    if ( is_tagged_char(hd) )
		kind = is_string;
	    else if ( is_tagged_int(hd) )
		kind = is_closed;
	    else
#endif
		switch ( hd->info->kind )
		{
		case INDIR_KIND:
		    regs.r[0] = hd = hd->n.node;
		    continue;
		case LVAR_KIND:
		case GVAR_KIND:
		    CALL1(sync_var, showList_1, hd);
		case CHAR_KIND:
#if NO_POINTER_TAGS
		    kind = is_string;
		    break;
#else
		    curry_panic("impossible: showList_1: CHAR_KIND\n");
#endif
		default:
		    kind = is_closed;
		}
	    break;
	}
    }
    else
    {
	tl   = regs.sp[0];
	kind = list_kind(hd, tl);
    }

    switch ( kind )
    {
    case is_string:
	CHECK_HEAP(1, suspend_node_size(4) + 2 * cons_node_size);
	hd   = regs.r[0];
	tl   = regs.sp[0];
	tail = regs.sp[3];

	cons		= (Node *)regs.hp;
	cons->info	= &cons_info;
	cons->c.args[0] = dblquote;
	cons->c.args[1] = tail;
	regs.hp	       += cons_node_size;

	susp		= (Node *)regs.hp;
	susp->info	= showString_lazy_info_table;
	susp->c.args[0] = hd;
	susp->c.args[1] = tl;
	susp->c.args[2] = asc_null;
	susp->c.args[3] = cons;
	regs.hp	       += suspend_node_size(4);

	cons		= (Node *)regs.hp;
	cons->info	= &cons_info;
	cons->c.args[0] = dblquote;
	cons->c.args[1] = susp;
	regs.hp	       += cons_node_size;
	break;

    case is_closed:
	CHECK_HEAP(1, suspend_node_size(3) + suspend_node_size(4)
		       + 2 * cons_node_size);
	hd   = regs.r[0];
	tl   = regs.sp[0];
	show = regs.sp[2];
	tail = regs.sp[3];

	cons		= (Node *)regs.hp;
	cons->info	= &cons_info;
	cons->c.args[0] = rbracket;
	cons->c.args[1] = tail;
	regs.hp	       += cons_node_size;

	susp		= (Node *)regs.hp;
	susp->info	= showTail_lazy_info_table;
	susp->c.args[0] = tl;
	susp->c.args[1] = show;
	susp->c.args[2] = cons;
	regs.hp	       += suspend_node_size(3);

	susp2		 = (Node *)regs.hp;
	susp2->info	 = showp_lazy_info_table;
	susp2->c.args[0] = hd;
	susp2->c.args[1] = zero;
	susp2->c.args[2] = show;
	susp2->c.args[3] = susp;
	regs.hp		+= suspend_node_size(4);

	cons		= (Node *)regs.hp;
	cons->info	= &cons_info;
	cons->c.args[0] = lbracket;
	cons->c.args[1] = susp2;
	regs.hp	       += cons_node_size;
	break;

    case is_open:
	prec = regs.sp[1];
	show = regs.sp[2];
	assert(show == zero);
	if ( long_val(prec) > 0 )
	{
	    CHECK_HEAP(1, suspend_node_size(2) + suspend_node_size(4) +
			  2 * cons_node_size);
	    hd   = regs.r[0];
	    tl   = regs.sp[0];
	    tail = regs.sp[3];

	    cons	    = (Node *)regs.hp;
	    cons->info	    = &cons_info;
	    cons->c.args[0] = rparen;
	    cons->c.args[1] = tail;
	    regs.hp	   += cons_node_size;

	    susp	    = (Node *)regs.hp;
	    susp->info	    = dvalCons_lazy_info_table;
	    susp->c.args[0] = tl;
	    susp->c.args[1] = cons;
	    regs.hp	   += suspend_node_size(2);

	    susp2	     = (Node *)regs.hp;
	    susp2->info	     = showp_lazy_info_table;
	    susp2->c.args[0] = hd;
	    susp2->c.args[1] = one;
	    susp2->c.args[2] = zero;
	    susp2->c.args[3] = susp;
	    regs.hp	    += suspend_node_size(4);

	    cons	    = (Node *)regs.hp;
	    cons->info	    = &cons_info;
	    cons->c.args[0] = lparen;
	    cons->c.args[1] = susp2;
	    regs.hp	   += cons_node_size;
	}
	else
	{
	    CHECK_HEAP(1, suspend_node_size(2));
	    hd   = regs.r[0];
	    tl   = regs.sp[0];
	    tail = regs.sp[3];

	    susp	    = (Node *)regs.hp;
	    susp->info	    = dvalCons_lazy_info_table;
	    susp->c.args[0] = tl;
	    susp->c.args[1] = tail;
	    regs.hp	   += suspend_node_size(2);

	    CALL_RET4(showp, 4, hd, one, zero, susp);
	}
	break;

    default:
	curry_panic("impossible: list_kind = %u\n", kind);
    }

    RETURN(cons, 4);
}

static
FUNCTION(showTail)
{
 ENTRY_LABEL(static, showTail)
    C_STACK_CHECK(showTail);
    TRACE_FUN("showTail", 3);
    SAVE_REGS(2);
    if ( regs.r[1] == zero )
	GOTO(showTail_1);
    EVAL_NODE(showTail_1);
}

static
FUNCTION(showTail_1)
{
    Node *list, *susp, *susp2, *cons, *tail, *show;
 ENTRY_LABEL(static, showTail_1)
    BEGIN_MATCH_RIGID_NODE(showTail_1)
    case NIL_TAG:
	tail = regs.sp[1];
	ENTER(tail, 2);

    case CONS_TAG:
	CHECK_HEAP(1, suspend_node_size(3) + suspend_node_size(4)
		       + cons_node_size);
	list = regs.r[0];
	show = regs.sp[0];
	tail = regs.sp[1];

	susp		= (Node *)regs.hp;
	susp->info	= showTail_lazy_info_table;
	susp->c.args[0] = list->c.args[1];
	susp->c.args[1] = show;
	susp->c.args[2] = tail;
	regs.hp	       += suspend_node_size(3);

	susp2		 = (Node *)regs.hp;
	susp2->info	 = showp_lazy_info_table;
	susp2->c.args[0] = list->c.args[0];
	susp2->c.args[1] = zero;
	susp2->c.args[2] = show;
	susp2->c.args[3] = susp;
	regs.hp		+= suspend_node_size(4);

	cons		= (Node *)regs.hp;
	cons->info	= &cons_info;
	cons->c.args[0] = comma;
	cons->c.args[1] = susp2;
	regs.hp	       += cons_node_size;
	break;

    default:
	unexpected_tag("showTail", node_tag(regs.r[0]));
    END_MATCH_RIGID_NODE

    RETURN(cons, 2);
}

static
FUNCTION(dvalCons)
{
    Node *list, *susp, *susp2, *cons, *tail;
 ENTRY_LABEL(static, dvalCons)
    C_STACK_CHECK(dvalCons);
    TRACE_FUN("dvalCons", 2);

    list = regs.r[0];
 again:
    switch ( node_tag(list) )
    {
    case INDIR_TAG:
	list = list->n.node;
	goto again;

    case LVAR_TAG:
    case EVAL_TAG:
	regs.r[0] = list;
	CHECK_HEAP(2, suspend_node_size(4) + cons_node_size);
	list = regs.r[0];
	tail = regs.r[1];

	susp		= (Node *)regs.hp;
	susp->info	= showp_lazy_info_table;
	susp->c.args[0] = list;
	susp->c.args[1] = one;
	susp->c.args[2] = zero;
	susp->c.args[3] = tail;
	regs.hp	       += suspend_node_size(4);

	cons		= (Node *)regs.hp;
	cons->info	= &cons_info;
	cons->c.args[0] = colon;
	cons->c.args[1] = susp;
	regs.hp	       += cons_node_size;
	break;

    case NIL_TAG:
	tail = regs.r[1];
	ENT(tail);

    case CONS_TAG:
	regs.r[0] = list;
	CHECK_HEAP(2, suspend_node_size(2) + suspend_node_size(4)
		       + cons_node_size);
	list = regs.r[0];
	tail = regs.r[1];

	susp		= (Node *)regs.hp;
	susp->info	= dvalCons_lazy_info_table;
	susp->c.args[0] = list->c.args[1];
	susp->c.args[1] = tail;
	regs.hp	       += suspend_node_size(2);

	susp2		 = (Node *)regs.hp;
	susp2->info	 = showp_lazy_info_table;
	susp2->c.args[0] = list->c.args[0];
	susp2->c.args[1] = one;
	susp2->c.args[2] = zero;
	susp2->c.args[3] = susp;
	regs.hp		+= suspend_node_size(4);

	cons		= (Node *)regs.hp;
	cons->info	= &cons_info;
	cons->c.args[0] = colon;
	cons->c.args[1] = susp2;
	regs.hp	       += cons_node_size;
	break;

    default:
	unexpected_tag("dvalCons", node_tag(list));
    }

    RET(cons);
}

@ 
The \texttt{showString} code is used to print a non-empty string head.
It evaluates the head of the string to a character node and prints
that character. It will then continue to display the remaining string.

<<show.c>>=
static
FUNCTION(showString)
{
 ENTRY_LABEL(static, showString)
    SAVE_REGS(3);
    EVAL(showString_1);
}

static
FUNCTION(showString_1)
{
    char buf[10];
    Node *hd, *tl, *prev, *tail, *susp;
 ENTRY_LABEL(static, showString_1)
    MATCH_RIGID_CHAR(showString_1);
    CHECK_HEAP(1, suspend_node_size(3));

    hd	 = regs.r[0];
    tl	 = regs.sp[0];
    prev = regs.sp[1];
    tail = regs.sp[2];

    susp	    = (Node *)regs.hp;
    susp->info	    = showStringTail_lazy_info_table;
    susp->c.args[0] = tl;
    susp->c.args[1] = hd;
    susp->c.args[2] = tail;
    regs.hp	   += suspend_node_size(3);

    RETURN(prefix_string(0, lit_char(buf, char_val(prev), char_val(hd), '"'),
			 susp),
	   3);
}

static
FUNCTION(showStringTail)
{
 ENTRY_LABEL(static, showStringTail)
    SAVE_REGS(2);
    EVAL_NODE(showStringTail_1);
}

static
FUNCTION(showStringTail_1)
{
    Node *cons, *tail;
 ENTRY_LABEL(static, showStringTail_1)
    BEGIN_MATCH_RIGID_NODE(showStringTail_1)
    case NIL_TAG:
	tail = regs.sp[1];
	ENTER(tail, 2);
    case CONS_TAG:
	break;
    default:
	unexpected_tag("showStringTail", node_tag(regs.r[0]));
    END_MATCH_RIGID_NODE

    cons = regs.r[0];
    CALL_RET4(showString, 2, cons->c.args[0], cons->c.args[1],
	      regs.sp[0], regs.sp[1]);
}

@
The functions [[primShowEFloat]] and [[primShowFFloat]] convert a
floating-point number into a string using scientific and fixed point
formats, respectively. In order to avoid buffer overflows, these
functions use a dynamically allocated temporary buffer. If the
precision argument is not negative, it specifies the number of decimal
digits of the result.

<<show.h>>=
extern Node *primShowEFloat(Node *, Node *);
extern Node *primShowFFloat(Node *, Node *);

@ 
<<show.c>>=
Node *
primShowEFloat(Node *prec, Node *num)
{
    long       p;
    double     d;
    char       fmt[20], *buf;
    const char *loc;
    Node       *str;

    get_double_val(d, num);
    p = long_val(prec);
    if ( p >= 0 )
	sprintf(fmt, "%%.%lde", p);
    else
	strcpy(fmt, "%e");
    p   = p >= 0 ? 10 + p : 25;
    buf = (char *)malloc(p);
    if ( buf == NULL )
	sys_error("showEFloat");
    loc = setlocale(LC_NUMERIC, NULL);
    setlocale(LC_NUMERIC, "C");
    sprintf(buf, fmt, d);
    setlocale(LC_NUMERIC, loc);

    str = from_string(0, buf);
    free(buf);
    return str;
}

Node *
primShowFFloat(Node *prec, Node *num)
{
    int	       n;
    long       p;
    double     d;
    char       fmt[20], *buf;
    const char *loc;
    Node       *str;

    get_double_val(d, num);
    p = long_val(prec);
    if ( p >= 0 )
	sprintf(fmt, "%%.%ldf", p);
    else
	strcpy(fmt, "%f");
    frexp(d, &n);
    if ( p >= 0 )
	p = (n > 0 ? n / 3 + 4 : 5) + p;
    else
	p = (n >= 0 ? n : -n) / 3 + 20;
    buf = (char *)malloc(p);
    if ( buf == NULL )
	sys_error("showFFloat");
    loc = setlocale(LC_NUMERIC, NULL);
    setlocale(LC_NUMERIC, "C");
    sprintf(buf, fmt, d);
    setlocale(LC_NUMERIC, loc);

    str = from_string(0, buf);
    free(buf);
    return str;
}

@ 
Due to lack of a better place, we also implement the function
[[primConvertToFloat]] here, which converts a string into a
floating-point number. The conversion is based on the C function
[[strtod]]. We drop leading zeros from the input string in order to
reduce the size of the temporary string buffer.

<<show.h>>=
extern Node *primConvertToFloat(Node *);

@ 
<<show.c>>=
Node *
primConvertToFloat(Node *str)
{
    char       *buf;
    const char *loc;
    double     d;
    Node       *chr, *r;

    /* drop leading zeros */
    while ( is_indir_node(str) )
	str = str->n.node;
    while ( str != nil )
    {
	chr = str->c.args[0];
	while ( is_tagged_ptr(chr) && is_indir_node(chr) )
	    chr = chr->n.node;
	if ( char_val(chr) != '0' )
	    break;
	str = str->c.args[1];
	while ( is_indir_node(str) )
	    str = str->n.node;
    }

    /* convert the remaining string */
    if ( str != nil )
    {
	buf = to_string(str);
	loc = setlocale(LC_NUMERIC, NULL);
	setlocale(LC_NUMERIC, "C");
	d   = strtod(buf, NULL);
	setlocale(LC_NUMERIC, loc);
	free(buf);
    }
    else
	d = 0;

    /* return a fresh number */
    CHECK_HEAP(0, float_node_size);
    r	     = (Node *)regs.hp;
    r->info  = &float_info;
    put_double_val(r, d);
    regs.hp += float_node_size;

    return r;
}
