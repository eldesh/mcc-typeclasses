% -*- noweb-code-mode: c-mode -*-
% $Id: spaces.nw 2665 2008-04-21 06:44:49Z wlux $
%
% Copyright (c) 2003-2008, Wolfgang Lux
% See ../LICENSE for the full license.
%
\subsection{Managing Search Spaces}\label{sec:spaces}
By default, the runtime system uses an extended trailing scheme in
order to manage multiple bindings for variables and shared
applications in encapsulated search. A new search space is created
each time [[try]] is applied to a new search goal. Variable nodes and
shared lazy applications are tagged with the search space that was
active at the time of their allocation. Search spaces are organized in
trees with the root space corresponding to the initial evaluation of a
particular search goal, and the other nodes of that tree corresponding
to different evaluation states of that goal. Within each tree, the
bindings of only one space are active at each time. A pointer to this
space is recorded in the [[s.active]] field of the root space. The
current search space is maintained in the register [[regs.ss]].

\textbf{Invariant}: The runtime system preserves the invariant
[[regs.ss->root->s.active == regs.ss]]. The garbage collector makes
use of this invariant.

Since only local variables and applications can be changed by a
computation and their bindings are not visible outside of the search
goal, it is possible to switch bindings lazily, i.e., only when
another search space from the same tree is activated. This allows
implementing the well known optimization of performing undo and redo
operations only up to the closest common ancestor.

The runtime system can also be configured to use a copying
implementation of encapsulated search~\cite{Lux04:CopyTrail}, where a
copy of the search goal is used whenever the evaluation of a partially
solved search goal is continued. In that case, search spaces only
serve as tags that allow distinguishing local and non-local variables
and shared lazy applications, respectively, and carry no further
information.

<<spaces.h>>=
#if 0
typedef struct search_space SearchSpace; /* already declared in heap.h */
#endif
#if !COPY_SEARCH_SPACE
typedef struct script Script;
#endif

struct search_space {
    NodeInfo	*info;
#if !COPY_SEARCH_SPACE
    SearchSpace	    *root;	/* pointer to root space */
    SearchSpace	    *parent;	/* parent space */
    union {
	SearchSpace *active;	/* active space (root space) */
	Script	    *script;	/* saved local bindings (non-root space) */
    } s;
#endif
};

@ 
<<spaces.c>>=
#include "config.h"
#include "debug.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <setjmp.h>
#include "run.h"
#include "regs.h"
#include "heap.h"
#include "stack.h"
#include "threads.h"
#include "spaces.h"
#include "trail.h"
#include "eval.h"
#include "vars.h"

#if !COPY_SEARCH_SPACE
static void switch_bindings(SearchSpace *space);
static void set_safe_ancestor(SearchSpace *space, Choicepoint *cp);
#endif
static Node *copy_node(Node *node, SearchSpace *space);

static NodeInfo search_space_info = {
    SEARCH_SPACE_KIND, 0, wordsof(struct search_space), 0, 0, no_eval, 0, 0, 0
};

@ 
Each variable and shared application is tagged with the search space
in which it was created. A node is considered local when its search
space and the current search space have the same root.

<<spaces.h>>=
#if !COPY_SEARCH_SPACE
# define is_local_space(space) ((space)->root == regs.ss->root)
#else
# define is_local_space(space) ((space) == regs.ss)
#endif

@ 
When an encapsulated search returns, a new search space is created,
which saves the bindings of all variable and shared application nodes
updated during the evaluation of the search goal and also their
previous values, which are recorded on the global trail stack. These
values are saved to the \emph{script} of the new search space.

Note that the [[s.script]] field of a search space node is shared with
the [[s.active]] field. This is possible because a root space does not
have any bindings to save and the [[s.active]] field does not have a
meaning for non-root spaces.

<<spaces.h>>=
#if !COPY_SEARCH_SPACE
typedef struct script_rec {
    word	 *addr;		/* address to be updated */
    word	 inInfo;	/* info vector inside space */
    word	 outInfo;	/* info vector outside space */
    unsigned int ofs;		/* offset within node */
    word	 inVal;		/* value inside space */
    word	 outVal;	/* value outside space */
} ScriptRec;

struct script {
    NodeInfo  *info;
    unsigned  length;
    ScriptRec data[1];
};
#endif

@
<<spaces.c>>=
#if !COPY_SEARCH_SPACE
static const int ot_script[] = {
    -(int)wordsof(ScriptRec), 3,
    word_offsetof(ScriptRec, addr),
    word_offsetof(ScriptRec, inVal),
    word_offsetof(ScriptRec, outVal)
};
static NodeInfo script_info = {
    SCRIPT_KIND, 0, 0, ot_script, 0, no_eval, 0, 0, 0
};
#endif

@
When the runtime system activates the bindings of a search space, only
the bindings of the search spaces up to the closest common ancestor
of the current active space and the designated active space are
changed. In order to find that ancestor, [[switch_bindings]] first
computes the depths of both spaces.\footnote{Actually, only the
  difference of both depths is computed.} Next, the algorithm either
undoes the bindings of the current active space and its ancestors or
it reverts the parent pointer chain of the designated active space and
its ancestors until reaching two spaces at the same depth. From then
on, the algorithm undoes the bindings of the current active space's
ancestors and reverts the parent pointer chain of the designated
active space's ancestors until reaching the closest common ancestor.
Finally, the algorithm restores the parent pointer chain of the
designated active space and redoes its bindings on the fly.

<<spaces.c>>=
#if !COPY_SEARCH_SPACE
static void
switch_bindings(SearchSpace *space)
{
    int		 balance;
    unsigned int n;
    ScriptRec	 *scr;
    SearchSpace	 *root, *active, *child, *parent;

    /* Return if the designated space is already active */
    root   = space->root;
    active = root->s.active;
    if ( active == space )
	return;

    /* Determine the depths of the current and the designated active space */
    balance = 0;
    for ( parent = active; parent; parent = parent->parent )
	balance++;
    for ( parent = space; parent; parent = parent->parent )
	balance--;

    /* Undo bindings up to two balanced spaces */
    child = 0;
    if ( balance > 0 )
	do
	{
	    <<Undo the bindings of space [[active]]>>
	    active = active->parent;
	    balance--;
	}
	while ( balance > 0 );
    else
	while ( balance < 0 )
	{
	    parent	  = space->parent;
	    space->parent = child;
	    child	  = space;
	    space	  = parent;
	    balance++;
	}

    /* Undo bindings up to the closest common ancestor */
    while ( active != space )
    {
	<<Undo the bindings of space [[active]]>>
	active = active->parent;

	parent	      = space->parent;
	space->parent = child;
	child	      = space;
	space	      = parent;
    }

    /* Redo the bindings down to the designated active space */
    while ( child )
    {
	parent	       = active;
	active	       = child;
	child	       = active->parent;
	active->parent = parent;

	<<Redo the bindings of space [[active]]>>
    }

    /* The designated space is now active */
    root->s.active = active;
}
#endif

@ 
<<Undo the bindings of space [[active]]>>=
if ( active->s.script )
{
    n	= vector_argc(active->s.script) / wordsof(ScriptRec);
    scr = active->s.script->data + n;
    while ( n-- > 0 )
    {
	--scr;
	ASSERT(heap_base <= scr->addr && scr->addr < heap_end);
	scr->addr[INFO_OFS] = scr->outInfo;
	scr->addr[scr->ofs] = scr->outVal;
    }
}

@ 
<<Redo the bindings of space [[active]]>>=
if ( active->s.script )
{
    n	= vector_argc(active->s.script) / wordsof(ScriptRec);
    scr = active->s.script->data;
    for ( ; n-- > 0; scr++ )
    {
	ASSERT(heap_base <= scr->addr && scr->addr < heap_end);
	scr->addr[INFO_OFS] = scr->inInfo;
	scr->addr[scr->ofs] = scr->inVal;
    }
}

@ 
We have to be a little bit careful with the lazy update strategy in
conjunction with the immediate release upon failure policy employed by
the runtime system. If a search goal is evaluated inside another
encapsulated search or within a global backtracking search, failure of
the outer search may leave dangling pointers in the heap because the
active space of the inner search goal may have become garbage. For that
reason, we always set the [[s.active]] pointer in the root space to a
``safe'' space, which is a space that is allocated in the same heap
segment as the root space. To that end, the runtime system must call
the function [[leave_context]] before dropping the current search
context.

\ToDo{\label{todo:lazy-spaces}These updates could be delayed by
  recording root spaces whose active space is allocated in a younger
  heap segment and changing the active space to the first parent below
  the heap limit upon failure. Earlier implementations were using a
  finalization function on search spaces for this purpose. This was
  abandoned because the segment order preserving copying garbage
  collector (Sect.~\ref{sec:copying-gc}) would have to scan the trails
  of those active spaces, too, in order to find the roots of cross
  segment pointers. It is also unclear whether such a scheme is worth
  the effort. Examples where such cross segment active pointers occur
  look quite contrived as they require an interleaved execution of
  nested searches.}

Note that when a search succeeds or returns because of a
non-deterministic split, its heap segment becomes part of the
enclosing search space. Therefore, the choice point that identifies
the top-most heap segment must be passed to [[set_safe_ancestor]].

<<spaces.h>>=
#if !COPY_SEARCH_SPACE
extern void leave_context(void);
#else
# define leave_context()  /* empty */
#endif

@ 
<<spaces.c>>=
#if !COPY_SEARCH_SPACE
void
leave_context()
{
    set_safe_ancestor(regs.ss, regs.bp->btBp);
}

static void
set_safe_ancestor(SearchSpace *active, Choicepoint *cp)
{
    unsigned int n;
    word	 *lim;
    SearchSpace  *root;
    ScriptRec	 *scr;

    /* return immediately if the root is already active */
    root = active->root;
    if ( active == root )
	return;

    /* find the heap segment containing the root space */
    lim = regs.hp;
    while ( cp && root < (SearchSpace *)cp->btHp )
    {
	lim = cp->btHp;
	cp  = cp->btBp;
    }

    /* undo the bindings of all spaces above that segment */
    while ( active >= (SearchSpace *)lim && active != root )
    {
	<<Undo the bindings of space [[active]]>>
	active = active->parent;
    }

    /* save the active space */
    root->s.active = active;
}
#endif

@ 
The function [[new_search_space]] allocates a new empty search space
for a search goal and assigns it to the register [[regs.ss]]. The new
space is its own root and its (non-existent) bindings are considered
active.

<<spaces.h>>=
extern void new_search_space(unsigned int n_regs);

@
<<spaces.c>>=
void
new_search_space(unsigned int n_regs)
{
    SearchSpace *newSpace;

    CHECK_HEAP(n_regs, wordsof(SearchSpace));
    regs.ss = newSpace = (SearchSpace *)regs.hp;
    newSpace->info     = &search_space_info;
#if !COPY_SEARCH_SPACE
    newSpace->root     = newSpace;
    newSpace->parent   = 0;
    newSpace->s.active = newSpace;
#endif
    regs.hp	      += wordsof(SearchSpace);
}

@
The function [[inject_search_space]] tries to inject the bindings of a
space into the current search space by adopting the current space as a
child of the other space. Obviously, this is possible only if the
current space is a root space. Otherwise, the graph of the search
continuation must be copied into the current space.

<<spaces.h>>=
#if !COPY_SEARCH_SPACE
extern bool inject_search_space(SearchSpace *);
#else
# define inject_search_space(space)  false
#endif

@
<<spaces.c>>=
#if !COPY_SEARCH_SPACE
bool
inject_search_space(SearchSpace *space)
{
    /* fail if current space is not a root space */
    if ( regs.ss->parent )
	return false;

    /* otherwise re-parent the current space */
    regs.ss->root     = space->root;
    regs.ss->parent   = space;
    regs.ss->s.script = 0;

    /* activate the parent's bindings and succeed */
    switch_bindings(space);
    regs.ss->root->s.active = regs.ss;
    return true;
}
#endif

@
The function [[save_search_space]] saves the current bindings of the
local variables and lazy application nodes of the search goal by
creating a new search space. The new space then becomes the current
search space. If the trail is empty, i.e., the goal has not bound any
variables that could be instantiated differently in another solution
of the goal, no new search space node is allocated.

<<spaces.h>>=
#if !COPY_SEARCH_SPACE
extern void save_search_space(unsigned int n_regs);
#else
# define save_search_space(n_regs)  /* empty */
#endif

@ 
<<spaces.c>>=
#if !COPY_SEARCH_SPACE
void
save_search_space(unsigned int n_regs)
{
    unsigned int i, n;
    SearchSpace	 *space;
    Script	 *script;
    ScriptRec	 *scr;
    SaveRec	 *tp;

    assert(regs.ss->root->s.active == regs.ss);

    /* compute the size of the trail segment to be saved */
    n = regs.tp - regs.bp->btTp;
    CHECK_HEAP(n_regs,
	       wordsof(SearchSpace) + vector_node_size(n * wordsof(ScriptRec)));

    /* eventually allocate a new search space */
    /* NB garbage collection can decrease the size of the trail */
    n = regs.tp - regs.bp->btTp;
    if ( n > 0 )
    {
	/* initialize the script of the space */
	script	       = (Script *)regs.hp;
	script->info   = &script_info;
	script->length = vector_node_size(n * wordsof(ScriptRec));
	regs.hp	      += vector_node_size(n * wordsof(ScriptRec));

	scr = script->data;
	tp  = regs.bp->btTp;
	for ( i = 0; i < n; i++ )
	{
	    scr[i].addr    = tp[i].addr;
	    scr[i].inInfo  = tp[i].addr[INFO_OFS];
	    scr[i].outInfo = tp[i].info;
	    scr[i].ofs     = tp[i].ofs;
	    scr[i].inVal   = tp[i].addr[tp[i].ofs];
	    scr[i].outVal  = tp[i].val;
	}

	/* allocate a new search space */
	space		= (SearchSpace *)regs.hp;
	space->info	= &search_space_info;
	space->root	= regs.ss->root;
	space->parent	= regs.ss;
	space->s.script = script;
	regs.hp	       += wordsof(SearchSpace);

	/* the new search space is now active */
	regs.ss = space->root->s.active = space;
    }
}
#endif

@ 
The function [[discard_search_space]] discards all memory allocated
in the current search context.

<<spaces.h>>=
extern void discard_search_space(void);

@ 
<<spaces.c>>=
void
discard_search_space()
{
#if !COPY_SEARCH_SPACE
    /* undo the bindings of the current space */
    RESTORE(regs.bp->btTp);
#endif

    /* release the memory allocated in the current space */
    release_names(regs.bp->btDict);
    release_mem();
}

@
The function [[restore_search_space]] restores the bindings of a
search space and assigns it to the register [[regs.ss]].

<<spaces.h>>=
#if !COPY_SEARCH_SPACE
extern void restore_search_space(SearchSpace *space);
#else
# define restore_search_space(space)  (regs.ss = (space))
#endif

@ 
<<spaces.c>>=
#if !COPY_SEARCH_SPACE
void
restore_search_space(SearchSpace *space)
{
    /* activate the search space's bindings */
    regs.ss = space;
    switch_bindings(space);
}
#endif

@ 
When a search goal is restored into another search space that
is not a root space, it must be copied into that search space. Copying
is performed by the function [[copy_graph]], which is also used for
copying the solution of a solved goal into the current search
space. As a special case, [[copy_graph]] copies all nodes on the stack
and the ready queue if [[graph == 0]] and the runtime system has been
configured with the [[--enable-copying]] option. This special case is
used in order to create a copy of the current state of the computation
at a non-deterministic choice in global search.

<<spaces.h>>=
extern Node *copy_graph(unsigned int n_regs, Node *graph, SearchSpace *space);

@
We use an algorithm similar to a two-space copying garbage collector
in [[copy_graph]]. The algorithm uses two pointers into the free space
above the current allocation pointer [[regs.hp]]. The pointer
[[alloc]] is a temporary allocation pointer and [[scan]] is used for
processing the nodes that have been copied already, but whose
arguments still need to be copied. Whenever a node is copied, its info
pointer is replaced by a forwarding pointer to the new node. However,
in contrast to a copying garbage collector, we have to restore the old
info pointer after the graph has been copied. Therefore, we record the
addresses of all copied nodes at the end of the heap using our own
trail pointer [[ntp]]. Note that we do not need to save the info
pointers as they can be recovered from the copied nodes.

Special care is necessary when we run out of memory while copying a
graph, i.e., when [[alloc]] reaches [[ntp]]. Instead of extending the
garbage collector to handle forwarding pointers and preserve
allocation order with respect to the [[scan]] pointer, we resort to a
simpler solution and discard the partial copy, perform the garbage
collection, and then restart copying. Note that this is
computationally not more expensive than an extended garbage collection
scheme because otherwise the garbage collector would be copying the
partial copy of the graph.

If we run out of memory in [[copy_graph]] for a second time, the
program is aborted because further garbage collections cannot reclaim
additional space.

<<spaces.c>>=
static Node **alloc;			/* temp. allocation pointer */
static Node **ntp;			/* used for saving updated node */

@
We use the least significant bit in the info pointer of a node to mark
forwarding pointers.

<<spaces.c>>=
#define FORWARD_FLAG		0x01
#define is_forwarded(node)	((long)(node)->info & FORWARD_FLAG)
#define forward(node, new) \
    ((node)->info = (NodeInfo *)((long)(new) | FORWARD_FLAG))
#define get_forward(node)       ((Node *)((long)(node)->info & ~FORWARD_FLAG))

@ 
In order to request a garbage collection while copying a graph, a
[[longjmp]] to [[restart_copy]] is executed.

<<spaces.c>>=
static jmp_buf restart_copy;

@
The function [[copy_node]] copies a single node from the graph. If the
node is allocated outside the heap or is a constant, a pointer to the
original node is returned. The same is true for non-local variables,
shared applications, and search continuations when [[space != 0]].
When [[copy_node]] is called with a node that has been copied
(forwarded) to the current search space already, the new address of
the copied node is returned. For all other nodes, including non-local
variables, shared applications, and search continuations when
[[space == 0]], [[copy_node]] creates a copy of the node, writes a
forwarding pointer to the original node, and returns the new address
of the copied node.

A special case is made for search space nodes. Since the purpose of
[[copy_graph]] is to copy a graph into the current search space,
[[copy_node]] in general returns the current search space when it is
called with a non-forwarded search space node. However, if the address
of that node is equal to the [[space]] argument, a copy of the search
space is created. This is used by [[copy_search_space]] to copy the
local search space tree of a search continuation (see below). Note
that [[copy_graph]] calls [[copy_node]] only for the root of the graph
and for nodes that have been copied already. The search space of the
root of the graph is forwarded to the current search space at the
beginning of [[copy_graph]] and nodes that have been copied into the
current search space can contain pointers to non-forwarded search
spaces only when [[space == 0]]. Thus, the special exception for
[[copy_search_space]] cannot lead to a search space node being
unintentionally copied.

One has to be careful when the copied graph contains (local) search
continuations. Since these continuations may contain references to
other nodes from the copied graph, they have to be copied as well
using fresh search spaces. There are two options here. Either one can
create a fresh root space for each local search space encountered, or
one retains the original search tree structure. We have chosen the
latter option because the copying algorithm uses a breadth first
traversal, whereas copying local continuations into fresh root spaces
requires a depth first traversal in order to ensure that the local
bindings of a space are in effect while its nodes are begin copied. We
duplicate the search continuation's local search space tree by calling        %'
[[copy_search_tree]] for it when the continuation node is copied.

Due to the breadth first traversal of the graph, we cannot activate
the bindings of a particular local search space during copying.
Therefore, we must not shorten any indirection chains within those
spaces. Shortening is valid only for indirection nodes from the copied
graph as well as for indirections in outer search spaces. Note that
this restriction does not apply when the runtime system is configured
to use a copying implementation of encapsulated search. In that case,
all indirection chains can be shortened.

Actually, copying of local continuations could be avoided for
continuations that are closed, i.e., which do not reference any
non-local nodes. However, the runtime system currently offers no means
to check whether a search continuation is closed.

<<spaces.c>>=
#if !COPY_SEARCH_SPACE
static void copy_search_space(SearchSpace *spc);
#else
# define copy_search_space(spc) copy_node((Node *)(spc), spc)
#endif

static Node *
copy_node(Node *node, SearchSpace *space)
{
    bool	 do_copy;
    unsigned int sz;

    while ( is_tagged_ptr(node) && node >= (Node *)heap_base &&
	    node < (Node *)regs.hp )
    {
	/* check for a node that is already forwarded */
	if ( is_forwarded(node) )
	    node = get_forward(node);

	/* check whether we can/must share the node */
	else
	{
	    switch ( node_kind(node) )
	    {
	    case CHAR_KIND:
	    case INT_KIND:
	    case BIGINT_KIND:
	    case FLOAT_KIND:
	    case PTR_KIND:
	    case FOREIGN_PTR_KIND:
	    case ABSTRACT_KIND:
		do_copy = false;
		break;

	    case LVAR_KIND:
		do_copy = !space || is_forwarded(node->v.spc);
		break;

	    case LAZY_KIND:
		do_copy = node_tag(node) == NOUPD_TAG
		    || !space
		    || is_forwarded(node->s.spc);
		break;

	    case INDIR_KIND:
#if !COPY_SEARCH_SPACE
		if ( is_forwarded(node->n.spc) &&
		     space && node->n.spc->root != space->root )
		{
		    do_copy = true;
		    break;
		}
#endif
		node = node->n.node;
		continue;

	    case SEARCH_CONT_KIND:
		if ( is_forwarded(node->sc.ss) )
		    do_copy = true;
		else
		{
		    do_copy = !space || is_forwarded(node->sc.spc);
		    if ( do_copy )
			copy_search_space(node->sc.ss);
		}
		break;

	    case SEARCH_SPACE_KIND:
		if ( node != (Node *)space )
		{
		    do_copy = false;
		    node    = (Node *)regs.ss;
		    break;
		}
		/* FALL THROUGH!!! */
	    default:
		do_copy = true;
		break;
	    }

	    if ( do_copy )
	    {
		/* the node has to be copied; check if space is available */
		sz = node_size(node);
		if ( sz == 0 )
		    sz = node->a.length;
		if ( alloc + sz + 1 >= ntp )
		    longjmp(restart_copy, sz + 1);

		/* copy the node to the new location and leave a forwarding
		 * pointer in the original node */
		memcpy(alloc, node, sz * word_size);
		*--ntp = node;
		forward(node, alloc);
		node   = (Node *)alloc;
		alloc += sz;
	    }
	}
	break;
    }

    /* return the new address */
    return node;
}

@ 
In order to distinguish local nodes, which have to be copied, and
nodes from global search spaces, which are shared, [[copy_node]]
checks whether a node's search space is forwarded or not. This means         %'
that a search space and its parents have to be copied \emph{before}
any node from that space is copied. This is handled by the function
[[copy_search_space]]. Note that this function does not update the
parent pointers of the copied spaces because this is handled by the
loop in [[copy_graph]] below.

We maintain the invariant that for a copied search space, all of its
parents have been copied as well. Therefore, [[copy_search_space]]
applies itself to the active space of the search space tree.

<<spaces.c>>=
#if !COPY_SEARCH_SPACE
static void
copy_search_space(SearchSpace *spc)
{
    /* copy the space itself */
    copy_node((Node *)spc, spc);

    /* eventually copy the active space and its parents */
    /* NB don't activate the copied space's bindings since this could
     *    leave cross segment pointers behind */
    if ( !is_forwarded(spc->root->s.active) )
	copy_search_space(spc->root->s.active);

    /* copy all parent spaces */
    /* NB parent pointers will be updated later */
    for ( spc = spc->parent; spc && !is_forwarded(spc); spc = spc->parent )
	copy_node((Node *)spc, spc);
}
#endif

@
The main loop of the copying algorithm is implemented in [[copy_graph]].
After activating the bindings of the source space and copying the root
node of the graph, this function scans the copied nodes and recursively
copies their arguments. At the end, the info pointers of the copied
nodes are restored.

<<spaces.c>>=
Node *
copy_graph(unsigned int n_regs, Node *graph, SearchSpace *space)
{
    bool	 gc_done = false;
    unsigned int sz;
    Node	 *copy, **scan;
#if !COPY_SEARCH_SPACE
    SearchSpace	 *spc;

    assert(graph != 0);
#endif

    /* handle gc request */
    BEGIN_LOCAL_ROOTS2(graph, space)
    sz = setjmp(restart_copy);
    if ( sz )
    {
	if ( gc_done )
	    heap_exhausted();

	sz += alloc - (Node **)regs.hp;
	sz += (Node **)heap_end - ntp;
	for ( ; ntp < (Node **)heap_end; ntp++ )
	{
	    ASSERT(is_forwarded(*ntp));
	    (*ntp)->info = get_forward(*ntp)->info;
	}
	if ( space )
	{
#if !COPY_SEARCH_SPACE
	    for ( spc = space; spc; spc = spc->parent )
		spc->info = &search_space_info;
	    set_safe_ancestor(space, regs.bp);
#else
	    space->info = &search_space_info;
#endif
	}
	collect(n_regs, sz);
	gc_done = true;
    }

    /* activate the bindings of the graph's space and setup forwarding
     * pointers for the graph's space and its parents */
    if ( space )
    {
#if !COPY_SEARCH_SPACE
	switch_bindings(space);
	for ( spc = space; spc; spc = spc->parent )
	    forward(spc, regs.ss);
#else
	forward(space, regs.ss);
#endif
    }

    /* copy the root of the graph */
    alloc = (Node **)regs.hp;
    ntp	  = (Node **)heap_end;
    copy  = copy_node(graph, space);
#if COPY_SEARCH_SPACE
    if ( !copy )
    {
	/* NB don't update the stack here because the copied pointers would
	 *    not be followed during a garbage collection */
	assert(regs.bp != 0);
	for ( scan = (Node **)regs.bp; scan-- > regs.sp; )
	    copy_node(*scan, space);
	copy_node((Node *)regs.rq, space);
	copy = 0;
    }
#endif

    /* copy all children */
    for ( scan = (Node **)regs.hp; scan < alloc; scan += sz )
    {
	bool	  is_vect;
	int	  i, j, n, el_len;
	NodeInfo  *info;
	const int *otable;

	info	= ((Node *)scan)->info;
	sz	= info->length;
	otable	= info->offset_table;
	is_vect = sz == 0;
	if ( is_vect )
	    sz = ((Node *)scan)->a.length;

	if ( otable == 0 )
	{
	    for ( i = is_vect ? 2 : 1; i < sz; i++ )
		scan[i] = copy_node(scan[i], space);
	}
	else
	{
	    n = *otable++;
	    if ( n >= 0 )
	    {
		while ( n-- > 0 )
		{
		    i = *otable++;
		    scan[i] = copy_node(scan[i], space);
		}
	    }
	    else
	    {
		assert(is_vect);
		el_len = -n;
		for ( j = 2; j < sz; j += el_len )
		{
		    otable = info->offset_table + 1;
		    n	   = *otable++;
		    while ( n-- > 0 )
		    {
			i	  = *otable++;
			scan[j+i] = copy_node(scan[j+i], space);
		    }
		}
		assert(j == sz);
	    }
	}
    }
    assert(scan == (Node **)alloc);
    END_LOCAL_ROOTS
    regs.hp = (word *)alloc;

#if COPY_SEARCH_SPACE
    /* eventually update the stack */
    if ( !copy )
    {
	for ( scan = (Node **)regs.bp; scan-- > regs.sp; )
	    *scan = copy_node(*scan, space);
	regs.rq = (ThreadQueue)copy_node((Node *)regs.rq, space);
    }
#endif

    /* restore the old graph */
    for ( ; ntp < (Node **)heap_end; ntp++ )
    {
	ASSERT(is_forwarded(*ntp));
	(*ntp)->info = get_forward(*ntp)->info;
    }

    /* eventually restore a safe ancestor of the source space */
    if ( space )
    {
#if !COPY_SEARCH_SPACE
	for ( spc = space; spc; spc = spc->parent )
	    spc->info = &search_space_info;
	set_safe_ancestor(space, regs.bp);
#else
	space->info = &search_space_info;
#endif
    }

    /* return the copy */
    return copy;
}
