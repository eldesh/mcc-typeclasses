% -*- noweb-code-mode: c-mode -*-
% $Id: stable.nw 2300 2007-06-20 07:10:49Z wlux $
%
% Copyright (c) 2005-2007, Wolfgang Lux
% See ../LICENSE for the full license.
%
\subsection{Stable Pointers}
Stable pointers allow passing stable references to Curry values to C
code. Stable pointers are implemented as [[malloc]]ed pointers to heap
nodes. In order to prevent the referenced nodes from being garbage
collected, stable pointers are automatically registered as global
roots. Therefore, they must be released explicitly when they are no
longer used. The header file [[stable.h]] provides three functions
that create new stable pointers, dereference stable pointers, and
release stable pointers, respectively.

@ 
The argument of [[primNewStablePtr]] is a data term of the form
\texttt{Wrap}~$e$, where $e$ is the expression to be saved in the
stable pointer. Wrapping is used in order to prevent premature
evaluation of the expression by the foreign function interface code.

\ToDo{Allocating each stable pointer individually with [[malloc]] is
  somewhat inefficient. The system should rather allocate a whole
  block of pointers at a time and manage allocation from that block
  itself.}

<<stable.h>>=
static inline Node **
primNewStablePtr(Node *wrappedPtr)
{
    Node **stabPtr = (Node **)malloc(sizeof(Node *));
    if ( stabPtr == NULL )
	sys_error("newStablePtr");
    *stabPtr = wrappedPtr->c.args[0];
    add_global_root(stabPtr);
    return stabPtr;
}

@ 
Some care is necessary while dereferencing a stable pointer. If the
stable pointer escapes from an IO computation via [[unsafePerformIO]]
and the enclosing computation fails, the stable pointer itself may
still exist, but the associated node may have been released. In order
to prevent dangling pointers, which could crash the runtime system
later, the garbage collector assigns a null-pointer to those stable
pointers.

<<stable.h>>=
static inline Node *
primDeRefStablePtr(Node **stabPtr)
{
    if ( *stabPtr == 0 )
	abort_with("deRefStablePtr: value released by failed computation");
    return *stabPtr;
}

@ 
The function [[primFreeStablePtr]] simply releases a stable pointer
and annuls its registration as a global root.

<<stable.h>>=
static inline void
primFreeStablePtr(Node **stabPtr)
{
    remove_global_root(stabPtr);
    free(stabPtr);
}
