% -*- noweb-code-mode: c-mode -*-
% $Id: stats.nw 2349 2007-06-23 11:03:35Z wlux $
%
% Copyright (c) 2002-2007, Wolfgang Lux
% See ../LICENSE for the full license.
%
\subsection{Gathering Statistical Information}
Compiled Curry programs are able to gather some timing information and
memory allocation statistics. The interface to this module consists of
five functions. The function [[stats_init]] initializes the module.
Its argument determines the amount of information displayed. The
function [[stats_terminate]] prints the final statistics after the
program has finished. The functions [[stats_begin_gc]] and
[[stats_end_gc]] switch between normal program execution and garbage
collection for gathering statistics. In addition, they expect the
amount of allocated memory as arguments. Space which is freed by
backtracking is recorded by the function [[stats_backtrack]].

<<stats.h>>=
extern void stats_init(int on);
extern void stats_terminate(void);

extern void stats_begin_gc(unsigned long allocated);
extern void stats_end_gc(unsigned long allocated);

extern void stats_backtrack(unsigned long freed);

@ 
The implementation of the statistics module is pretty straight
forward. In order to determine expired run times, we use the
[[getrusage]] function on systems that support it and the ANSI C
[[clock]] function otherwise. The [[getrusage]] function is defined
together with the necessary constants in the header file
[[sys/resource.h]].

<<stats.c>>=
#include "config.h"
#include <stdio.h>
#if HAVE_SYS_RESOURCE_H
# include <sys/time.h>
# include <sys/resource.h>
#else
# include <time.h>
#endif
#include "stats.h"

<<Function prototypes>>
<<Global variables>>

@
The amount of statistics being presented to the user is determined by
the variable [[show_stats]]. If it is 0, nothing is shown at all; if
it is 1, the total execution time and memory allocation information
are output when the program ends. If it is larger than 1, information
about allocated and released memory will be shown at every garbage
collection, too.

<<Global variables>>=
static int show_stats;

@ 
Timing information is divided into execution time in user space during
(normal) program execution, execution time in user space during
garbage collections, and system time for the whole program. Execution
times are computed with the help of the function [[rusage]], which
returns user and system time information since the program start. In
addition, elapsed wall clock time is computed using [[gettimeofday]].

<<Global variables>>=
#if HAVE_SYS_RESOURCE_H
static struct timeval user_time, gc_time, sys_time, real_time;
#else
clock_t user_time, gc_time;
#endif

@ 
Regarding memory allocation, the statistics module computes the number
of allocated words and the average number of live words during each
garbage collection. Because these numbers can become quite large, we
use variables of type [[long long]] here.

<<Global variables>>=
unsigned long      n_gc;
unsigned long long total_collect, total_release, total_live;

@
The function [[stats_init]] saves its argument in the global variable
[[show_stats]] and computes the initial timing information. The time
spent in initialization code is added as a negative offset to the
garbage collection and system mode execution times. For that reason
[[stats_init]] should be called after all other initializations have
been performed.

<<stats.c>>=
void
stats_init(int level)
{
#if HAVE_SYS_RESOURCE_H
    struct rusage  ru;
    struct timeval tv;
#endif

    show_stats = level;
#if HAVE_SYS_RESOURCE_H
    gettimeofday(&tv, NULL);
    getrusage(RUSAGE_SELF, &ru);
    sub_timeval(&user_time, ru.ru_utime);
    sub_timeval(&sys_time, ru.ru_stime);
    sub_timeval(&real_time, tv);
#else
    user_time -= clock();
#endif
}

@ 
At the end of a program, [[stats_terminate]] is used to display the
statistics collected during the program. We assume that this function
is called on regular termination of the program, i.e., the program is
in normal execution mode and not performing a garbage collection.

<<stats.c>>=
void
stats_terminate()
{
#if HAVE_SYS_RESOURCE_H
    struct rusage  ru;
    struct timeval tv;

    gettimeofday(&tv, NULL);
    getrusage(RUSAGE_SELF, &ru);
    add_timeval(&user_time, ru.ru_utime);
    add_timeval(&sys_time, ru.ru_stime);
    add_timeval(&real_time, tv);
#else
    user_time += clock();
#endif

    if ( show_stats > 0 )
    {
#if HAVE_SYS_RESOURCE_H
        fprintf(stderr,
		"[user: %lu.%03us, gc: %lu.%03us,"
		" sys: %lu.%03us, real: %lu.%03us]\n",
                (unsigned long)user_time.tv_sec,
		(unsigned)user_time.tv_usec / 1000,
                (unsigned long)gc_time.tv_sec,
		(unsigned)gc_time.tv_usec / 1000,
                (unsigned long)sys_time.tv_sec,
		(unsigned)sys_time.tv_usec / 1000,
                (unsigned long)real_time.tv_sec,
		(unsigned)real_time.tv_usec / 1000);
#else
        fprintf(stderr, "[user: %.3fs, gc: %.3fs]\n",
                (double)user_time / CLOCKS_PER_SEC,
                (double)gc_time / CLOCKS_PER_SEC);
#endif

        fprintf(stderr, "[%llu words allocated", total_collect + total_release);
        if ( n_gc > 0 )
	    fprintf(stderr,
		    ", %lu collection%s copying %llu words (%.2g%% live)",
		    n_gc, n_gc > 1 ? "s" : "", total_live,
		    (double)total_live / (total_live + total_collect) * 100);
	fprintf(stderr, "]\n");
    }
}

@ 
The functions [[stats_begin_gc]] and [[stats_end_gc]] update timing
information at the beginning and end of a garbage collection,
respectively. In addition, the allocation counts are updated with the
arguments passed to the functions. Only cells that have been freed
during a garbage collection are actually added to the number of
allocated cells. This ensures that every live cell is counted only
once, namely when the cell is finally freed. Note that this implies
that a program must free all allocated memory at the end in order to
display correct allocation statistics.

If [[show_stats]] is greater than 1, the numbers of allocated and
released words are displayed at the end of each garbage collection.

<<Global variables>>=
static unsigned long n_alloc_before_gc;

@ 
<<stats.c>>=
void
stats_begin_gc(unsigned long n_alloc)
{
#if HAVE_SYS_RESOURCE_H
    struct rusage ru;
#else
    clock_t t;
#endif

#if HAVE_SYS_RESOURCE_H
    getrusage(RUSAGE_SELF, &ru);
    add_timeval(&user_time, ru.ru_utime);
    sub_timeval(&gc_time, ru.ru_utime);
#else
    t	       = clock();
    user_time += t;
    gc_time   -= t;
#endif

    n_alloc_before_gc = n_alloc;
    if ( show_stats > 1 )
        fprintf(stderr, "<GC: ");
}

void
stats_end_gc(unsigned long n_alloc)
{
#if HAVE_SYS_RESOURCE_H
    struct rusage ru;
#else
    clock_t t;
#endif

    n_gc++;
    total_collect += n_alloc_before_gc - n_alloc;
    total_live	  += n_alloc;

#if HAVE_SYS_RESOURCE_H
    getrusage(RUSAGE_SELF, &ru);
    add_timeval(&gc_time, ru.ru_utime);
    sub_timeval(&user_time, ru.ru_utime);
#else
    t	       = clock();
    gc_time   += t;
    user_time -= t;
#endif

    if ( show_stats > 1 )
        fprintf(stderr, "%lu live words, %lu words freed>\n",
                n_alloc, n_alloc_before_gc - n_alloc);
}

@ 
The function [[stats_backtrack]] just updates the number of allocated
words.

<<stats.c>>=
void
stats_backtrack(unsigned long n_freed)
{
    total_release += n_freed;
}

@
Unix systems usually do not provide any functions to compute the sum
or difference of two [[timeval]]s. The statistics module therefore
implements its own functions for that purpose. Note that the
microseconds part is always a positive number in the range between 0
and 999999.

<<Function prototypes>>=
#if HAVE_SYS_RESOURCE_H
static void add_timeval(struct timeval *, struct timeval);
static void sub_timeval(struct timeval *, struct timeval);
#endif

@ 
<<stats.c>>=
#if HAVE_SYS_RESOURCE_H
static void
add_timeval(struct timeval *p_tv1, struct timeval tv2)
{
    p_tv1->tv_sec += tv2.tv_sec;
    p_tv1->tv_usec += tv2.tv_usec;
    if ( p_tv1->tv_usec >= 1000000 )
    {
        p_tv1->tv_sec++;
        p_tv1->tv_usec -= 1000000;
    }
}

static void
sub_timeval(struct timeval *p_tv1, struct timeval tv2)
{
    p_tv1->tv_sec -= tv2.tv_sec;
    if ( p_tv1->tv_usec >= tv2.tv_usec )
        p_tv1->tv_usec -= tv2.tv_usec;
    else
    {
        p_tv1->tv_sec--;
        p_tv1->tv_usec += 1000000 - tv2.tv_usec;
    }
}
#endif
