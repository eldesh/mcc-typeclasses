% -*- noweb-code-mode: c-mode -*-
% $Id: threads.nw 2854 2009-05-29 12:33:07Z wlux $
%
% Copyright (c) 2001-2009, Wolfgang Lux
% See ../LICENSE for the full license.
%
\subsection{Thread Management}
This section describes the thread management code of the runtime
system. All scheduling is explicit, i.e., a running thread
relinquishes control only when its computation is finished or cannot
be continued.

<<threads.c>>=
#include "config.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "debug.h"
#include "run.h"
#include "regs.h"
#include "heap.h"
#include "stack.h"
#include "eval.h"
#include "threads.h"
#include "spaces.h"
#include "trail.h"
#include "trace.h"

@ 
The state of a thread that is not running is saved in a thread state
node which is allocated in the heap. The state information includes a
thread id, the reason for its suspension, the continuation address,
and a pointer to the current exception frame. The runtime system does
not use thread ids in any way except that it requires them to be
non-zero. Nevertheless, they can be quite useful for debugging
compiled programs. Thread state nodes can be linked to a thread queue
via their [[next]] field. Suspended threads are added to the wait
queue of the variable or queue-me node that caused their suspension.
The runnable threads are collected in the ready queue, which is
saved in the register [[regs.rq]].

When a thread is interrupted and inserted at the head of the ready
queue, its stack segment is retained on the global stack. If a thread
is added to the end of the ready queue or moved to some other queue,
its stack segment must be saved to the heap. A pointer to the saved
stack is recorded in the thread node as well. Since the stack may be
restored at a different address when the thread is resumed, the base
address of the stack is saved in the thread node so that the exception
handler chain can be relocated appropriately. We do not use relative
offsets for the exception handler chain because they could be
misidentified as node pointers by the garbage collector.

Unless stability is disabled, the runtime system maintains a global
thread list that makes the textual order of threads manifest. When no
other runnable threads are available, the runtime system schedules the
leftmost non-deterministic thread.\footnote{We call a thread
  non-deterministic when it is about to perform a non-deterministic
  computation step.} A pointer to the current thread is maintained in
the register [[regs.thd]]. A new thread shares the thread node of its
parent until it suspends for the first time. This avoids creating
redundant temporary thread nodes for concurrent conjunctions whose
left argument terminates without being suspended by an unbound
variable or a queue-me node.

In general, saved thread states refer to nodes in the thread list, but
not vice versa. This allows releasing the state of a thread that is no
longer actively used by the computation. However, there is an
exception for non-deterministic threads. Such threads are not recorded
in the ready queue and their saved state is linked to the thread node.
A non-deterministic thread may also be part of the wait queue of a
variable. This is implemented by saving a surrogate to the thread node
and adding another surrogate to the wait queue of the variable. All
surrogates of a thread are linked into a ring and share a common
thread state, which is allocated separately in the heap. When the
thread is woken through one of the queues, the state pointer of all
its surrogates is set to [[0]]. In order to distinguish surrogates
from real thread states, the reserved thread id [[0]] is used for
them.

The runtime system maintains the invariant that the head of the ready
queue never is a surrogate whose state pointer is [[0]]. Thus, it is
safe to check [[regs.rq != 0]] in order to test whether other runnable
threads are available.

<<threads.h>>=
#if 0
typedef union thread_node *ThreadQueue; /* already declared in heap.h */
#endif
#if !NO_STABILITY
typedef struct thread	  Thread;
#endif

@ 
<<threads.c>>=
#if !NO_STABILITY
enum { THREAD_TAG, SURROGATE_TAG };
#else
enum { THREAD_TAG };
#endif

#define THREAD_INFO							\
    NodeInfo	     *info;						\
    unsigned int     id;		/* (unique) thread id */	\
    ThreadQueue	     next;		/* link to next thread of queue */

struct thread_state {
    THREAD_INFO
    int		     reason;		/* reason for suspension */
    Label	     ip;		/* next instruction to be executed */
#if !NO_STABILITY
    Thread	     *thd;		/* thread node */
#endif
    ExceptionFrame   *efp;		/* pointer to exception frame */
    Node	     **ds_base;		/* base address of stack */
    unsigned int     ds_size;		/* size of data stack (segment) */
    Node	     *ds;		/* saved data stack */
};

#if !NO_STABILITY
struct thread_surrogate {
    THREAD_INFO
    ThreadQueue	     thd;		/* pointer to the "real" thread */
    ThreadQueue	     link;		/* ring of surrogates for the thread */
};
#endif

union thread_node {
    struct thread_state	    t;
#if !NO_STABILITY
    struct thread_surrogate s;
#endif
};

#if !NO_STABILITY
struct thread {
    NodeInfo	 *info;
    unsigned int id;			/* thread id */
    Thread	 *prev, *next;		/* links to predecessor and successor */
    ThreadQueue  tq;			/* saved state of a non-det. thread */
};
#endif

#define thread_node_size	wordsof(union thread_node)
#define thread_state_size	wordsof(struct thread_state)
#if !NO_STABILITY
# define thread_surrogate_size	wordsof(struct thread_surrogate)
# define thread_size		wordsof(struct thread)
#endif

static const int ot_thread_state[] = {
#if !NO_STABILITY
    3,
    word_offsetof(struct thread_state, next),
    word_offsetof(struct thread_state, thd),
    word_offsetof(struct thread_state, ds)
#else
    2,
    word_offsetof(struct thread_state, next),
    word_offsetof(struct thread_state, ds)
#endif
};
static NodeInfo thread_state_info = {
    THREAD_KIND, THREAD_TAG, thread_state_size, ot_thread_state, 0, no_eval,
    0, 0, 0
};

#if !NO_STABILITY
static const int ot_surrogate[] = {
    3,
    word_offsetof(struct thread_surrogate, next),
    word_offsetof(struct thread_surrogate, thd),
    word_offsetof(struct thread_surrogate, link)
};
static NodeInfo surrogate_info = {
    THREAD_KIND, SURROGATE_TAG, thread_surrogate_size, ot_surrogate, 0,
    no_eval, 0, 0, 0
};

static const int ot_thread[] = {
    3,
    word_offsetof(struct thread, prev),
    word_offsetof(struct thread, next),
    word_offsetof(struct thread, tq)

};
static NodeInfo thread_info = {
    CAPP_KIND, 0, thread_size, ot_thread, 0, no_eval, 0, 0, 0
};
#endif

@
The thread state includes the reason why a thread was interrupted.
Possible reasons are [[None]] in case of a fork and [[Yield]] if the
thread was performing a yield before a non-deterministic computation
step. The reasons [[Eval]] and [[Delay]] are used if the thread is
suspended due to a queue-me and unbound variable node, respectively.

<<threads.c>>=
enum suspend_reason {
    None,			/* interrupted */
#if !NO_STABILITY
    Yield,			/* rescheduled due to non-determinism */
#endif
    Delay,			/* suspended due to unbound variable */
    Eval			/* suspended due to locked application */
};

#if !NO_STABILITY
static const char *reasons[] = { "None", "Yield", "Delay", "Eval" };
#else
static const char *reasons[] = { "None", "Delay", "Eval" };
#endif

@
The interface to the thread management code consists of four global
functions and five entry points. The function [[start_thread]] starts
a new thread, [[stop_thread]] terminates the current thread, and the
functions [[suspend_thread]] and [[delay_thread]] suspend the current
thread and add this thread to the wait queue of the node in register
[[regs.r[0]]]. The former is intended to be used for locked suspended
applications, the latter for unbound variables. The function
[[yield_thread]] interrupts the current thread before a
non-deterministic computation step and does not add it to any queue,
so that it will only be rescheduled if no other deterministic threads
are available. The function [[yield_delay_thread]] is a combination of
[[yield_thread]] and [[delay_thread]]. It interrupts the running
thread and marks it as about to perform a non-deterministic
computation step. In addition, the thread is inserted into the wait
queue of the variable in register [[regs.r[0]]] so that it will also
be woken when that variable is bound.

The functions [[activate_threads]] and [[wake_threads]] wake a list of
suspended threads. Whereas [[activate_threads]] interrupts the current
thread and activates the first woken thread immediately, the running
thread remains active when [[wake_threads]] is used. The last
function, [[join_queues]], concatenates the two thread queues [[tq1]]
and [[tq2]].

<<threads.h>>=
extern void start_thread(unsigned int n, Label l);
DECLARE_LABEL(extern, stop_thread);
DECLARE_LABEL(extern, suspend_thread);
DECLARE_LABEL(extern, delay_thread);
#if !NO_STABILITY
DECLARE_LABEL(extern, yield_thread);
DECLARE_LABEL(extern, yield_delay_thread);
#endif
extern Label activate_threads(ThreadQueue wq, Label l);
extern void wake_threads(ThreadQueue wq);
extern ThreadQueue join_queues(ThreadQueue tq1, ThreadQueue tq2);

@
The functions [[save_continuation]], [[restore_continuation]], and
[[resume_continuation]] provide the interface for saving and restoring
computations within an encapsulated search. The function
[[save_continuation]] interrupts the current thread and ensures that
the stack segments of all local threads are saved to the heap. The
function [[restore_continuation]] restores a local computation by
adding its ready queue to the front of the current ready queue without
interrupting the running thread. The function [[resume_continuation]],
on the other hand, sets the ready queue to the one of the restored
computation and activates its first thread immediately. Thus,
[[restore_continuation]] is intended for restoring a search goal
within another search space, whereas [[resume_continuation]] is
intended for resuming a search goal directly. Both functions replace
the continuation address of the first thread from the local
computation's ready queue with the specified address. %'

<<threads.h>>=
extern void save_continuation(unsigned int n_regs);
#if COPY_SEARCH_SPACE
# define restore_continuation(n_regs, l, rq)	restore_continuation(l, rq)
#endif
extern void restore_continuation(unsigned int n_regs, Label l, ThreadQueue rq);
extern Label resume_continuation(Label l, ThreadQueue rq);

@
<<threads.c>>=
static void new_thread(void);
DECLARE_LABEL(static, activate_thread);
static void terminate_thread(void);
static ThreadQueue interrupt_thread(unsigned int, Label, enum suspend_reason);
static ExceptionFrame *relocate_thread(ExceptionFrame *, int);
#if !NO_STABILITY
static bool higher_priority(Thread *, Thread**);
static bool schedule_nondet(Thread *);
#else
# define schedule_nondet(thd)	false
#endif

static NodeInfo saved_stack_info = {
    VECTOR_KIND, 0, 0, 0, 0, no_eval, 0, 0, 0
};

@
The function [[start_thread]] starts a new thread. It preserves the
first [[n_regs]] argument registers, which can be used to pass
arguments to the new thread. The current thread is interrupted and
will continue its execution at address [[l]]. If this parameter is
[[0]], [[start_thread]] assumes that it is creating the initial thread
of the program or an encapsulated search and therefore no thread is
interrupted. Instead, the registers [[regs.thd]] and [[regs.rq]] are
reset and a thread node for the root thread is allocated. The initial
return address of the new thread is set to [[stop_thread]] so that it
is terminated automatically when it returns from its bottom frame.

<<threads.c>>=
void
start_thread(unsigned int n_regs, Label l)
{
    ThreadQueue thd;

    /* eventually interrupt the current thread */
    if ( l )
    {
	thd	    = interrupt_thread(n_regs, l, None);
	thd->t.next = regs.rq;
	regs.rq	    = thd;
    }
    else
    {
#if !NO_STABILITY
	regs.thd = 0;
#endif
	regs.rq	 = 0;
    }

    /* start a new thread */
    new_thread();
#if !NO_STABILITY
    if ( l == 0 )
    {
	CHECK_HEAP(n_regs, thread_size);
	regs.thd       = (Thread *)regs.hp;
	regs.thd->info = &thread_info;
	regs.thd->id   = regs.cid;
	regs.thd->prev = 0;
	regs.thd->next = 0;
	regs.thd->tq   = 0;
	regs.hp	      += thread_size;
    }
#endif
    TRACE(("%I starting\n"));

    /* set the ultimate return address */
    regs.ret = stop_thread;
}

@
The [[stop_thread]] code terminates the current thread and
tries to activate the next thread from the ready queue.

<<threads.c>>=
FUNCTION(stop_thread)
{
 ENTRY_LABEL(extern, stop_thread)
    TRACE(("%I terminated\n"));
    terminate_thread();
    GOTO(activate_thread);
}

@
The functions [[suspend_thread]] and [[delay_thread]] suspend the
current thread and add it to the wait queue of the node in register
[[regs.r[0]]]. This node must be either a queue-me node
([[suspend_thread]]) or an unbound variable ([[delay_thread]]). Both
functions must only be applied to local nodes of the current search
space.

<<threads.c>>=
FUNCTION(suspend_thread)
{
    Node	*susp;
    ThreadQueue thd;
 ENTRY_LABEL(extern, suspend_thread)
    thd = interrupt_thread(1, regs.ret, Eval);

    susp = regs.r[0];
    assert(is_tagged_ptr(susp) && is_queueMe_node(susp));
    thd->t.next = susp->q.wq;
    SET_FIELD(susp, q.wq, thd);

    GOTO(activate_thread);
}

FUNCTION(delay_thread)
{
    Node	*var;
    ThreadQueue thd;
 ENTRY_LABEL(extern, delay_thread)
    thd = interrupt_thread(1, regs.ret, Delay);

    var = regs.r[0];
    assert(is_tagged_ptr(var) && is_variable_node(var));
    thd->t.next = var->v.wq;
    SET_FIELD(var, v.wq, thd);

    GOTO(activate_thread);
}

@ 
The functions [[yield_thread]] and [[yield_delay_thread]] interrupt
the current thread and mark it as about to perform a non-deterministic
computation step. The function [[yield_delay_thread]] also adds the
thread to the wait queue of the variable node in register
[[regs.r[0]]] so that it is woken when that variable is bound. In
order to avoid unnecessary context switches, both functions
immediately return to the caller if the current thread is the leftmost
thread capable of performing a non-deterministic computation step.

<<threads.c>>=
#if !NO_STABILITY
FUNCTION(yield_thread)
{
    ThreadQueue thd;
 ENTRY_LABEL(extern, yield_thread)
    if ( regs.rq == 0 && !schedule_nondet(regs.thd) )
	GOTO(regs.ret);

    thd = interrupt_thread(0, regs.ret, Yield);
    SET_FIELD(regs.thd, tq, thd);
    GOTO(activate_thread);
}

FUNCTION(yield_delay_thread)
{
    Node	*var;
    ThreadQueue thd, thd1;
 ENTRY_LABEL(extern, yield_delay_thread)
    if ( regs.rq == 0 && !schedule_nondet(regs.thd) )
	GOTO(regs.ret);

    /* NB Don't use BEGIN_LOCAL_ROOTS1/END_LOCAL_ROOTS here since they
     *    prevent the tail-call optimization in Gnu C. */
    regs.r[1] = (Node *)interrupt_thread(1, regs.ret, Yield);
    CHECK_HEAP(2, 2*thread_surrogate_size);

    var	 = regs.r[0];
    assert(is_tagged_ptr(var) && is_variable_node(var));
    thd1 = (ThreadQueue)regs.r[1];

    thd		= (ThreadQueue)regs.hp;
    thd->s.info = &surrogate_info;
    thd->s.id   = 0;
    thd->s.thd  = thd1;
    thd->s.next = var->v.wq;
    thd->s.link = (ThreadQueue)(regs.hp + thread_surrogate_size);
    SET_FIELD(var, v.wq, thd);

    thd		= (ThreadQueue)(regs.hp + thread_surrogate_size);
    thd->s.info = &surrogate_info;
    thd->s.id   = 0;
    thd->s.thd  = thd1;
    thd->s.next = 0;
    thd->s.link = (ThreadQueue)regs.hp;
    SET_FIELD(regs.thd, tq, thd);
    regs.hp    += 2*thread_surrogate_size;

    GOTO(activate_thread);
}
#endif

@ 
The functions [[activate_threads]] and [[wake_threads]] wake a list of
suspended threads and insert them at the head of the ready queue. If
the function [[activate_threads]] is called, the current thread is
interrupted before this operation and the first of the woken threads
is activated. On the other hand, if the function [[wake_threads]] is
called the current thread remains active.

<<threads.c>>=
Label
activate_threads(ThreadQueue wq, Label l)
{
    ThreadQueue thd;

#if !NO_STABILITY
    /* skip surrogates of already woken threads */
    while ( wq && wq->t.id == 0 && wq->s.thd == 0 )
	wq = wq->t.next;
#endif
    if ( wq == 0 )
	return l;

    BEGIN_LOCAL_ROOTS1(wq)
    thd = interrupt_thread(0, l, None);
    END_LOCAL_ROOTS

    thd->t.next = regs.rq;
    regs.rq	= join_queues(wq, thd);

    return activate_thread;
}

void
wake_threads(ThreadQueue wq)
{
#if !NO_STABILITY
    /* skip surrogates of already woken threads */
    while ( wq && wq->t.id == 0 && wq->s.thd == 0 )
	wq = wq->t.next;
#endif
    regs.rq = join_queues(wq, regs.rq);
}

@
The function [[join_queues]] combines the two thread queues [[tq1]]
and [[tq2]] such that the resulting queue starts with the threads
from [[tq1]] followed by those from [[tq2]].

<<threads.c>>=
ThreadQueue
join_queues(ThreadQueue tq1, ThreadQueue tq2)
{
    ThreadQueue tq;

    /* return the other queue if one queue is empty */
    if ( tq1 == 0 )
	tq = tq2;
    else if ( tq2 == 0 )
	tq = tq1;

    /* otherwise append tq2 to tq1 (destructively) */
    else
    {
	tq = tq1;
	while ( tq1->t.next )
	    tq1 = tq1->t.next;
	SET_FIELD(tq1, t.next, tq2);
    }

    return tq;
}

@ 
The function [[new_thread]] initializes a new thread, which
automatically becomes the running thread.

A new thread id is generated by incrementing the private variable
[[tid]]. We do not care about overflows, so thread ids may no longer
be unique if a program manages to start more than $2^{32}$ threads.
Nevertheless, [[new_thread]] is careful enough to avoid the -- highly
unlikely -- case that the new thread gets the same id as the ancestor
that owns the shared thread node when stability is enabled.

Note that the thread id [[0]] is reserved and setting the [[regs.cid]]
register to [[0]] denotes that no thread is running.

<<threads.c>>=
static void
new_thread()
{
    static unsigned int tid;

    /* initialize the thread state */
#if !NO_STABILITY
    while ( tid == 0 || (regs.thd && tid == regs.thd->id) )
#else
    if ( tid == 0 )
#endif
	tid++;
    regs.cid	 = tid++;
    regs.ds_base = regs.sp;
    regs.efp	 = 0;
}

@ 
When the ready queue becomes empty and stability is not disabled, the
runtime system activates the leftmost non-deterministic thread. In
determining the leftmost thread, we have to take into account that an
expression may be evaluated by more than one thread. For instance,
given the simple map coloring problem
\begin{verbatim}
  goal | l1=/=l2 & l1=/=l3 & l2=/=l3 = (l1,l2,l3)
    where l1=color; l2=color; l3=color
\end{verbatim}
where the function \texttt{color} non-deterministically generates
color values, colors would be evaluated in the order $l_1$, $l_3$,
$l_2$ if the leftmost non-deterministic thread in the global thread
list were chosen naively. The problem is that the first thread cannot
evaluate $l_2$ after $l_1$ has been evaluated because $l_2$ is already
being evaluated by the third thread. Therefore, we associate each
non-deterministic thread an effective priority, which is computed as
the maximum of the thread's own position in the global thread list            %'
(giving highest priority to the first position) and the positions of
all threads blocked by a queue-me node whose application is currently
evaluated by the thread. This policy ensures that in the example the
third thread is activated before the second thread after $l_1$ has
been evaluated and thus ensures that colors are generated in the
expected order.

\ToDo{Find a way to determine effective priorities more efficiently.}

<<threads.c>>=
#if !NO_STABILITY
static bool
higher_priority(Thread *thd0, Thread **prio)
{
    bool	higher = false;
    ThreadQueue tq;
    Thread	*thd;
    Node	**fp, **base;

    /* check the thread's own priority */
    for ( thd = thd0; thd && thd != *prio; thd = thd->prev )
	;
    if ( thd == 0 )
	higher = true, *prio = thd0;

    /* get the thread's stack */
    if ( thd0 == regs.thd )
    {
	fp   = regs.sp;
	base = regs.ds_base;
    }
    else
    {
	assert(thd0->tq);
	tq = thd0->tq;
	if ( tq->t.id == 0 )
	{
	    assert(tq->s.thd != 0);
	    tq = tq->s.thd;
	}
	assert(tq->t.id != 0 && tq->t.reason == Yield);

	fp   = tq->t.ds->a.args;
	base = fp + tq->t.ds_size;
    }

    /* check priorities of all threads blocked by a queue-me node */
    for ( ; fp < base; fp++ )
	if ( (Label)*fp == update )
	{
	    fp += 1;
	    assert(is_tagged_ptr(*fp) && is_queueMe_node(*fp));
	    for ( tq = (*fp)->q.wq; tq; tq = tq->t.next )
	    {
		assert(tq->t.id != 0);
		for ( thd = tq->t.thd; thd && thd != *prio; thd = thd->prev )
		    ;
		if ( thd == 0 )
		    higher = true, *prio = tq->t.thd;
	    }
	}
    return higher;
}

static bool
schedule_nondet(Thread *thd0)
{
    Thread *sched, *prio, *thd;

    assert(regs.rq == 0);
    sched = thd0;
    prio  = 0;
    for ( thd = (thd0 ? thd0 : regs.thd)->prev; thd; thd = thd->prev )
	if ( thd->tq )
	{
	    if ( !sched )
		sched = thd;
	    else
	    {
		if ( !prio )
		    higher_priority(sched, &prio);
		if ( higher_priority(thd, &prio) )
		    sched = thd;
	    }
	}
    for ( thd = (thd0 ? thd0 : regs.thd)->next; thd; thd = thd->next )
	if ( thd->tq )
	{
	    if ( !sched )
		sched = thd;
	    else
	    {
		if ( !prio )
		    higher_priority(sched, &prio);
		if ( higher_priority(thd, &prio) )
		    sched = thd;
	    }
	}
    if ( sched != thd0 )
	regs.rq = sched->tq;
    return sched != thd0;
}
#endif

@ 
The function [[activate_thread]] activates the first thread of the
ready queue or the leftmost non-deterministic thread if the ready
queue is empty and stability is not disabled. If no thread to activate
exists, [[activate_thread]] jumps to the deadlock handler of the
current context.

<<threads.c>>=
static
FUNCTION(activate_thread)
{
    Label		ip;
    ThreadQueue		thd;
    enum suspend_reason reason;
 ENTRY_LABEL(static, activate_thread)
    /* check for a deadlock */
    if ( regs.rq == 0 && !schedule_nondet(0) )
	GOTO(regs.handlers->deadlock);

    /* activate the head of the ready queue */
    thd	    = regs.rq;
    regs.rq = thd->t.next;
#if !NO_STABILITY
    while ( regs.rq && regs.rq->t.id == 0 && regs.rq->s.thd == 0 )
	regs.rq = regs.rq->t.next;
    if ( thd->t.id == 0 )
    {
	ThreadQueue sur = thd;

	thd = (ThreadQueue)sur->s.thd;
	ASSERT(thd->t.id != 0);
	while ( sur->s.thd )
	{
	    SET_FIELD(sur, s.thd, 0);
	    ASSERT(sur->s.id == 0 && sur->s.link != 0);
	    sur = sur->s.link;
	}
    }
#endif
    regs.cid = thd->t.id;
    ip	     = thd->t.ip;
    reason   = (enum suspend_reason)thd->t.reason;
#if !NO_STABILITY
    regs.thd = thd->t.thd;
    if ( regs.thd->tq )
	SET_FIELD(regs.thd, tq, 0);
#endif

    /* eventually restore the stack */
    if ( thd->t.ds )
    {
	CHECK_STACK(thd->t.ds_size);
	ASSERT(thd->t.ds_size == vector_argc(thd->t.ds));
	regs.ds_base = regs.sp;
	regs.sp	    -= thd->t.ds_size;
	memcpy(regs.sp, thd->t.ds->a.args, thd->t.ds_size * word_size);
    }
    else
	regs.ds_base = regs.sp + thd->t.ds_size;

    /* eventually relocate the exception handler chain */
    regs.efp = thd->t.efp;
    if ( regs.efp && regs.ds_base != thd->t.ds_base )
	regs.efp = relocate_thread(regs.efp, regs.ds_base - thd->t.ds_base);

    /* continue the activated thread */
    if ( reason != None )
	TRACE(("%I resume (%s)\n", reasons[reason]));
    GOTO(ip);
}

@ 
The function [[terminate_thread]] terminates the current thread,
discards its stack, and unlinks its thread node from the global thread
list unless it shares the thread node of its parent.

<<threads.c>>=
static void
terminate_thread()
{
    /* deallocate the current thread */
    regs.sp = regs.ds_base;

#if !NO_STABILITY
    /* eventually remove the current thread from the global thread list */
    if ( regs.thd->id == regs.cid )
    {
	if ( regs.thd->prev )
	{
	    assert(regs.thd->prev->next == regs.thd);
	    SET_FIELD(regs.thd->prev, next, regs.thd->next);
	}
	if ( regs.thd->next )
	{
	    assert(regs.thd->next->prev == regs.thd);
	    SET_FIELD(regs.thd->next, prev, regs.thd->prev);
	}
    }
#endif
}

@ 
The function [[interrupt_thread]] interrupts the current thread and
returns a thread node for it. The stack is saved to the heap except if
the thread is interrupted with reason [[None]]. The caller is
responsible for adding the thread to an appropriate queue.

When a thread is suspended for the first time with a reason other than
[[None]], i.e., it is possibly rescheduled out of order, a new thread
node is created for the current thread and inserted into the global
thread list. The current thread becomes the left neighbor of its
parent, since the runtime system starts a new thread only for the left
argument of a concurrent conjunction and continues execution of the
right argument in the parent thread (cf.\ Sect.~\ref{sec:concurrent}).

<<threads.c>>=
static ThreadQueue
interrupt_thread(unsigned int n_regs, Label l, enum suspend_reason reason)
{
    Node	 *ds;
    ThreadQueue  thd;
    bool	 save_ds = reason != None;
    unsigned int ds_size = regs.ds_base - regs.sp;
#if !NO_STABILITY
    bool	 new_thd = save_ds && regs.cid != regs.thd->id;
    Thread	 *thread;

    CHECK_HEAP(n_regs,
	       (new_thd ? thread_size : 0) +
	       thread_state_size + (save_ds ? vector_node_size(ds_size) : 0));
#else
    CHECK_HEAP(n_regs,
	       thread_state_size + (save_ds ? vector_node_size(ds_size) : 0));
#endif

    if ( reason != None )
	TRACE(("%I suspend (%s)\n", reasons[reason]));

#if !NO_STABILITY
    /* create a thread node for the current thread if necessary */
    if ( new_thd )
    {
	thread	     = (Thread *)regs.hp;
	thread->info = &thread_info;
	thread->id   = regs.cid;
	thread->prev = regs.thd->prev;
	thread->next = regs.thd;
	thread->tq   = 0;
	regs.hp	    += thread_size;

	if ( thread->prev )
	    SET_FIELD(thread->prev, next, thread);
	SET_FIELD(thread->next, prev, thread);
	regs.thd = thread;
    }
#endif

    /* eventually save the stack */
    if ( save_ds )
    {
	ds	     = (Node *)regs.hp;
	ds->info     = &saved_stack_info;
	ds->a.length = vector_node_size(ds_size);
	memcpy(ds->a.args, regs.sp, ds_size * word_size);
	regs.hp	    += vector_node_size(ds_size);
	regs.sp	     = regs.ds_base;
    }
    else
	ds = 0;

    /* save the thread state */
    assert(regs.cid != 0);
    thd		   = (ThreadQueue)regs.hp;
    thd->t.info	   = &thread_state_info;
    thd->t.id	   = regs.cid;
    thd->t.next	   = 0;
    thd->t.reason  = reason;
    thd->t.ip	   = l;
#if !NO_STABILITY
    thd->t.thd	   = regs.thd;
#endif
    thd->t.efp	   = regs.efp;
    thd->t.ds_base = regs.ds_base;
    thd->t.ds_size = ds_size;
    thd->t.ds	   = ds;
    regs.hp	  += thread_state_size;

    /* return the thread */
    return thd;
}

@
The function [[relocate_thread]] relocates the exception handler chain
when a thread is restored to a different stack offset.

<<threads.c>>=
static ExceptionFrame *
relocate_thread(ExceptionFrame *efp, int dist)
{
    ExceptionFrame *fp;

    if ( efp )
    {
	efp = (ExceptionFrame *)((Node **)efp + dist);
	for ( fp = efp; fp->frame; fp = fp->frame )
	    fp->frame = (ExceptionFrame *)((Node **)fp->frame + dist);
    }

    return efp;
}

@
When the abstract machine returns from an encapsulated search, the
current state of the local computation is saved to the heap. The
function [[save_continuation]] interrupts the running thread and
ensures that all threads from the ready queue have their stack
segments saved to the heap. In order to share the saved ready queue of
the local computation between the different alternatives of a
non-deterministic continuation, the actual continuation address is
saved independently of the ready queue. Therefore, no continuation
address is passed to [[save_continuation]].

Note that the code in [[save_continuation]] examines only thread nodes
but no surrogates. This is safe because surrogates are used only for
threads that yield before a non-deterministic computation step and are
added to the wait queue of a variable at the same time. Such threads
obviously have their stack saved to the heap already.

Also note that [[restore_continuation]] creates a new head for the
ready queue before updating the continuation address. This is to
prevent accidental overwriting of the address if another related
continuation is restored before the thread is actually woken. No such
precaution is necessary when the runtime system was configured with
the \texttt{--enable-copying} option and neither in function
[[resume_continuation]] as it activates the first thread immediately.

When a search continuation is injected into another computation via
[[restore_continuation]], the thread list of the search goal is
inserted into the global thread list \emph{before} the current thread.
Since the evaluation of the current thread is not continued before the
injected search continuation has successfully been evaluated, this
makes a difference only in the unusual case where the search
continuation has started a non-deterministic thread with
\texttt{Unsafe.spawnConstraint}.

<<threads.c>>=
void
save_continuation(unsigned int n_regs)
{
    unsigned int ds_size;
    Node	 *ds;
    ThreadQueue  tq;

    /* interrupt the current thread */
    tq	       = interrupt_thread(n_regs, 0, None);
    tq->t.next = regs.rq;
    regs.rq    = tq;

    /* save all stack segments to the heap */
    BEGIN_LOCAL_ROOTS1(tq)
    for ( tq = regs.rq; tq; tq = tq->t.next )
	if ( tq->t.id && tq->t.ds == 0 )
	{
	    ds_size = tq->t.ds_size;

	    CHECK_HEAP(n_regs, vector_node_size(ds_size));
	    ds		  = (Node *)regs.hp;
	    ds->info	  = &saved_stack_info;
	    ds->a.length  = vector_node_size(ds_size);
	    memcpy(ds->a.args, regs.sp, ds_size * word_size);
	    regs.hp	 += vector_node_size(ds_size);
	    SET_FIELD(tq, t.ds, ds);

	    regs.sp += ds_size;
	    ASSERT(regs.sp == tq->t.ds_base);
	}
    END_LOCAL_ROOTS
}

void
restore_continuation(unsigned int n_regs, Label l, ThreadQueue tq)
{
#if !NO_STABILITY
    Thread *thread;
#endif

    assert(tq && tq->t.id != 0);

    /* update the continuation address of the first restored thread */
#if !COPY_SEARCH_SPACE
    BEGIN_LOCAL_ROOTS1(tq)
    CHECK_HEAP(n_regs, thread_node_size);
    memcpy(regs.hp, tq, thread_node_size * word_size);
    tq	     = (ThreadQueue)regs.hp;
    regs.hp += thread_node_size;
    END_LOCAL_ROOTS
#endif
    tq->t.ip = l;

#if !NO_STABILITY
    /* insert the local thread list into the global thread list */
    for ( thread = tq->t.thd; thread->prev; thread = thread->prev )
	;
    SET_FIELD(thread, prev, regs.thd->prev);
    if ( thread->prev )
    {
	assert(thread->prev->next == regs.thd);
	SET_FIELD(thread->prev, next, thread);
    }

    for ( thread = tq->t.thd; thread->next; thread = thread->next )
	;
    SET_FIELD(thread, next, regs.thd);
    SET_FIELD(regs.thd, prev, thread);
#endif

    /* wake all threads of the search space and add them to the ready queue */
    wake_threads(tq);
}

Label
resume_continuation(Label l, ThreadQueue tq)
{
    /* restore the continuation's ready queue */
    assert(tq && tq->t.id != 0);
    regs.rq = tq;

    /* update the continuation address of the first restored thread */
    regs.rq->t.ip = l;

    /* activate the first thread */
    return activate_thread;
}
