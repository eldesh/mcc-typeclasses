% -*- noweb-code-mode: c-mode -*-
% $Id: trace.nw 2303 2007-06-20 07:22:47Z wlux $
%
% Copyright (c) 2001-2007, Wolfgang Lux
% See ../LICENSE for the full license.
%
\subsection{Tracing}
The abstract machine provides a simple tracing facility. This is
implemented by the [[trace]] function which will print its arguments
to the standard error output. Like the [[printf]] function, the
[[trace]] function uses a format string to specify its output. The
following formatting directives are supported:
\begin{itemize}
\item [[%c]] displays the next argument a single character
\item [[%d]] displays the next argument as a signed decimal number
\item [[%g]] displays the next argument as a floating point number
\item [[%u]] displays the next argument as an unsigned decimal number
\item [[%s]] displays the next argument as a string
\item [[%x]] displays the next argument as an unsigned hexadecimal number
\item [[%A]] displays the address of the node found as next argument
\item [[%I]] displays the current thread id and indents the rest of
  the line according to the nesting depth of the current thread
\item [[%N]] displays the node found as next argument
\item [[%V]] the next argument is a counter and the second argument a
  pointer to an array of nodes. Each node is displayed preceded by a
  single blank
\end{itemize}

The function [[trace_fun]] is intended for tracing function
applications. Besides printing the function arguments at the call
site, it also prepares the machine to print the application's result
after it has been computed. %'

By using the [[TRACE]] and [[TRACE_FUN]] macros, tracing can be
enabled or disabled under control of the global variable [[do_trace]].

<<trace.h>>=
#define TRACE(x) do { if ( do_trace ) trace x; } while ( 0 )
#define TRACE_FUN(f,n) do { if ( do_trace ) { trace_fun(f, n); } } while ( 0 )

extern int do_trace;
extern void trace(const char *fmt, ...);
extern void trace_fun(const char *name, unsigned int arity);

@
<<trace.c>>=
#include "config.h"
#include <stddef.h>
#include <stdio.h>
#include <stdarg.h>
#include <stdlib.h>
#include "debug.h"
#include "run.h"
#include "regs.h"
#include "heap.h"
#include "stack.h"
#include "threads.h"
#include "eval.h"
#include "cstring.h"
#include "cam.h"
#include "trace.h"

#if 0
/* This variable must be defined by the main program */
int do_trace;
#endif

static void trace_showaddr(Node *node);
static void trace_shownode(int depth, Node *node);
static void trace_showapp(int depth, Node *node, unsigned argc, Node **argv);

DECLARE_LABEL(static, trace_return);

void
trace(const char *fmt, ...)
{
    va_list	 ap;
    const char	 *cp;
    Node	 **fp, **argv;
    int		 depth = do_trace - 1;
    unsigned int i, argc;

    va_start(ap, fmt);
    for ( cp = fmt; *cp != '\0'; cp++ )
    {
	if ( *cp == '%' )
	    switch ( *++cp )
	    {
	    case 'c':
		fprintf(stderr, "%c", va_arg(ap, int));
	        break;
	    case 'd':
	        fprintf(stderr, "%d", va_arg(ap, int));
	        break;
	    case 'g':
	        fprintf(stderr, "%g", va_arg(ap, double));
	        break;
	    case 's':
		fprintf(stderr, "%s", va_arg(ap, const char *));
		break;
	    case 'u':
		fprintf(stderr, "%u", va_arg(ap, unsigned int));
		break;
	    case 'x':
		fprintf(stderr, "%x", va_arg(ap, unsigned int));
		break;
	    case 'A':
		trace_showaddr(va_arg(ap, Node *));
		break;
	    case 'I':
		fprintf(stderr, "[%u]", regs.cid);
		for ( fp = regs.sp; fp < regs.ds_base; fp++ )
		    if ( (Label)*fp == trace_return )
			fputc(' ', stderr);
		break;
	    case 'N':
	        trace_shownode(depth, va_arg(ap, Node *));
		break;
	    case 'V':
	    	argc = va_arg(ap, unsigned int);
	        argv = va_arg(ap, Node **);
	        for ( i = 0; i < argc; i++ )
		{
		    fputc(' ', stderr);
	    	    trace_shownode(depth, argv[i]);
		}
		break;
	    default:
		fputc(*cp, stderr);
		break;
	    }
	else
	    fputc(*cp, stderr);
    }
    va_end(ap);
}

static void
trace_showaddr(Node *node)
{
    if ( node == 0 )
	fprintf(stderr, "-null-");
#if !NO_POINTER_TAGS
    else if ( is_tagged_int(node) )
	fprintf(stderr, "-int %ld-", untag_int(node));
#endif
    else if ( heap_base <= (word *)node && (word *)node <= heap_end )
	fprintf(stderr, "-node%lu-", (long)(node - (Node *)heap_base));
    else
	fprintf(stderr, "%p", node);
}

static void
trace_shownode(int depth, Node *node)
{
    char	 buf[32];
    unsigned int argc;
    double	 d;
    const char	 *name;

    if ( node == 0 )
	fprintf(stderr, "-null-");
#if !NO_POINTER_TAGS
    else if ( is_tagged_int(node) )
	fprintf(stderr, "%ld", untag_int(node));
#endif
    else
	switch ( node_kind(node) )
	{
	case CHAR_KIND:
	    fprintf(stderr, "'%s'", lit_char(buf, '\0', node->ch.ch, '\''));
	    break;
	case INT_KIND:
	    fprintf(stderr, "%ld", node->i.i);
	    break;
	case FLOAT_KIND:
	    get_double_val(d, node);
	    fprintf(stderr, "%s", lit_double(buf, d));
	    break;
	case PTR_KIND:
	    fprintf(stderr, depth > 0 ? "(%s %p)" : "(%s ...)",
		    node->info->cname, node->p.ptr);
	    break;
	case FOREIGN_PTR_KIND:
	    fprintf(stderr, depth > 0 ? "(%s %p)" : "(%s ...)",
		    node->info->cname, node->fp.ptr);
	    break;
	case VECTOR_KIND:
	    trace_showapp(depth, node, vector_argc(node), node->a.args);
	    break;
	case LVAR_KIND:
	    fprintf(stderr, "var@%p", node);
	    break;
	case LAZY_KIND:
	    switch ( node_tag(node) )
	    {
	    case NOUPD_TAG:
		trace_showapp(depth, node, closure_argc(node), node->c.args);
		break;
	    case UPD_TAG:
		fprintf(stderr, "app@%p=", node);
		argc = suspend_argc(node);
		if ( argc == 1 && node->s.args[0] == 0 )
		    argc = 0;
		trace_showapp(depth, node, argc, node->s.args);
		break;
	    case QUEUEME_TAG:
		fprintf(stderr, "que@%p", node);
		break;
	    default:
		unexpected_tag("trace_shownode", node_tag(node));
		break;
	    }
	    break;
	case SEARCH_CONT_KIND:
	    fprintf(stderr, "cont@%p", node);
	    break;
	case INDIR_KIND:
	    trace_shownode(depth, node->n.node);
	    break;
	case ABSTRACT_KIND:
	    name = node->info->cname;
	    if ( name == 0 )
		name = "<abstract>";
	    fprintf(stderr, "%s@%p", name, node);
	    break;
	case CAPP_KIND:
	case PAPP_KIND:
	    trace_showapp(depth, node, closure_argc(node), node->c.args);
	    break;
	default:
	    invalid_arg("trace_shownode", node_kind(node));
	}
}

static void
trace_showapp(int depth, Node *node, unsigned argc, Node **argv)
{
    unsigned i;

    if ( argc > 0 )
	fputc('(', stderr);

    fprintf(stderr, "%s", node->info->cname);
    if ( depth > 0 )
	for ( i = 0; i < argc; i++ )
	{
	    fputc(' ', stderr);
	    trace_shownode(depth - 1, argv[i]);
	}
    else if ( argc > 0 )
	fprintf(stderr, " ...");

    if ( argc > 0 )
	fputc(')', stderr);
}

@ 
Tracing for functions is implemented with [[trace_fun]]. This function
prints the name of the called function and its arguments. In addition,
[[trace_fun]] modifies the stack such that the calling function
returns through the code [[trace_return]], which prints the result of
the function. Because of this stack manipulation, [[trace_fun]] must
be called before the calling function changes the stack itself.  Note
that [[trace_fun]] carefully checks for tail calls in order to avoid
growing the stack unnecessarily.

<<trace.c>>=
void
trace_fun(const char *name, unsigned int arity)
{
    if ( regs.ret != trace_return )
    {
	SAVE_REGS(0);
	regs.ret = trace_return;
    }
    trace("%I enter %s%V\n", name, arity, regs.r);
}

static
FUNCTION(trace_return)
{
 ENTRY_LABEL(static, trace_return)
    trace("%I return %N\n", regs.r[0]);
    RETURN(regs.r[0], 0);
}
