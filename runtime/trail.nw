% -*- noweb-code-mode: c-mode -*-
% $Id: trail.nw 2740 2008-08-04 15:27:39Z wlux $
%
% Copyright (c) 2002-2008, Wolfgang Lux
% See ../LICENSE for the full license.
%
\subsection{The Trail}
In the default configuration, the trail stack is used to record all
destructive updates that must be undone when backtracking to a choice
point or leaving the current search space. Updates apply to updatable
nodes, i.e., variables, shared lazy applications, and queue-me nodes,
but also array elements and thread queue entries can be changed. Some
of these updates only change one field of a node, while others also
change the node type by overwriting the info pointer. For simplicity
we always save the info pointer on the trail.

If the runtime system was configured with the
\texttt{--enable-copying} option, no trail stack is used and the code
in this file is effectively disabled.

<<trail.h>>=
#if !COPY_SEARCH_SPACE
typedef struct save_rec {
    word	 *addr;		/* address of updated node */
    word	 info;		/* old info vector */
    unsigned int ofs;		/* offset within node */
    word	 val;		/* saved value */
} SaveRec;
#endif

@
The trail stack is implemented as a single array starting at address
[[trail_base]] and ending at [[trail_end]]. The register [[regs.tp]]
serves as allocation pointer for the trail. Before adding a new entry
to the trail the code must check that there is no trail overflow. This
can be done with the [[CHECK_TRAIL]] and [[CHECK_TRAIL1]] macros.

<<trail.h>>=
#if !COPY_SEARCH_SPACE
extern SaveRec *trail_base, *trail_end;

extern void trail_overflow(void) __attribute__((noreturn));

#define CHECK_TRAIL1()	if ( regs.tp >= trail_end ) trail_overflow();
#define CHECK_TRAIL(n)	if ( regs.tp + (n) > trail_end ) trail_overflow();
#endif

@
<<trail.c>>=
#include "config.h"
#include <stdio.h>
#include <stdlib.h>
#include "debug.h"
#include "run.h"
#include "regs.h"
#include "heap.h"
#include "trail.h"
#include "main.h"

#if !COPY_SEARCH_SPACE
SaveRec *trail_base;
SaveRec *trail_end;

void
trail_overflow()
{
    fprintf(stderr,
	    "Trail overflow; current size: %u bytes\n"
	    "USE +RTS -tSIZE to increase trail size\n",
	    trailsize);
    exit(2);
}
#endif

@
The initialization function allocates a trail array with the specified
size.

<<trail.h>>=
#if !COPY_SEARCH_SPACE
extern void init_trail(unsigned int trail_size);
#endif

@
<<trail.c>>=
#if !COPY_SEARCH_SPACE
void
init_trail(unsigned int trail_size)
{
    trail_size = (trail_size + pagemask) & ~pagemask;
    trail_base = (SaveRec *)malloc(trail_size);
    if ( (long)trail_base & pagemask )
    {
	free(trail_base);
	trail_base = (SaveRec *)malloc(trail_size + pagemask);
	trail_base = (SaveRec *)(((long)trail_base + pagemask) & ~pagemask);
    }
    if ( trail_base == 0 )
	sys_error("init_trail");

    trail_end = trail_base + trail_size / sizeof(SaveRec);
}
#endif

@
When an updatable node is changed, its info pointer and the changed
field of the node have to be saved on the trail if the overwritten
state of the node may be restored later. This is the case for all
nodes which are not allocated in the current heap segment. In
addition, for fields that can be updated more than once, like the
wait-queue of a variable node, the old state needs to be saved only
once for each heap segment. As the compiler uses fresh values to
overwrite the node in this case, we need not scan the trail to detect
multiple changes of the same field. Instead we can check the contents
field that is going to be saved. If its current value points to a node
in the current heap segment while the node itself belongs to an older
segment, the node has been overwritten and saved already and therefore
it is not necessary to save it again. The [[SAVE]] macro checks for
both conditions and saves the info pointer and old value only when
necessary. In contrast, the [[DO_SAVE]] macro always saves its
argument to the trail. The convenience macro [[SET_FIELD]] combines
the [[SAVE]] macro with a subsequent assignment to the saved field.

<<trail.h>>=
#if !COPY_SEARCH_SPACE
# define INFO_OFS	word_offsetof(Node, info)

# define DO_SAVE(v,f) do {				\
	CHECK_TRAIL1();					\
	regs.tp->addr = (word *)(v);			\
	regs.tp->info = regs.tp->addr[INFO_OFS];	\
	regs.tp->ofs  = (word *)&(v->f) - (word *)(v);	\
	regs.tp->val  = (word)(v->f);			\
	regs.tp++;					\
    } while (0)
# define SAVE(v,f) do {						     \
	if ( (word *)(v) < regs.hlim && (word *)(v->f) < regs.hlim ) \
	    DO_SAVE(v,f);					     \
    } while (0)
#else
# define DO_SAVE(v,f)  /* empty */
# define SAVE(v,f)     /* empty */
#endif

#define SET_FIELD(v,f,x) do { SAVE(v,f); (v->f) = (x); } while ( 0 )

@
Upon backtracking, the values saved in the trail have to be
restored. This can be done by decrementing the trail pointer and
restoring the saved value from the trail entry until the old value of
the trail pointer is reached. The [[RESTORE]] macro performs this
task.

<<trail.h>>=
#if !COPY_SEARCH_SPACE
#define RESTORE(oldTp) do {				 \
	while ( regs.tp > oldTp ) {			 \
	    --regs.tp;					 \
	    regs.tp->addr[INFO_OFS]	= regs.tp->info; \
	    regs.tp->addr[regs.tp->ofs] = regs.tp->val;	 \
	}						 \
    } while (0)
#endif
