% -*- noweb-code-mode: c-mode -*-
% $Id: unify.nw 2668 2008-04-21 06:50:50Z wlux $
%
% Copyright (c) 2001-2008, Wolfgang Lux
% See ../LICENSE for the full license.
%
\subsection{Unification}\label{sec:unification}
The equality constraint \texttt{=:=} tries to unify its arguments. The
auxiliary entry point [[bind_var]] is used to bind a variable to a
data term that does not contain this variable. Note that [[bind_var]]
does not return [[Success]], but the node to which the variable was
bound.

<<unify.h>>=
DECLARE_LABEL(extern, ___61__58__61_);
DECLARE_LABEL(extern, bind_var);

#if NO_OCCURS_CHECK
# define occurs(var,arg,nf)	(*(nf) = !is_tagged_ptr(arg), false)
#else
extern bool occurs(Node *, Node *, bool *);
#endif
extern bool eq_root(Node *, Node *, unsigned int *);
extern bool eq_args(unsigned int, Node *, Node *, unsigned int, Node **);

@ 
<<unify.c>>=
#include "config.h"
#include "debug.h"
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "run.h"
#include "regs.h"
#include "heap.h"
#include "stack.h"
#include "eval.h"
#include "threads.h"
#include "spaces.h"
#include "trail.h"
#include "data.h"
#include "equal.h"
#include "unify.h"
#include "cam.h"
#include "trace.h"

#define pair_cons_node_size closure_node_size(3)
static DEFINE_DATA(pair_cons, ",:", CONS_TAG, 3);

DECLARE_CONST(__Prelude__True);

DECLARE_LABEL(static, ___61__58__61__1);
DECLARE_LABEL(static, ___61__58__61__2);
DECLARE_LABEL(static, unify_var);
DECLARE_LABEL(static, unify_var_1);
DECLARE_LABEL(static, unify_args);
DECLARE_LABEL(static, unify_args_1);
DECLARE_LABEL(static, unify_args_2);
DECLARE_LABEL(static, unify_papp_args);

#define NO_SOLUTION "(=:=): no solution"

FUNCTION(___61__58__61_)
{
 ENTRY_LABEL(extern, ___61__58__61_)
    TRACE_FUN("=:=", 2);
    SAVE_REGS(1);
    EVAL_INDIR(___61__58__61__1);
}

static
FUNCTION(___61__58__61__1)
{
 ENTRY_LABEL(static, ___61__58__61__1)
    SWAPn(0);
    EVAL(___61__58__61__2);
}

static
FUNCTION(___61__58__61__2)
{
    Node *arg1, *arg2;
 ENTRY_LABEL(static, ___61__58__61__2)
    arg1 = regs.sp[0];
    arg2 = regs.r[0];

    while ( is_tagged_ptr(arg1) && is_indir_node(arg1) )
	arg1 = arg1->n.node;
    if ( is_tagged_ptr(arg1) && is_variable_node(arg1) )
    {
	/* check for trivial unification */
	if ( arg1 != arg2 )
	{
	    regs.r[0]  = arg1;
	    regs.sp[0] = arg2;
	    GOTO(unify_var);
	}
    }
    else if ( is_tagged_ptr(arg2) && is_variable_node(arg2) )
    {
	regs.r[0]  = arg2;
	regs.sp[0] = arg1;
	GOTO(unify_var);
    }
    else
    {
	unsigned int n = 0;

	if ( !eq_root(arg1, arg2, &n) )
	    FAIL(NO_SOLUTION);
	else if ( n > 0 )
	{
	    bool exist_type;
	    Node *arglist;

	    /* NB assign exist_type before calling eq_args because a
	     *    garbage collection in eq_args will invalidate arg1 */
	    exist_type = is_papp_node(arg1)
		|| (is_capp_node(arg1) && node_tag(arg1) < 0);
	    arglist = nil;
	    if ( !eq_args(0, arg1, arg2, n, &arglist) )
		FAIL(NO_SOLUTION);

	    if ( arglist != nil )
	    {
		regs.sp[0] = arglist;
		if ( exist_type )
		{
		    regs.r[0] = CONST(__Prelude__True);
		    GOTO(unify_papp_args);
		}
		else
		    GOTO(unify_args);
	    }
	}
    }

    RETURN(Success, 1);
}

@ 
The implementation of strict equality is based on the two functions
[[eq_root]] and [[eq_args]]. The function [[eq_root]] computes
whether the root nodes of two terms are equal. The function
[[eq_args]] constructs a list of argument pairs from the two nodes,
for which equality still needs to be checked.

In general, two nodes are considered equal if they have the same info
pointer. In addition, for primitive nodes representing characters and
numbers, their values must match. Abstract nodes are considered equal
only if they are physically equal. A special case is needed for
tuples and their partial applications because the compiler allocates
(private) info pointers for tuples in every module.

\label{unsafe-equality}
Note that [[eq_root]] is capable of comparing terms of different
types. This is due to the fact that polymorphic equality is not type
safe when applied to partial applications or data constructors with
existentially quantified types. For instance, the expression
\begin{verbatim}
  flip const 1 =:= flip const Nothing
\end{verbatim}
is accepted by the type checker because \texttt{flip const 1} and
\texttt{flip const Nothing} have the same (polymorphic) type. Despite
this unsoundness, we support equality for partial applications because
it allows returning functional values through logic variables.

<<unify.c>>=
bool
eq_root(Node *arg1, Node *arg2, unsigned int *argc)
{
    bool   eq;
    double d, e;

    *argc = 0;

#if !NO_POINTER_TAGS
    if ( is_tagged_char(arg1) )
	eq = arg1 == arg2;
    else if ( is_tagged_char(arg2) )
	eq = false;
    else if ( is_tagged_int(arg1) )
    {
	if ( is_tagged_int(arg2) )
	    eq = arg1 == arg2;
	else
	    switch ( node_kind(arg2) )
	    {
	    case INT_KIND:
		eq = untag_int(arg1) == arg2->i.i;
		break;
	    case BIGINT_KIND:
		eq = mpz_cmp_si(arg2->bi.mpz, untag_int(arg1)) == 0;
		break;
	    default:
		eq = false;
	    }
    }
    else if ( is_tagged_int(arg2) )
    {
	switch ( node_kind(arg1) )
	{
	case INT_KIND:
	    eq = arg1->i.i == untag_int(arg2);
	    break;
	case BIGINT_KIND:
	    eq = mpz_cmp_si(arg1->bi.mpz, untag_int(arg2));
	    break;
	default:
	    eq = false;
	}
    }
    else
#endif
    if ( arg1->info == arg2->info )
    {
	switch ( node_kind(arg1) )
	{
	case CHAR_KIND:
#if NO_POINTER_TAGS
	    eq = arg1->ch.ch == arg2->ch.ch;
	    break;
#else
	    curry_panic("impossible: eq_root: CHAR_KIND\n");
#endif
        case INT_KIND:
	    eq = arg1->i.i == arg2->i.i;
	    break;
	case BIGINT_KIND:
	    eq = mpz_cmp(arg1->bi.mpz, arg2->bi.mpz) == 0;
	    break;
        case FLOAT_KIND:
	    get_double_val(d, arg1);
	    get_double_val(e, arg2);
	    eq = d == e;
            break;
	case PTR_KIND:
	    eq = arg1->p.ptr == arg2->p.ptr;
	    break;
	case FOREIGN_PTR_KIND:
	    eq = arg1->fp.ptr == arg2->fp.ptr;
	    break;
	case VECTOR_KIND:
	    eq = arg1->a.length == arg2->a.length;
	    if ( eq )
		*argc = vector_argc(arg1);
	    break;
	case SEARCH_CONT_KIND:
	case ABSTRACT_KIND:
	    eq = arg1 == arg2;
	    break;
	case CAPP_KIND:
	case PAPP_KIND:
	    eq	  = true;
	    *argc = closure_argc(arg1);
	    break;

	default:
	    invalid_arg("eq_root", node_kind(arg1));
        }
    }
    else if ( is_tuple(arg1->info) && is_tuple(arg2->info) &&
	      arg1->info->kind == arg2->info->kind &&
	      arg1->info->tag == arg2->info->tag &&
	      arg1->info->length == arg2->info->length )
    {
	eq = true;
	*argc = closure_argc(arg1);
    }
    else
	eq = false;

    return eq;
}

@ 
When two terms have the same root, the arguments need to be compared
in order to decide equality. The function [[eq_args]] constructs a
list of argument pairs for a pair of data constructor applications or
partial applications that have the same root. The function already
checks for trivial equalities itself and returns [[true]] if both
arguments are possibly equal and [[false]] otherwise.

We consider an equality trivial here if both corresponding arguments
are ground atoms. In addition, if both arguments are data constructor
applications with different roots, [[eq_args]] returns [[false]]
immediately.

<<unify.c>>=
bool
eq_args(unsigned int n_regs, Node *arg1, Node *arg2,
	unsigned int n, Node **arglist)
{
    bool	 is_vect;
    unsigned int i;
    double	 d, e;
    Node	 *x, *y, *next, **argp1, **argp2;

    *arglist = nil;
    if ( n == 0 )
	return true;

    BEGIN_LOCAL_ROOTS2(arg1, arg2)
    CHECK_HEAP(n_regs, n * pair_cons_node_size);
    END_LOCAL_ROOTS

    is_vect = is_vector_node(arg1);
    argp1   = (is_vect ? arg1->a.args : arg1->c.args) + n;
    argp2   = (is_vect ? arg2->a.args : arg2->c.args) + n;

    for ( i = n; i-- > 0; )
    {
	x = *--argp1;
	y = *--argp2;
	while ( is_tagged_ptr(x) && is_indir_node(x) )
	    x = x->n.node;
	while ( is_tagged_ptr(y) && is_indir_node(y) )
	    y = y->n.node;

#if !NO_POINTER_TAGS
	if ( is_tagged_char(x) )
	{
	    if ( !is_tagged_ptr(y) )
	    {
		if ( x != y )
		    return false;
		continue;
	    }
	}
	else if ( is_tagged_char(y) )
	{
	    if ( !is_tagged_ptr(x) )
		return false;
	}
	else if ( is_tagged_int(x) )
	{
	    if ( is_tagged_int(y) )
	    {
		if ( x != y )
		    return false;
		continue;
	    }
	    else
	    {
		switch ( node_kind(y) )
		{
		case INT_KIND:
		    if ( untag_int(x) != y->i.i )
			return false;
		    continue;
		case BIGINT_KIND:
		    if ( mpz_cmp_si(y->bi.mpz, untag_int(x)) != 0 )
			return false;
		    continue;
		default:
		    break;
		}
	    }
	}
	else if ( is_tagged_int(y) )
	{
	    switch ( node_kind(x) )
	    {
	    case INT_KIND:
		if ( x->i.i != untag_int(y) )
		    return false;
		continue;
	    case BIGINT_KIND:
		if ( mpz_cmp_si(x->bi.mpz, untag_int(y)) != 0 )
		    return false;
		continue;
	    default:
		break;
	    }
	}
	else
#endif
	{
	    switch ( node_kind(x) )
	    {
	    case CAPP_KIND:
		if ( is_capp_node(y) )
		{
		    if ( x->info != y->info &&
			 (!is_tuple(x->info) || !is_tuple(y->info) ||
			  x->info->length != y->info->length) )
			return false;
		    if ( closure_argc(x) == 0 )
			continue;
		}
		break;
	    case PAPP_KIND:
		if ( is_papp_node(y) )
		{
		    if ( x->info != y->info &&
			 (!is_tuple(x->info) || !is_tuple(y->info) ||
			  x->info->tag != y->info->tag ||
			  x->info->length != y->info->length) )
			return false;
		    if ( closure_argc(x) == 0 )
			continue;
		}
		break;
	    case LVAR_KIND:
		if ( x == y )
		    continue;
		break;
	    case LAZY_KIND:
		break;
	    case VECTOR_KIND:
		if ( is_vector_node(y) )
		{
		    if ( x->info != y->info || x->a.length != y->a.length )
			return false;
		    if ( vector_argc(x) == 0 )
			continue;
		}
		break;
	    case CHAR_KIND:
#if NO_POINTER_TAGS
		if ( is_char_node(y) )
		{
		    if ( x->ch.ch != y->ch.ch )
			return false;
		    continue;
		}
		break;
#else
		curry_panic("impossible: eq_args: CHAR_KIND\n");
#endif
	    case INT_KIND:
		if ( is_int_node(y) )
		{
		    if ( x->i.i != y->i.i )
			return false;
		    continue;
		}
		break;
	    case BIGINT_KIND:
		if ( is_bigint_node(y) )
		{
		    if ( mpz_cmp(x->bi.mpz, y->bi.mpz) != 0 )
			return false;
		    continue;
		}
		break;
	    case FLOAT_KIND:
		if ( is_float_node(y) )
		{
		    get_double_val(d, x);
		    get_double_val(e, y);
		    if ( d != e )
			return false;
		    continue;
		}
		break;
	    case PTR_KIND:
		if ( is_ptr_node(y) )
		{
		    if ( x->p.ptr != y->p.ptr )
			return false;
		    continue;
		}
		break;
	    case FOREIGN_PTR_KIND:
		if ( is_foreign_ptr_node(y) )
		{
		    if ( x->fp.ptr != y->fp.ptr )
			return false;
		    continue;
		}
		break;
	    case ABSTRACT_KIND:
		if ( is_abstract_node(y) )
		{
		    if ( x != y )
			return false;
		    continue;
		}
		break;
	    case SEARCH_CONT_KIND:
		if ( is_search_cont_node(y) )
		{
		    if ( x != y )
			return false;
		    continue;
		}
		break;
	    default:
		invalid_arg("eq_args", node_kind(x));
	    }
	}

	next		= (Node *)regs.hp;
	next->info	= &pair_cons_info;
	next->c.args[0] = x;
	next->c.args[1] = y;
	next->c.args[2] = *arglist;
	*arglist	= next;
	regs.hp	       += pair_cons_node_size;
    }

    return true;
}

@
The unification of the arguments of data terms proceeds
concurrently. Instead of calling the code for the predefined operator
[[&]], we handle the concurrent evaluation ourselves. Thus, we can
make use of the fact that the unification always returns the value
[[Success]] and can never return an unbound variable.

<<unify.c>>=
static
FUNCTION(unify_args)
{
    Node *susp, *arglist;
 ENTRY_LABEL(static, unify_args)
    arglist = regs.sp[0];
    ASSERT(arglist->info == &pair_cons_info);
    if ( arglist->c.args[2] == nil )
	CALL_RET2(___61__58__61_, 1, arglist->c.args[0], arglist->c.args[1]);

    CHECK_HEAP(1, queueMe_node_size);
    susp	= (Node *)regs.hp;
    susp->info	= queueMe_info_table;
    susp->q.spc	= regs.ss;
    susp->q.wq	= 0;
    regs.hp    += queueMe_node_size;

    arglist = regs.sp[0];
    CHECK_STACK1();
    regs.sp   -= 1;
    regs.sp[0] = regs.r[2] = susp;
    regs.sp[1] = arglist->c.args[2];
    regs.r[0]  = arglist->c.args[0];
    regs.r[1]  = arglist->c.args[1];
    start_thread(3, unify_args_1);

    SAVE_RET1(regs.r[2]);
    CALL2(___61__58__61_, update, regs.r[0], regs.r[1]);
}

static
FUNCTION(unify_args_1)
{
    Node *r;
 ENTRY_LABEL(static, unify_args_1)
    for ( r = regs.sp[0]; node_kind(r) == INDIR_KIND; r = r->n.node )
	;

    if ( node_kind(r) == CAPP_KIND )
    {
	regs.sp += 1;
	GOTO(unify_args);
    }

    ASSERT(node_kind(r) == LAZY_KIND && node_tag(r) == QUEUEME_TAG);
    CHECK_STACK1();
    regs.sp   -= 1;
    regs.sp[0] = regs.sp[2];
    regs.sp[1] = (Node *)unify_args_2;
    regs.sp[2] = r;
    GOTO(unify_args);
}

static
FUNCTION(unify_args_2)
{
    Node *r;
 ENTRY_LABEL(static, unify_args_2)
    ASSERT(node_kind(regs.r[0]) == CAPP_KIND);
    for ( r = regs.sp[0]; node_kind(r) == INDIR_KIND; r = r->n.node )
	;

    if ( node_kind(r) == LAZY_KIND && node_tag(r) == QUEUEME_TAG )
	ENTER(r, 1);

    ASSERT(node_kind(r) == CAPP_KIND);
    RETURN(r, 1);
}

@ 
As explained above (p.~\pageref{unsafe-equality}), computing the
equality of two partial applications and of two data constructors with
existentially quantified types, respectively, is not type safe. In
order to prevent ill-typed nodes from escaping the scope of an
equality constraint, e.g., by using a function \texttt{cast x | flip
const x =:= flip const y = y where y free} with type \texttt{a -> b},
we restrict equality constraints between partial applications and
between existentially quantified data constructors to ground terms.
This is implemented by applying the \texttt{(==)} primitive to each
pair of arguments and checking that all of these applications reduce
to \texttt{True}.

\ToDo{Using \texttt{(==)} and checking argument pairs sequentially is
probably too restrictive. Provide a more general solution by defining
and using a rigid variant of \texttt{(=:=)}.}

<<unify.c>>=
static
FUNCTION(unify_papp_args)
{
    Node *arglist;
 ENTRY_LABEL(static, unify_papp_args)
    if ( regs.r[0] != CONST(__Prelude__True) )
	FAIL(NO_SOLUTION);

    arglist = regs.sp[0];
    if ( arglist == nil )
	RETURN(Success, 1);
    ASSERT(arglist->info == INFO(pair_cons));

    regs.sp[0] = arglist->c.args[2];
    CALL2(___61__61_, unify_papp_args, arglist->c.args[0], arglist->c.args[1]);
}

@
If a variable is unified with a data term, we have to perform an
occurs check in order to ensure that the term remains finite. The
check can be disabled with the \texttt{--disable-occurs-check}
configuration option, and is performed by the [[occurs]] function
below. As a side effect, [[occurs]] also checks for unevaluated nodes
in the data term and sets the flag whose address is given by the
argument [[nf]] to [[false]]. Thus, by setting this flag to [[true]]
initially, it is possible to check whether the data term is in normal
form. This information is used in order to bind the variable directly
to the data term and avoid evaluating it redundantly to normal form
again. \emph{Beware that the value of [[nf]] is valid only if the
variable does not occur in the data term.}

As in [[eq_args]], we perform trivial unifications directly in
[[unify_var]] and thus can avoid creating redundant threads and
variables. In fact, the code below works the other way around. First,
a flat copy of the data term is created and then those arguments whose
unification is not trivial are replaced by fresh variables.

<<unify.c>>=
#if !NO_OCCURS_CHECK
bool
occurs(Node *var, Node *arg, bool *nf)
{
    unsigned i, argc;
    Node     **argp;

    while ( is_tagged_ptr(arg) )
    {
	if ( arg == var )
	    return true;

	argc = 0;
	argp = 0;
	switch ( node_kind(arg) )
	{
	case CAPP_KIND:
	case PAPP_KIND:
	    argc = closure_argc(arg);
	    argp = arg->c.args;
	    break;
	case LAZY_KIND:
	    *nf = false;
	    break;
	case INDIR_KIND:
	    arg = arg->n.node;
	    continue;
	case VECTOR_KIND:
	    argc = vector_argc(arg);
	    argp = arg->a.args;
	    break;
	}

	for ( i = 0; i < argc; i++ )
	    if ( occurs(var, *argp++, nf) )
		return true;
	break;
    }
    return false;
}
#endif /* !NO_OCCURS_CHECK */

static
FUNCTION(unify_var)
{
    bool	 nf, is_vect;
    unsigned int i, n, sz;
    Node	 *var, *arg, *next, *arglist, **argp;
 ENTRY_LABEL(static, unify_var)
    if ( !is_local_space(regs.r[0]->v.spc) )
    {
	if ( is_tagged_ptr(regs.sp[0]) && is_variable_node(regs.sp[0]) &&
	     is_local_space(regs.sp[0]->v.spc) )
	    SWAPn(0);
	else
	    CALL1(sync_var, ___61__58__61__1, regs.r[0]);
    }

    nf	= true;
    var = regs.r[0];
    arg = regs.sp[0];
    if ( occurs(var, arg, &nf) )
	FAIL(NO_SOLUTION);

    arglist = nil;
    if ( !nf )
    {
	switch ( node_kind(arg) )
	{
	case VECTOR_KIND:
	    is_vect = true;
	    n	    = vector_argc(arg);
	    sz	    = arg->a.length;
	    break;
	case CAPP_KIND:
	case PAPP_KIND:
	    is_vect = false;
	    n	    = closure_argc(arg);
	    sz	    = arg->info->length;
	    break;
	default:
	    is_vect = false;
	    n	    = 0;
	    sz	    = 0;
	    break;
	}

	if ( n > 0 )
	{
	    CHECK_HEAP(1, sz + n * (variable_node_size + pair_cons_node_size));
	    memcpy(regs.hp, regs.sp[0], sz * word_size);
	    regs.sp[0] = (Node *)regs.hp;
	    regs.hp   += sz;

	    argp  = is_vect ? regs.sp[0]->a.args : regs.sp[0]->c.args;
	    argp += n;
	    for ( i = n; i-- > 0; )
	    {
		arg = *--argp;
		while ( is_tagged_ptr(arg) && is_indir_node(arg) )
		    arg = arg->n.node;
		if ( is_tagged_ptr(arg) &&
		     ((is_capp_node(arg) && closure_argc(arg) > 0) ||
		      (is_papp_node(arg) && closure_argc(arg) > 0) ||
		      (is_vector_node(arg) && vector_argc(arg) > 0) ||
		      is_lazy_node(arg)) )
		{
		    var	= *argp	 = (Node *)regs.hp;
		    var->info	 = variable_info_table;
		    var->v.spc	 = regs.ss;
		    var->v.wq	 = 0;
		    var->v.cstrs = 0;
		    regs.hp	+= variable_node_size;

		    next	    = (Node *)regs.hp;
		    next->info	    = &pair_cons_info;
		    next->c.args[0] = var;
		    next->c.args[1] = arg;
		    next->c.args[2] = arglist;
		    regs.hp	   += pair_cons_node_size;

		    arglist = next;
		}
		else
		    *argp = arg;
	    }
	}
    }

    /* bind the variable */
    var	       = regs.r[0];
    arg	       = regs.sp[0];
    regs.sp[0] = arglist;
    CALL2(bind_var, unify_var_1, var, arg);
}

static
FUNCTION(unify_var_1)
{
 ENTRY_LABEL(static, unify_var_1)
    if ( regs.sp[0] == nil )
	RETURN(Success, 1);
    GOTO(unify_args);
}

@
When a variable is bound, the runtime system first has to check that
the binding does not conflict with any of the constraints imposed on
the variable. This is checked simply by calling the disequality
primitive for the bound value and each constraint in turn. The
variable node itself is overwritten with an indirection to the bound
value. As for updating a suspended application node, all threads that
have been delayed in a rigid pattern matching for the variable are
woken again. In contrast to suspended applications, these threads are
run before continuing the current thread.

If a variable is bound to another variable, no thread is actually
woken. Instead, the wait queues of both variables are concatenated. We
must also check the constraints of the other variable in this case.
As we cannot update a non-local variable, the current search is
suspended if the other variable is a non-local variable with
constraints or waiting threads.

In general, the [[bind_var]] code is called immediately from a
flexible pattern match or from the unification code. However, when
[[bind_var]] is called after resuming a search continuation, the
variable may be instantiated already. This may happen if a search
strategy applies the search continuation to some non-variable term in
order to restrict the search space, as in the following example:
\begin{verbatim}
  main = concatMap try $ map (`inject` nonNull) $ try goal
  goal xs = length xs =:= 1
  nonNull (_:_) = success
\end{verbatim}
In this case, [[bind_var]] is implicitly transformed into a
unification between the two values.

<<unify.c>>=
DECLARE_LABEL(static, bind_var_1);
DECLARE_LABEL(static, bind_var_2);
DECLARE_LABEL(static, check_constraints);
DECLARE_LABEL(static, check_constraints_1);
DECLARE_LABEL(static, wake);
DECLARE_LABEL(static, wake_1);

FUNCTION(bind_var)
{
    bool	is_var;
    Node	*var, *node;
    Constraint	*cstrs;
    ThreadQueue	wq;
 ENTRY_LABEL(extern, bind_var)
    var	 = regs.r[0];
    node = regs.r[1];

    if ( !is_tagged_ptr(var) || !is_variable_node(var) ||
	 !is_local_space(var->v.spc) )
    {
	SAVE_RET1(node);
	CALL2(___61__58__61_, bind_var_1, regs.r[0], regs.r[1]);
    }

    cstrs  = var->v.cstrs;
    wq	   = var->v.wq;
    is_var = false;
    for (;;)
    {
	if ( is_tagged_ptr(node) )
	    switch ( node->info->kind )
	    {
	    case INDIR_KIND:
		node = node->n.node;
		continue;
	    case LVAR_KIND:
		if ( !is_local_space(node->v.spc) && (wq || cstrs) )
		{
		    SAVE_RET1(var);
		    CALL1(sync_var, bind_var_2, node);
		}
		is_var = true;
		break;
	    }
	break;
    }

    /* update the variable */
    TRACE(("%I %N = %N\n", var, node));
#if !COPY_SEARCH_SPACE
    if ( (word *)var < regs.hlim )
    {
	if ( (word *)&var->v.wq == (word *)&var->n.node )
	{
	    if ( (word *)var->v.wq < regs.hlim )
		DO_SAVE(var, v.wq);
	}
	else if ( (word *)&var->v.cstrs == (word *)&var->n.node )
	{
	    if ( (word *)var->v.cstrs < regs.hlim )
		DO_SAVE(var, v.cstrs);
	}
	var->info++;
    }
    else
#endif
	var->info = &indir_info;
    var->n.node = node;

    /* handle the wait queue of the variable */
    if ( wq )
    {
	if ( is_var )
	    SET_FIELD(node, v.wq, join_queues(wq, node->v.wq));
	else
	{
	    SAVE_RET1((Node *)wq);
	    regs.ret = wake;
	}
    }

    /* if there are any constraints on the variable re-check them */
    if ( cstrs )
    {
        SAVE_RET1((Node *)cstrs);
	regs.ret = check_constraints;
    }

    /* we need to check the constraints of the other variable, too */
    if ( is_var && is_local_space(node->v.spc) && node->v.cstrs )
    {
        SAVE_RET1((Node *)node->v.cstrs);
	regs.ret = check_constraints;
	SET_FIELD(node, v.cstrs, 0);
    }

    /* continue evaluation */
    RET(node);
}

static
FUNCTION(bind_var_1)
{
 ENTRY_LABEL(static, bind_var_1)
    RETURN(regs.sp[0], 1);
}

static
FUNCTION(bind_var_2)
{
    Node *node;
 ENTRY_LABEL(static, bind_var_2)
    node = regs.r[0];
    CALL_RET2(bind_var, 1, regs.sp[0], node);
}

static
FUNCTION(check_constraints)
{
 ENTRY_LABEL(static, check_constraints)
    CHECK_STACK1();
    regs.sp   -= 1;
    regs.sp[0] = regs.r[0];
    GOTO(check_constraints_1);
}

static
FUNCTION(check_constraints_1)
{
    Node *node;
    Constraint *cstrs;
 ENTRY_LABEL(static, check_constraints_1)
    node  = regs.sp[0];
    cstrs = (Constraint *)regs.sp[1];
    if ( cstrs )
    {
	regs.sp[1] = (Node *)cstrs->cstrs;
	CALL2(cstrs->info->eval, check_constraints_1, node, (Node *)cstrs);
    }
    RETURN(node, 2);
}

static
FUNCTION(wake)
{
    ThreadQueue	wq;
 ENTRY_LABEL(static, wake)
    /* handle the wait queue of the variable */
    wq	       = (ThreadQueue)regs.sp[0];
    regs.sp[0] = regs.r[0];

    /* wake all threads from the queue */
    GOTO_INDIR(activate_threads(wq, wake_1));
}

static
FUNCTION(wake_1)
{
 ENTRY_LABEL(static, wake_1)
    RETURN(regs.sp[0], 1);
}
