% -*- noweb-code-mode: c-mode -*-
% $Id: vars.nw 3234 2016-06-18 16:22:27Z wlux $
%
% Copyright (c) 2002-2015, Wolfgang Lux
% See ../LICENSE for the full license.
%
\subsection{Naming variables}
When printing the result of a goal, we need to associate variable
nodes with unique names. To this end, the runtime system maintains a
dictionary that maps the addresses of variable nodes onto their names.
This dictionary is also consulted by the \texttt{dval} function.

<<vars.c>>=
#include "config.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "debug.h"
#include "run.h"
#include "regs.h"
#include "heap.h"
#include "vars.h"

@ 
At present the dictionary is implemented as a single-linked list
rooted in [[names_dict]] and a pointer to the last node of the
dictionary is saved in [[names_tail]]. We also use the global counter
[[names_count]] to assign unique names to variables.

The root of the dictionary and the type of dictionary nodes have to be
exported because the garbage collector must update the node pointers
in the dictionary.
\textbf{These declarations should not be used in any other module!}

\ToDo{Use a hash table for the dictionary.}

<<vars.h>>=
struct dict_node {
    Node	     *node;		/* variable node         */
    const char	     *name;		/* name of variables     */
    struct dict_node *next;		/* link to next variable */
};

extern struct dict_node *names_dict;

@ 
<<vars.c>>=
struct dict_node	*names_dict;
static struct dict_node	*names_tail;
static unsigned long	names_count;

@ 
New entries can be inserted into the dictionary using the function
[[add_name]]. The name will [[free]]d when the dictionary is released,
so the [[name]] argument should point to a [[malloc]]ed string --
except for entries allocated in the startup code that are never going
to be released.

<<vars.h>>=
extern void add_name(Node *node, const char *name);

@ 
<<vars.c>>=
void
add_name(Node *node, const char *name)
{
    struct dict_node *next;

    next = (struct dict_node *)malloc(sizeof(struct dict_node));
    if ( next == 0 )
	sys_error("add_name");

    next->node = node;
    next->name = name;
    next->next = 0;

    if ( names_tail == 0 )
    {
	assert(names_dict == 0);
	names_dict = names_tail = next;
    }
    else
    {
	names_tail->next = next;
	names_tail	 = next;
    }
}

@ 
To release dictionary entries quickly around choice points and search
contexts, we maintain a stack of dictionary save points, which save
the current dictionary tail and its name counter. Save points are
allocated with [[malloc]] and released with [[free]] once they are no
longer used. To avoid unnecessary allocations we reuse an existing
save point on the top of the stack when a new save point is pushed and
the state of the dictionary has not changed since the last push. A
reference count in each save point is used to keep track of how often
a save point is shared.

<<vars.c>>=
struct dict_savepoint {
    unsigned int	  refcount;
    struct dict_node	  *names_tail;
    unsigned long	  names_count;
    struct dict_savepoint *next;
} *savepoints;

@ 
The function [[save_names_dict]] creates a new save point with the
current state of the dictionary. If the state of the dictionary is
unchanged with respect to the most recent save point on the top of the
stack, the function just increments the reference count of this save
point. Otherwise a new save point is allocated and pushed onto the
stack.

<<vars.h>>=
extern void save_names_dict(void);

@ 
<<vars.c>>=
void
save_names_dict()
{
    if ( savepoints == 0 || savepoints->names_tail != names_tail ||
	 savepoints->names_count != names_count )
    {
	struct dict_savepoint *savepoint =
	    (struct dict_savepoint *)malloc(sizeof(struct dict_savepoint));
	if (savepoint == 0)
	    sys_error("save_names_dict");

	savepoint->refcount    = 1;
	savepoint->names_tail  = names_tail;
	savepoint->names_count = names_count;
	savepoint->next	       = savepoints;
	savepoints	       = savepoint;
    }
    else
	savepoints->refcount++;
}

@ 
The function [[release_names_dict]] releases the most recent save
point. This function decrements the reference count of that save point
and if it becomes zero, the memory allocated for the save point is
released and the save point is popped from the stack.

<<vars.h>>=
extern void release_names_dict(void);

@ 
<<vars.c>>=
void
release_names_dict()
{
    struct dict_savepoint *savepoint = savepoints;

    assert(savepoint != 0 && savepoint->refcount > 0);
    if (--savepoint->refcount == 0)
    {
	savepoints = savepoint->next;
	free(savepoint);
    }
}

@ 
The function [[release_names]] releases all dictionary entries created
since the most recent save point was pushed.

<<vars.h>>=
extern void release_names(void);

@ 
<<vars.c>>=
void
release_names()
{
    struct dict_node	  *curr, *next;
    struct dict_savepoint *savepoint = savepoints;

    assert(savepoint);
    if ( savepoint->names_tail != names_tail )
    {
	names_tail = savepoint->names_tail;
	if ( savepoint->names_tail == 0 )
	{
	    curr       = names_dict;
	    names_dict = 0;
	}
	else
	{
	    curr			= savepoint->names_tail->next;
	    savepoint->names_tail->next = 0;
	}

	for ( ; curr; curr = next )
	{
	    next = curr->next;
	    free((char *)curr->name);
	    free(curr);
	}
    }
    names_count = savepoint->names_count;
}

@ 
In order to cleanup the dictionary after a garbage collection, the
function [[cleanup_names]] should be used. This function looks for
dictionary nodes whose referenced (variable) node has been released
and in turn releases those dictionary nodes themselves. In addition,
the saved dictionary tails in choice points and search contexts are
updated to a preceding live dictionary node if necessary.

The function proceeds in three steps. First, the dictionary list is
reversed in order to be able to advance dictionary pointers backwards.
In the next step, the stack of save points is processed from top to
bottom and all dictionary pointers are set to the next dictionary node
with a non-null node pointer. In the last phase, the dictionary list
is reversed again and all nodes which do not point to a node are
released. In addition, the tail pointer of the dictionary is set to
the last live dictionary node (if any).

<<vars.h>>=
extern void cleanup_names(void);

@ 
<<vars.c>>=
void
cleanup_names()
{
    struct dict_node	  *prev, *curr, *next;
    struct dict_savepoint *savepoint;

    /* Phase I: reverse the dictionary */
    prev = 0;
    for ( curr = names_dict; curr; curr = next )
    {
	next	   = curr->next;
	curr->next = prev;
	prev	   = curr;
    }

    /* Phase II: update the save point stack */
    for ( savepoint = savepoints; savepoint; savepoint = savepoint->next )
    {
	curr = savepoint->names_tail;
	while ( curr && curr->node == 0 )
	    curr = curr->next;
	savepoint->names_tail = curr;
    }

    /* Phase III: re-reverse the dictionary and release unused nodes */
    for ( names_tail = prev;
	  names_tail && names_tail->node == 0;
	  names_tail = names_tail->next )
	;

    curr = prev;
    prev = 0;
    for ( ; curr; curr = next )
    {
	next = curr->next;
	if ( curr->node == 0 )
	{
	    free((char *)curr->name);
	    free(curr);
	}
	else
	{
	    curr->next = prev;
	    prev       = curr;
	}
    }
    names_dict = prev;
}

@ 
The function [[lookup_name]] returns the name of the given (variable)
node from the dictionary. If there is no name in the dictionary, a new
name is created with the help of the local function [[gen_name]].

<<vars.h>>=
extern const char *lookup_name(Node *node);

@ 
<<vars.c>>=
static const char *gen_name(void);

extern const char *lookup_name(Node *node)
{
    const char	     *name;
    struct dict_node *dict;

    for ( dict = names_dict; dict; dict = dict->next )
	if ( dict->node == node )
	    return dict->name;

    name = gen_name();
    add_name(node, name);
    return name;
}

@ 
The private function [[gen_name]] uses the counter [[names_count]] in
order to create unique names. In order to avoid name conflicts with
entities defined in the program, all generated names start with an
underscore.

\ToDo{Provide a runtime option to choose either uppercase or lowercase
names for generated names.}

<<vars.c>>=
static const char *
gen_name()
{
    char name[13];

    name[0] = '_';
    name[1] = 'a' + names_count % 26;
    if ( names_count < 26 )
	name[2] = '\0';
    else
	sprintf(name + 2, "%ld", names_count / 26);
    names_count++;

    return (const char *)strdup(name);
}
